C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/CyFlash.OBJ
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\1.0\PSoC Creator\import\keil\pk51\8.16\C51\BIN\c51.exe C:\Use
                    -rs\Jon Moeller\Documents\PSoC Creator\clockARM\ClockTest\ClockTest.cydsn\Generated_Source\PSoC3\CyFlash.c NOIV LARGE MOD
                    -DP2 OMF2 VB(1) PR(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/C
                    -yFlash.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source/PSoC3) OJ(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM
                    -/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/CyFlash.OBJ)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c  
   3          * Version 2.20
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note: 
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          *******************************************************************************
  16          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions, 
  18          * disclaimers, and limitations in the end user license agreement accompanying 
  19          * the software package with which this file was provided.
  20          ********************************************************************************/
  21          
  22          #include <Cydevice_trm.h>
  23          #include "CYFLASH.H"
  24          
  25          uint8 dieTemperature[2];
  26          
  27          #if (CYDEV_ECC_ENABLE == 0)
  28              static uint8 * rowBuffer = 0;
  29          #endif
  30          
  31          
  32          /*******************************************************************************
  33          * Function Name: CyFlash_Start
  34          ********************************************************************************
  35          *
  36          * Summary:
  37          *  Enable the EEPROM/Flash. In PSOC3_ES2/PSOC5_ES1, this will enable both
  38          *  Flash and EEPROM. In PSOC3_ES3/PSOC5_ES2, this will enable only Flash.
  39          *   
  40          * Parameters:
  41          *  void
  42          * 
  43          * Return:
  44          *  void  
  45          * 
  46          * Reentrant
  47          *  No
  48          *
  49          *******************************************************************************/
  50          void CyFlash_Start(void) 
  51          {
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 2   

  52   1          #if (PSOC3_ES2 || PSOC5_ES1)
                      /* Active Power Mode */
                      *PM_ACT_EEFLASH |= PM_FLASH_EE_MASK;
                      /* Standby Power Mode */
                      *PM_STBY_EEFLASH |= PM_FLASH_EE_MASK;
                  #endif
  58   1          
  59   1          #if (PSOC3_ES3 || PSOC5_ES2)
  60   1              /* Active Power Mode */
  61   1              *PM_ACT_FLASH_PTR |= PM_FLASH_MASK;
  62   1              /* Standby Power Mode */
  63   1              *PM_STBY_FLASH_PTR |= PM_FLASH_MASK;
  64   1          #endif
  65   1      }
  66          
  67          
  68          /*******************************************************************************
  69          * Function Name: CyFlash_Stop
  70          ********************************************************************************
  71          *
  72          * Summary:
  73          *  Disable the EEPROM/Flash. In PSOC3_ES2/PSOC5_ES1, this will disable both
  74          *  Flash and EEPROM. In PSOC3_ES3/PSOC5_ES2, this will disable only Flash.
  75          *
  76          * Parameters:
  77          *  void
  78          *
  79          * Return:
  80          *  void  
  81          * 
  82          * Side Effects:
  83          *  This setting is ignored as long as the CPU is currently running.  This will 
  84          *  only take effect when the CPU is later disabled.
  85          *
  86          * Reentrant
  87          *  Yes
  88          *
  89          *******************************************************************************/
  90          void CyFlash_Stop (void) 
  91          {
  92   1          #if (PSOC3_ES2 || PSOC5_ES1)
                      /* Active Power Mode */
                      *PM_ACT_EEFLASH &= ~PM_FLASH_EE_MASK;
                      /* Standby Power Mode */
                      *PM_STBY_EEFLASH &= ~PM_FLASH_EE_MASK;
                  #endif
  98   1          
  99   1          #if (PSOC3_ES3 || PSOC5_ES2)
 100   1              /* Active Power Mode */
 101   1              *PM_ACT_FLASH_PTR &= ~PM_FLASH_MASK;
 102   1              /* Standby Power Mode */
 103   1              *PM_STBY_FLASH_PTR &= ~PM_FLASH_MASK;
 104   1          #endif
 105   1      }
 106          
 107          
 108          /*******************************************************************************
 109          * Function Name: CySetTemp
 110          ********************************************************************************
 111          *
 112          * Summary:
 113          *  Sends a command to the SPC to read the die temperature. Sets a global value
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 3   

 114          *  used by the Write functions. This function must be called once before executing
 115          *  a series of Flash writing functions.
 116          
 117          *
 118          * Parameters:
 119          *  void
 120          *
 121          * Return:
 122          *  status:
 123          *   CYRET_SUCCESS if successful. The first byte is the sign of the temperature 
 124          *   (0 = negative, 1 = positive).
 125          *   The second byte is the magnitude.
 126          *   CYRET_LOCKED if Flash writing already in use
 127          *   CYRET_UNKNOWN if there was an SPC error.
 128          *  
 129          * Side Effects:
 130          *  Execution of this function takes an extended period of time.
 131          *
 132          * Reentrant
 133          *  Yes
 134          *
 135          *******************************************************************************/
 136          cystatus CySetTempInt(void) 
 137          {
 138   1          uint8 ticks;
 139   1          cystatus status;
 140   1      
 141   1          /* Make sure SPC is powered. */
 142   1          CySpcActivePower(1);
 143   1      
 144   1          /* Plan for failure. */
 145   1          status = CYRET_UNKNOWN;
 146   1      
 147   1          /* See if we can get the SPC. */
 148   1          if(CySpcLock() == CYRET_SUCCESS)
 149   1          {
 150   2              /* Create the command. */
 151   2              if(CySpcCreateCmdGetTemp(TEMP_NUMBER_OF_SAMPLES, TEMP_TIMER_PERIOD, TEMP_CLK_DIV_SELECT) == CYRET_
             -SUCCESS)
 152   2              {
 153   3                  /* Write the command. */
 154   3                  if(CySpcWriteCommand(0, 0) == CYRET_STARTED)
 155   3                  {
 156   4                      ticks = (uint8) TEMP_MAX_WAIT;
 157   4      
 158   4                      do
 159   4                      {
 160   5                          if(CySpcReadData(dieTemperature, 2) == 2)
 161   5                          {
 162   6                              status = CYRET_SUCCESS;
 163   6                              break;
 164   6                          }
 165   5                          
 166   5                          /* Wait for the reading to come in. */
 167   5                          CyDelay(1);
 168   5                          ticks--;
 169   5      
 170   5                      } while(ticks && !(*SPC_STATUS & SPC_SPC_IDLE));
 171   4                  }
 172   3              }
 173   2      
 174   2              /* Unlock the SPC so someone else can use it. */
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 4   

 175   2              CySpcUnlock();
 176   2          }
 177   1          else
 178   1          {
 179   2              status = CYRET_LOCKED;
 180   2          }
 181   1      
 182   1          return status;
 183   1      }
 184          
 185          cystatus CySetTemp(void) 
 186          {
 187   1          CySetTempInt();
 188   1          return CySetTempInt();
 189   1      }
 190          
 191          /*******************************************************************************
 192          * Function Name: CySetFlashEEBuffer
 193          ********************************************************************************
 194          *
 195          * Summary:
 196          *  Sets the user supplied temporary buffer to store SPC data while performing
 197          *  flash and EEPROM commands. This buffer is only necessary when Flash ECC is 
 198          *  disabled.
 199          *
 200          *
 201          * Parameters:
 202          *  buffer:
 203          *       Address of block of memory to store temporary memory. The size of the
 204          *       block of memory is SIZEOF_FLASH_ROW + SIZEOF_ECC_ROW.
 205          *   
 206          * Return:
 207          *  status:
 208          *   CYRET_SUCCESS if successful.
 209          *   CYRET_LOCKED if the SPC is already in use.
 210          *
 211          * Reentrant
 212          *  Yes
 213          *
 214          *******************************************************************************/
 215          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 216          {
 217   1          cystatus status;
 218   1      
 219   1          /* Make sure SPC is powerd. */
 220   1          CySpcActivePower(1);
 221   1      
 222   1          if(!buffer)
 223   1          {
 224   2              status = CYRET_BAD_PARAM;
 225   2          }
 226   1          /* See if we can get the SPC. */
 227   1          else if(CySpcLock() != CYRET_SUCCESS)
 228   1          {
 229   2              status = CYRET_LOCKED;
 230   2          }
 231   1          else
 232   1          {
 233   2              #if (CYDEV_ECC_ENABLE == 0)
 234   2                  rowBuffer = buffer;
 235   2              #endif
 236   2              status = CYRET_SUCCESS;
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 5   

 237   2      
 238   2              /* Unlock the SPC so someone else can use it. */
 239   2              CySpcUnlock();
 240   2          }
 241   1      
 242   1          return status;
 243   1      }
 244          
 245                                
 246          #if (CYDEV_ECC_ENABLE == 1)
              
              /*******************************************************************************
              * Function Name: CyWriteRowData
              ********************************************************************************
              *
              * Summary:
              *   Sends a command to the SPC to load and program a row of data in flash.
              *
              *
              * Parameters:
              *  arrayID: 
              *   ID of the array to write.
              *  rowAddress:
              *   rowAddress of flash row to program.
              *  rowData:
              *   Array of bytes to write.
              * 
              * Return:
              *  status:
              *   CYRET_SUCCESS if successful.
              *   CYRET_LOCKED if the SPC is already in use.
              *   CYRET_CANCELED if command not accepted
              *   CYRET_UNKNOWN if there was an SPC error.
              *
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, uint8 * rowData) 
              {
                  uint16 rowSize;
                  cystatus status;
              
                  rowSize = (arrayId > LAST_FLASH_ARRAYID) ? SIZEOF_EEPROM_ROW : SIZEOF_FLASH_ROW;
              
                  status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
                  return status;
              }
              
              #else /* CYDEV_ECC_ENABLE == 0 */
 287          
 288          /*******************************************************************************
 289          * Function Name: CyWriteRowData
 290          ********************************************************************************
 291          *
 292          * Summary:
 293          *   Sends a command to the SPC to load and program a row of data in flash.
 294          *
 295          *
 296          * Parameters:
 297          *  arrayID: 
 298          *   ID of the array to write.
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 6   

 299          *  rowAddress:
 300          *   rowAddress of flash row to program.
 301          *  rowData:
 302          *   Array of bytes to write.
 303          * 
 304          * Return:
 305          *  status:
 306          *   CYRET_SUCCESS if successful.
 307          *   CYRET_LOCKED if the SPC is already in use.
 308          *   CYRET_CANCELED if command not accepted
 309          *   CYRET_UNKNOWN if there was an SPC error.
 310          *
 311          * Reentrant
 312          *  Yes
 313          *
 314          *******************************************************************************/
 315          cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, uint8 * rowData) 
 316          {
 317   1          uint8 index;
 318   1          uint32 offset;
 319   1          uint16 rowSize;
 320   1          cystatus status;
 321   1      
 322   1          rowSize = (arrayId > LAST_FLASH_ARRAYID) ? SIZEOF_EEPROM_ROW : (SIZEOF_FLASH_ROW + SIZEOF_ECC_ROW);
 323   1      
 324   1          if (rowSize != SIZEOF_EEPROM_ROW)
 325   1          {
 326   2              /* Save the ECC area. */
 327   2              offset = CYDEV_ECC_BASE + ((uint32) rowAddress * SIZEOF_ECC_ROW);
 328   2              for (index = 0; index < SIZEOF_ECC_ROW; index++)
 329   2              {
 330   3                  rowBuffer[SIZEOF_FLASH_ROW + index] = CY_GET_XTND_REG8((void CYFAR *)(offset + index));
 331   3              }
 332   2          }
 333   1      
 334   1          /* Copy the rowdata to the temporary buffer. */
 335   1          cymemcpy(rowBuffer, rowData, SIZEOF_FLASH_ROW);
 336   1      
 337   1          status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, rowSize);
 338   1          return status;
 339   1      }
 340          
 341          #endif /* CYDEV_ECC_ENABLE == 0 */
 342          
 343          #if (CYDEV_ECC_ENABLE == 0 && CYDEV_CONFIGURATION_ECC == 0)
              
              /*******************************************************************************
              * Function Name: CyWriteRowConfig
              ********************************************************************************
              *
              * Summary:
              *  Sends a command to the SPC to load and program a row of config data in flash.
              *  This function is only valid for Flash array IDs (not for EEPROM).
              *
              *
              * Parameters:
              *  arrayId:
              *   ID of the array to write
              *  rowAddress:
              *   Address of the sector to erase.
              *  rowData:  
              *   Array of bytes to write.
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 7   

              *   
              * Return:
              *  status:
              *   CYRET_SUCCESS if successful.
              *   CYRET_LOCKED if the SPC is already in use.
              *   CYRET_CANCELED if command not accepted
              *   CYRET_UNKNOWN if there was an SPC error.
              *
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, uint8 * rowData) 
              {
                  uint32 offset;
                  uint16 index;
                  cystatus status;
              
                  /* Read the existing flash data. */
                  offset = CYDEV_FLS_BASE + ((uint32) rowAddress * SIZEOF_FLASH_ROW);
                  for (index = 0; index < SIZEOF_FLASH_ROW; index++)
                  {
                      rowBuffer[index] = CY_GET_XTND_REG8((void CYFAR *)(offset + index));
                  }
              
                  /* Copy the rowData to the temporary buffer. */
                  cymemcpy(&rowBuffer[SIZEOF_FLASH_ROW], rowData, SIZEOF_ECC_ROW);
              
                  status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, SIZEOF_FLASH_ROW + SIZEOF_ECC_ROW);
                  return status;
              }
              
              #endif  /* (CYDEV_ECC_ENABLE == 1 && CYDEV_CONFIGURATION_ECC == 0) */
 394          
 395          
 396          /*******************************************************************************
 397          * Function Name: CyWriteRowFull
 398          ********************************************************************************
 399          * Summary:
 400          *   Sends a command to the SPC to load and program a row of data in flash. 
 401          *   rowData array is expected to contain Flash and ECC data if needed.
 402          *
 403          *
 404          * Parameters:
 405          *
 406          *       arrayId: FLASH or EEPROM array id.
 407          *       rowData: pointer to a row of data to write.
 408          *       rowNumber: Zero based number of the row.
 409          *       rowSize: Size of the row.
 410          *   
 411          * Return:
 412          *   CYRET_SUCCESS if successful.
 413          *   CYRET_LOCKED if the SPC is already in use.
 414          *   CYRET_CANCELED if command not accepted
 415          *   CYRET_UNKNOWN if there was an SPC error.
 416          *
 417          *
 418          *******************************************************************************/
 419          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, uint8* rowData, uint16 rowSize) 
 420          {
 421   1          cystatus status;
 422   1      
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 8   

 423   1          /* See if we can get the SPC. */
 424   1          if (CySpcLock() == CYRET_SUCCESS)
 425   1          {
 426   2              /* Create the command. */
 427   2              status = CySpcCreateCmdLoadRow(arrayId);
 428   2              if (status == CYRET_SUCCESS)
 429   2              {
 430   3                  /* Write the command. */
 431   3                  status = CySpcWriteCommand(rowData, rowSize);
 432   3                  if (status == CYRET_STARTED)
 433   3                  {
 434   4                      /* Spin until completion. */
 435   4                      while(!(*SPC_STATUS & SPC_SPC_IDLE));
 436   4      
 437   4                      status = CySpcReadStatus;
 438   4                      /* See if we were successful. */
 439   4                      if(status != SPC_SUCCESS)
 440   4                          status |= CYRET_SPC_ERROR_MASK;
 441   4                  }
 442   3              }
 443   2      
 444   2              /* Create the command. */
 445   2              if (status == SPC_SUCCESS)
 446   2              {
 447   3                  status = CySpcCreateCmdWriteRow(arrayId, rowNumber, dieTemperature[0], dieTemperature[1]);
 448   3                  if (status == CYRET_SUCCESS)
 449   3                  {
 450   4                      /* Write the command. */
 451   4                      status = CySpcWriteCommand(0, 0);
 452   4                      if (status == CYRET_STARTED)
 453   4                      {
 454   5                          /* Spin until completion. */
 455   5                          while(!(*SPC_STATUS & SPC_SPC_IDLE));
 456   5      
 457   5                          status = CySpcReadStatus;
 458   5                          /* See if we were successful. */
 459   5                          if(status != SPC_SUCCESS)
 460   5                              status |= CYRET_SPC_ERROR_MASK;
 461   5                      }
 462   4                  }
 463   3              }
 464   2      
 465   2              /* Unlock the SPC so someone else can use it. */
 466   2              CySpcUnlock();
 467   2          }
 468   1          else
 469   1          {
 470   2              status = CYRET_LOCKED;
 471   2          }
 472   1      
 473   1          return status;
 474   1      }
 475          
 476          
 477          /*******************************************************************************
 478          * Function Name: CyFlash_SetWaitCycles
 479          ********************************************************************************
 480          *
 481          * Summary:
 482          *  Sets the correct number of wait cycles for the flash based on the frequency 
 483          *  of operation of the devices. This function should be called before increasing 
 484          *  the clock frequency.  It can optionally be called after lowering the clock 
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 9   

 485          *  frequency in order to improve CPU performance.
 486          *   
 487          * Parameters:
 488          *  freq:
 489          *   Frequency of operation in Megahertz.
 490          * 
 491          * Return:
 492          *  void  
 493          * 
 494          * Reentrant
 495          *  Yes
 496          *
 497          *******************************************************************************/
 498          void CyFlash_SetWaitCycles(uint8 freq) 
 499          {
 500   1          /* Clear the Flash Cycles bit fields */
 501   1          *FLASH_CYCLES_PTR &= ~FLASH_CYCLES_MASK;
 502   1          
 503   1          /* Set Flash Cycles bit fields with frequency value*/
 504   1          #if (PSOC3_ES2)
                      if (freq <= 24u)            
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_24MHz << FLASH_CYCLES_MASK_SHIFT);
                      else if (freq <= 48u)
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_48MHz << FLASH_CYCLES_MASK_SHIFT);
                      else
                          *FLASH_CYCLES_PTR |= (GREATER_48MHz << FLASH_CYCLES_MASK_SHIFT);
                  #endif
 512   1          
 513   1          #if (PSOC3_ES3)
 514   1              if (freq <= 22u)            
 515   1                  *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_22MHz << FLASH_CYCLES_MASK_SHIFT);
 516   1              else if (freq <= 44u)
 517   1                  *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_44MHz << FLASH_CYCLES_MASK_SHIFT);
 518   1              else
 519   1                  *FLASH_CYCLES_PTR |= (GREATER_44MHz << FLASH_CYCLES_MASK_SHIFT);
 520   1          #endif
 521   1          
 522   1          #if (PSOC5_ES1)
                      if (freq <= 16u)            
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_16MHz << FLASH_CYCLES_MASK_SHIFT);
                      else if (freq <= 33u)
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_33MHz << FLASH_CYCLES_MASK_SHIFT);
                      else if (freq <= 50u)
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_50MHz << FLASH_CYCLES_MASK_SHIFT);
                      else
                          *FLASH_CYCLES_PTR |= (GREATER_51MHz << FLASH_CYCLES_MASK_SHIFT);
                  #endif
 532   1      }
 533          
 534          
 535          #if (PSOC3_ES3 || PSOC5_ES2)
 536          
 537          /*******************************************************************************
 538          * Function Name: CyEEPROM_Start
 539          ********************************************************************************
 540          *
 541          * Summary:
 542          *  Enable the EEPROM.
 543          *   
 544          * Parameters:
 545          *  void
 546          * 
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 10  

 547          * Return:
 548          *  void  
 549          * 
 550          * Reentrant
 551          *  Yes
 552          *
 553          *******************************************************************************/
 554          void CyEEPROM_Start(void) 
 555          {    
 556   1          /* Active Power Mode */
 557   1          *PM_ACT_EE_PTR |= PM_EE_MASK;
 558   1          /* Standby Power Mode */
 559   1          *PM_STBY_EE_PTR |= PM_EE_MASK;    
 560   1      }
 561          
 562          
 563          /*******************************************************************************
 564          * Function Name: CyEEPROM_Stop
 565          ********************************************************************************
 566          *
 567          * Summary:
 568          *  Disable the EEPROM.
 569          *   
 570          * Parameters:
 571          *  void
 572          * 
 573          * Return:
 574          *  void  
 575          * 
 576          * Reentrant
 577          *  Yes
 578          *
 579          *******************************************************************************/
 580          void CyEEPROM_Stop (void) 
 581          {
 582   1          /* Active Power Mode */
 583   1          *PM_ACT_EE_PTR &= ~PM_EE_MASK;
 584   1          /* Standby Power Mode */
 585   1          *PM_STBY_EE_PTR &= ~PM_EE_MASK;
 586   1      }
 587          
 588          #endif /* (PSOC3_ES3 || PSOC5_ES2) */
 589          
 590          
 591          /*******************************************************************************
 592          * Function Name: CyEEPROM_ReadReserve
 593          ********************************************************************************
 594          *
 595          * Summary:
 596          *  Request access to the EEPROM for reading and wait until access is available.
 597          *   
 598          * Parameters:
 599          *  void
 600          * 
 601          * Return:
 602          *  void  
 603          *   
 604          * Reentrant
 605          *  Yes
 606          *
 607          *******************************************************************************/
 608          void CyEEPROM_ReadReserve(void) 
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 11  

 609          {
 610   1          /* Make a request for PHUB to have access */
 611   1          *AHUB_EE_REQ_ACK_PTR |= 0x01u;    
 612   1          /* Wait for acknowledgement from PHUB */
 613   1          while (!(*AHUB_EE_REQ_ACK_PTR & 0x02u));    
 614   1      }
 615          
 616          
 617          /*******************************************************************************
 618          * Function Name: CyEEPROM_ReadRelease
 619          ********************************************************************************
 620          *
 621          * Summary:
 622          *  Release the read reservation of the EEPROM.
 623          *   
 624          * Parameters:
 625          *  void
 626          * 
 627          * Return:
 628          *  void  
 629          * 
 630          * Reentrant
 631          *  Yes
 632          *
 633          *******************************************************************************/
 634          void CyEEPROM_ReadRelease(void) 
 635          {
 636   1          *AHUB_EE_REQ_ACK_PTR |= 0x00u;   
 637   1      }
 638          
 639          
 640          /* End of File */
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyFlash_Start (BEGIN)
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 61
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
0016 22                RET     
             ; FUNCTION CyFlash_Start (END)

             ; FUNCTION CyFlash_Stop (BEGIN)
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 101
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0016 22                RET     
             ; FUNCTION CyFlash_Stop (END)

             ; FUNCTION CySetTempInt (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 142
0000 7F01              MOV     R7,#01H
0002 120000      E     LCALL   _CySpcActivePower
                                           ; SOURCE LINE # 145
0005 900000      R     MOV     DPTR,#status
0008 74FF              MOV     A,#0FFH
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 13  

000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
000B 120000      E     LCALL   CySpcLock
000E EF                MOV     A,R7
000F 7063              JNZ     ?C0003
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 151
0011 7B04              MOV     R3,#04H
0013 7DFF              MOV     R5,#0FFH
0015 7C0F              MOV     R4,#0FH
0017 7F01              MOV     R7,#01H
0019 120000      E     LCALL   _CySpcCreateCmdGetTemp
001C EF                MOV     A,R7
001D 7050              JNZ     ?C0004
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 154
001F 7B00              MOV     R3,#00H
0021 7A00              MOV     R2,#00H
0023 7900              MOV     R1,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 120000      E     LCALL   _CySpcWriteCommand
002C EF                MOV     A,R7
002D 6407              XRL     A,#07H
002F 703E              JNZ     ?C0004
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0031 900000      R     MOV     DPTR,#ticks
0034 743E              MOV     A,#03EH
0036 F0                MOVX    @DPTR,A
0037         ?C0008:
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
0037 7B01              MOV     R3,#01H
0039 7A00        R     MOV     R2,#HIGH dieTemperature
003B 7900        R     MOV     R1,#LOW dieTemperature
003D 7D02              MOV     R5,#02H
003F 120000      E     LCALL   _CySpcReadData
0042 EF                MOV     A,R7
0043 B40207            CJNE    A,#02H,?C0009
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0046 900000      R     MOV     DPTR,#status
0049 E4                CLR     A
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
004B 8022              SJMP    ?C0004
                                           ; SOURCE LINE # 164
004D         ?C0009:
                                           ; SOURCE LINE # 167
004D 7F01              MOV     R7,#01H
004F 7E00              MOV     R6,#00H
0051 7D00              MOV     R5,#00H
0053 7C00              MOV     R4,#00H
0055 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 168
0058 900000      R     MOV     DPTR,#ticks
005B E0                MOVX    A,@DPTR
005C 14                DEC     A
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
005E 900000      R     MOV     DPTR,#ticks
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 14  

0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 6009              JZ      ?C0004
0066 904722            MOV     DPTR,#04722H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 30E1C8            JNB     ACC.1,?C0008
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
006F         ?C0004:
                                           ; SOURCE LINE # 175
006F 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 176
0072 8006              SJMP    ?C0011
0074         ?C0003:
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0074 900000      R     MOV     DPTR,#status
0077 7404              MOV     A,#04H
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
007A         ?C0011:
                                           ; SOURCE LINE # 182
007A 900000      R     MOV     DPTR,#status
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
                                           ; SOURCE LINE # 183
007F         ?C0012:
007F 22                RET     
             ; FUNCTION CySetTempInt (END)

             ; FUNCTION CySetTemp (BEGIN)
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0000 120000      R     LCALL   CySetTempInt
                                           ; SOURCE LINE # 188
0003 120000      R     LCALL   CySetTempInt
                                           ; SOURCE LINE # 189
0006         ?C0013:
0006 22                RET     
             ; FUNCTION CySetTemp (END)

             ; FUNCTION _CySetFlashEEBuffer (BEGIN)
                                           ; SOURCE LINE # 215
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 220
0006 7F01              MOV     R7,#01H
0008 120000      E     LCALL   _CySpcActivePower
                                           ; SOURCE LINE # 222
000B 900000      R     MOV     DPTR,#buffer
000E 120000      E     LCALL   ?C?PLDXDATA
0011 EA                MOV     A,R2
0012 49                ORL     A,R1
0013 4B                ORL     A,R3
0014 7008              JNZ     ?C0014
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 15  

0016 900000      R     MOV     DPTR,#status
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
001C 8022              SJMP    ?C0015
001E         ?C0014:
                                           ; SOURCE LINE # 227
001E 120000      E     LCALL   CySpcLock
0021 EF                MOV     A,R7
0022 6008              JZ      ?C0016
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0024 900000      R     MOV     DPTR,#status
0027 7404              MOV     A,#04H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
002A 8014              SJMP    ?C0015
002C         ?C0016:
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 234
002C 900000      R     MOV     DPTR,#buffer
002F 120000      E     LCALL   ?C?PLDXDATA
0032 900000      R     MOV     DPTR,#rowBuffer
0035 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 236
0038 900000      R     MOV     DPTR,#status
003B E4                CLR     A
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
003D 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 240
0040         ?C0015:
                                           ; SOURCE LINE # 242
0040 900000      R     MOV     DPTR,#status
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
                                           ; SOURCE LINE # 243
0045         ?C0018:
0045 22                RET     
             ; FUNCTION _CySetFlashEEBuffer (END)

             ; FUNCTION _CyWriteRowData (BEGIN)
                                           ; SOURCE LINE # 315
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowAddress
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 322
0013 900000      R     MOV     DPTR,#arrayId
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 943F              SUBB    A,#03FH
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 16  

001C 4006              JC      ?C0019
001E 7E00              MOV     R6,#00H
0020 7F10              MOV     R7,#010H
0022 8004              SJMP    ?C0020
0024         ?C0019:
0024 7E01              MOV     R6,#01H
0026 7F20              MOV     R7,#020H
0028         ?C0020:
0028 900000      R     MOV     DPTR,#rowSize
002B EE                MOV     A,R6
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0030 900000      R     MOV     DPTR,#rowSize
0033 E0                MOVX    A,@DPTR
0034 FE                MOV     R6,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 6410              XRL     A,#010H
003B 4E                ORL     A,R6
003C 6079              JZ      ?C0021
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 327
003E 900000      R     MOV     DPTR,#rowAddress
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7C00              MOV     R4,#00H
0048 7D20              MOV     R5,#020H
004A 120000      E     LCALL   ?C?LIMUL
004D EF                MOV     A,R7
004E 2400              ADD     A,#00H
0050 FF                MOV     R7,A
0051 EE                MOV     A,R6
0052 3400              ADDC    A,#00H
0054 FE                MOV     R6,A
0055 ED                MOV     A,R5
0056 3408              ADDC    A,#08H
0058 FD                MOV     R5,A
0059 EC                MOV     A,R4
005A 3400              ADDC    A,#00H
005C FC                MOV     R4,A
005D 900000      R     MOV     DPTR,#offset
0060 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 328
0063 900000      R     MOV     DPTR,#index
0066 E4                CLR     A
0067 F0                MOVX    @DPTR,A
0068         ?C0022:
0068 900000      R     MOV     DPTR,#index
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E C3                CLR     C
006F 9420              SUBB    A,#020H
0071 5044              JNC     ?C0021
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 17  

                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0073 900000      R     MOV     DPTR,#index
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 E4                CLR     A
0079 FC                MOV     R4,A
007A FD                MOV     R5,A
007B FE                MOV     R6,A
007C 900000      R     MOV     DPTR,#offset
007F 120000      E     LCALL   ?C?LLDXDATA0
0082 120000      E     LCALL   ?C?LADD
0085 A907              MOV     R1,AR7
0087 AA06              MOV     R2,AR6
0089 AB05              MOV     R3,AR5
008B 120000      E     LCALL   _cyread8
008E 900000      R     MOV     DPTR,#index
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 EE                MOV     A,R6
0094 FD                MOV     R5,A
0095 7C00              MOV     R4,#00H
0097 ED                MOV     A,R5
0098 2400              ADD     A,#00H
009A FD                MOV     R5,A
009B EC                MOV     A,R4
009C 3401              ADDC    A,#01H
009E FC                MOV     R4,A
009F 900000      R     MOV     DPTR,#rowBuffer
00A2 120000      E     LCALL   ?C?PLDXDATA
00A5 E9                MOV     A,R1
00A6 2D                ADD     A,R5
00A7 F9                MOV     R1,A
00A8 EA                MOV     A,R2
00A9 3C                ADDC    A,R4
00AA FA                MOV     R2,A
00AB EF                MOV     A,R7
00AC 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 331
00AF 900000      R     MOV     DPTR,#index
00B2 E0                MOVX    A,@DPTR
00B3 04                INC     A
00B4 F0                MOVX    @DPTR,A
00B5 80B1              SJMP    ?C0022
                                           ; SOURCE LINE # 332
00B7         ?C0021:
                                           ; SOURCE LINE # 335
00B7 900000      R     MOV     DPTR,#rowData
00BA 120000      E     LCALL   ?C?PLDXDATA
00BD C003              PUSH    AR3
00BF C002              PUSH    AR2
00C1 C001              PUSH    AR1
00C3 900000      R     MOV     DPTR,#rowBuffer
00C6 120000      E     LCALL   ?C?PLDXDATA
00C9 A801              MOV     R0,AR1
00CB AC02              MOV     R4,AR2
00CD AD03              MOV     R5,AR3
00CF D001              POP     AR1
00D1 D002              POP     AR2
00D3 D003              POP     AR3
00D5 7E01              MOV     R6,#01H
00D7 7F00              MOV     R7,#00H
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 18  

00D9 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 337
00DC 900000      R     MOV     DPTR,#arrayId
00DF E0                MOVX    A,@DPTR
00E0 FF                MOV     R7,A
00E1 C007              PUSH    AR7
00E3 900000      R     MOV     DPTR,#rowAddress
00E6 E0                MOVX    A,@DPTR
00E7 FC                MOV     R4,A
00E8 A3                INC     DPTR
00E9 E0                MOVX    A,@DPTR
00EA FD                MOV     R5,A
00EB 900000      R     MOV     DPTR,#rowBuffer
00EE 120000      E     LCALL   ?C?PLDXDATA
00F1 900000      R     MOV     DPTR,#rowSize
00F4 E0                MOVX    A,@DPTR
00F5 FE                MOV     R6,A
00F6 A3                INC     DPTR
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 900000      R     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
00FC EE                MOV     A,R6
00FD F0                MOVX    @DPTR,A
00FE A3                INC     DPTR
00FF EF                MOV     A,R7
0100 F0                MOVX    @DPTR,A
0101 D007              POP     AR7
0103 120000      R     LCALL   _CyWriteRowFull
0106 900000      R     MOV     DPTR,#status
0109 EF                MOV     A,R7
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
010B 900000      R     MOV     DPTR,#status
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
                                           ; SOURCE LINE # 339
0110         ?C0025:
0110 22                RET     
             ; FUNCTION _CyWriteRowData (END)

             ; FUNCTION _CyWriteRowFull (BEGIN)
                                           ; SOURCE LINE # 419
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowNumber
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 424
0013 120000      E     LCALL   CySpcLock
0016 EF                MOV     A,R7
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 427
001C 900000      R     MOV     DPTR,#arrayId
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 19  

001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 120000      E     LCALL   _CySpcCreateCmdLoadRow
0024 900000      R     MOV     DPTR,#status
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 704F              JNZ     ?C0027
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 431
0031 900000      R     MOV     DPTR,#rowData
0034 120000      E     LCALL   ?C?PLDXDATA
0037 900000      R     MOV     DPTR,#rowSize
003A E0                MOVX    A,@DPTR
003B FC                MOV     R4,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F 120000      E     LCALL   _CySpcWriteCommand
0042 900000      R     MOV     DPTR,#status
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
0047 900000      R     MOV     DPTR,#status
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 6407              XRL     A,#07H
004F 702F              JNZ     ?C0027
                                           ; SOURCE LINE # 433
0051         ?C0029:
                                           ; SOURCE LINE # 435
0051 904722            MOV     DPTR,#04722H
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 30E1F7            JNB     ACC.1,?C0029
005A         ?C0030:
                                           ; SOURCE LINE # 437
005A 904722            MOV     DPTR,#04722H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 13                RRC     A
0061 13                RRC     A
0062 543F              ANL     A,#03FH
0064 FF                MOV     R7,A
0065 900000      R     MOV     DPTR,#status
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
006A 900000      R     MOV     DPTR,#status
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 600E              JZ      ?C0027
                                           ; SOURCE LINE # 440
0072 900000      R     MOV     DPTR,#status
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 20  

0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 4480              ORL     A,#080H
007A FF                MOV     R7,A
007B 900000      R     MOV     DPTR,#status
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0080         ?C0027:
                                           ; SOURCE LINE # 445
0080 900000      R     MOV     DPTR,#status
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 7077              JNZ     ?C0032
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
0088 900000      R     MOV     DPTR,#arrayId
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D 900000      R     MOV     DPTR,#rowNumber
0090 E0                MOVX    A,@DPTR
0091 FC                MOV     R4,A
0092 A3                INC     DPTR
0093 E0                MOVX    A,@DPTR
0094 FD                MOV     R5,A
0095 900000      R     MOV     DPTR,#dieTemperature
0098 E0                MOVX    A,@DPTR
0099 FB                MOV     R3,A
009A 900000      R     MOV     DPTR,#dieTemperature+01H
009D E0                MOVX    A,@DPTR
009E FE                MOV     R6,A
009F 900000      E     MOV     DPTR,#?_CySpcCreateCmdWriteRow?BYTE+04H
00A2 EE                MOV     A,R6
00A3 F0                MOVX    @DPTR,A
00A4 120000      E     LCALL   _CySpcCreateCmdWriteRow
00A7 900000      R     MOV     DPTR,#status
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
00AC 900000      R     MOV     DPTR,#status
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 704B              JNZ     ?C0032
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 451
00B4 7B00              MOV     R3,#00H
00B6 7A00              MOV     R2,#00H
00B8 7900              MOV     R1,#00H
00BA 7D00              MOV     R5,#00H
00BC 7C00              MOV     R4,#00H
00BE 120000      E     LCALL   _CySpcWriteCommand
00C1 900000      R     MOV     DPTR,#status
00C4 EF                MOV     A,R7
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
00C6 900000      R     MOV     DPTR,#status
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 21  

00CB EF                MOV     A,R7
00CC 6407              XRL     A,#07H
00CE 702F              JNZ     ?C0032
                                           ; SOURCE LINE # 453
00D0         ?C0035:
                                           ; SOURCE LINE # 455
00D0 904722            MOV     DPTR,#04722H
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 EF                MOV     A,R7
00D6 30E1F7            JNB     ACC.1,?C0035
00D9         ?C0036:
                                           ; SOURCE LINE # 457
00D9 904722            MOV     DPTR,#04722H
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE EF                MOV     A,R7
00DF 13                RRC     A
00E0 13                RRC     A
00E1 543F              ANL     A,#03FH
00E3 FF                MOV     R7,A
00E4 900000      R     MOV     DPTR,#status
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
00E9 900000      R     MOV     DPTR,#status
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE EF                MOV     A,R7
00EF 600E              JZ      ?C0032
                                           ; SOURCE LINE # 460
00F1 900000      R     MOV     DPTR,#status
00F4 E0                MOVX    A,@DPTR
00F5 FF                MOV     R7,A
00F6 EF                MOV     A,R7
00F7 4480              ORL     A,#080H
00F9 FF                MOV     R7,A
00FA 900000      R     MOV     DPTR,#status
00FD EF                MOV     A,R7
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
00FF         ?C0032:
                                           ; SOURCE LINE # 466
00FF 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 467
0102 8006              SJMP    ?C0038
0104         ?C0026:
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
0104 900000      R     MOV     DPTR,#status
0107 7404              MOV     A,#04H
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
010A         ?C0038:
                                           ; SOURCE LINE # 473
010A 900000      R     MOV     DPTR,#status
010D E0                MOVX    A,@DPTR
010E FF                MOV     R7,A
                                           ; SOURCE LINE # 474
010F         ?C0039:
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 22  

010F 22                RET     
             ; FUNCTION _CyWriteRowFull (END)

             ; FUNCTION _CyFlash_SetWaitCycles (BEGIN)
                                           ; SOURCE LINE # 498
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 501
0005 904800            MOV     DPTR,#04800H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 543F              ANL     A,#03FH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
0010 900000      R     MOV     DPTR,#freq
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 D3                SETB    C
0017 9416              SUBB    A,#016H
0019 500C              JNC     ?C0040
                                           ; SOURCE LINE # 515
001B 904800            MOV     DPTR,#04800H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 4440              ORL     A,#040H
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
0026 22                RET     
0027         ?C0040:
                                           ; SOURCE LINE # 516
0027 900000      R     MOV     DPTR,#freq
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D D3                SETB    C
002E 942C              SUBB    A,#02CH
0030 500C              JNC     ?C0042
                                           ; SOURCE LINE # 517
0032 904800            MOV     DPTR,#04800H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4480              ORL     A,#080H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
003D 22                RET     
003E         ?C0042:
                                           ; SOURCE LINE # 519
003E 904800            MOV     DPTR,#04800H
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 44C0              ORL     A,#0C0H
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 23  

0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
0049         ?C0044:
0049 22                RET     
             ; FUNCTION _CyFlash_SetWaitCycles (END)

             ; FUNCTION CyEEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 557
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4410              ORL     A,#010H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0016 22                RET     
             ; FUNCTION CyEEPROM_Start (END)

             ; FUNCTION CyEEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 583
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54EF              ANL     A,#0EFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
0016 22                RET     
             ; FUNCTION CyEEPROM_Stop (END)

             ; FUNCTION CyEEPROM_ReadReserve (BEGIN)
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 611
C51 COMPILER V8.16   CYFLASH                                                               07/15/2011 13:52:49 PAGE 24  

0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
000B         ?C0047:
                                           ; SOURCE LINE # 613
000B 904702            MOV     DPTR,#04702H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 5402              ANL     A,#02H
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 4E                ORL     A,R6
0018 60F1              JZ      ?C0047
                                           ; SOURCE LINE # 614
001A         ?C0049:
001A 22                RET     
             ; FUNCTION CyEEPROM_ReadReserve (END)

             ; FUNCTION CyEEPROM_ReadRelease (BEGIN)
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 636
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4400              ORL     A,#00H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
000B 22                RET     
             ; FUNCTION CyEEPROM_ReadRelease (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    955    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
