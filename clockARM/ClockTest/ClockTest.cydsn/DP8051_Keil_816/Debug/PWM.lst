C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/PWM.OBJ
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\1.0\PSoC Creator\import\keil\pk51\8.16\C51\BIN\c51.exe C:\Use
                    -rs\Jon Moeller\Documents\PSoC Creator\clockARM\ClockTest\ClockTest.cydsn\Generated_Source\PSoC3\PWM.c NOIV LARGE MODDP2 
                    -OMF2 VB(1) PR(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/PWM.l
                    -st) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source/PSoC3) OJ(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTe
                    -st/ClockTest.cydsn/DP8051_Keil_816/Debug/PWM.OBJ)

line level    source

   1          /*******************************************************************************
   2          * File Name: PWM.c  
   3          * Version 2.0
   4          *
   5          * Description:
   6          *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7          *  comparitors. Each instance of this user module is capable of generating
   8          *  two PWM outputs with the same period. The pulse width is selectable between
   9          *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks. 
  10          *  The compare value output may be configured to be active when the present 
  11          *  counter is less than or less than/equal to the compare value.
  12          *  A terminal count output is also provided. It generates a pulse one clock
  13          *  width wide when the counter is equal to zero.
  14          *
  15          * Note:
  16          *
  17          *******************************************************************************
  18          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions, 
  20          * disclaimers, and limitations in the end user license agreement accompanying 
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "cytypes.h"
  25          #include "PWM.h"
  26          
  27          uint8 PWM_initVar = 0u;
  28          
  29          /*******************************************************************************
  30          * Function Name: PWM_Start
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  The start function initializes the pwm with the default values, the 
  35          *  enables the counter to begin counting.  It does not enable interrupts,
  36          *  the EnableInt command should be called if interrupt generation is required.
  37          *
  38          * Parameters:  
  39          *  void  
  40          *
  41          * Return: 
  42          *  void
  43          *
  44          * Global variables:
  45          *  PWM_initVar: Is modified when this function is called for the first 
  46          *   time. Is used to ensure that initialization happens only once.
  47          *
  48          * Reentrant:
  49          *  Yes
  50          *
  51          *******************************************************************************/
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 2   

  52          void PWM_Start(void) 
  53          {
  54   1          /* If not Initialized then initialize all required hardware and software */
  55   1          if(PWM_initVar == 0u)
  56   1          {
  57   2              PWM_Init();
  58   2              PWM_initVar = 1u;
  59   2          }
  60   1          PWM_Enable();
  61   1      
  62   1      }
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: PWM_Init
  67          ********************************************************************************
  68          *
  69          * Summary:
  70          *  Initialize component's parameters to the parameters set by user in the 
  71          *  customizer of the component placed onto schematic. Usually called in 
  72          *  PWM_Start().
  73          *
  74          * Parameters:  
  75          *  void
  76          *
  77          * Return: 
  78          *  void
  79          *
  80          * Reentrant:
  81          *  Yes
  82          *
  83          *******************************************************************************/
  84          void PWM_Init(void) 
  85          {
  86   1          #if (PWM_UsingFixedFunction || PWM_UseControl)
  87   1              uint8 ctrl;
  88   1          #endif
  89   1          
  90   1          #if(!PWM_UsingFixedFunction) 
  91   1              #if(PWM_UseStatus)
  92   1                  /* Interrupt State Backup for Critical Region*/
  93   1                  uint8 PWM_interruptState;
  94   1              #endif
  95   1          #endif
  96   1          
  97   1         #if (PWM_UsingFixedFunction)
                      /* You are allowed to write the compare value (FF only) */
                      PWM_CONTROL |= PWM_CFG0_MODE;
                      #if (PWM_DeadBand2_4)
                          PWM_CONTROL |= PWM_CFG0_DB;
                      #endif
                              
                      /* Set the default Compare Mode */
                      #if(PWM_PSOC3_ES2 || PWM_PSOC5_ES1)
                              ctrl = PWM_CONTROL2 & ~PWM_CTRL_CMPMODE1_MASK;
                              PWM_CONTROL2 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
                      #endif
                      #if(PWM_PSOC3_ES3 || PWM_PSOC5_ES2)
                              ctrl = PWM_CONTROL3 & ~PWM_CTRL_CMPMODE1_MASK;
                              PWM_CONTROL3 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
                      #endif
                      
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 3   

                       /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                      PWM_RT1 &= ~PWM_RT1_MASK;
                      PWM_RT1 |= PWM_SYNC;     
                              
                      /*Enable DSI Sync all all inputs of the PWM*/
                      PWM_RT1 &= ~(PWM_SYNCDSI_MASK);
                      PWM_RT1 |= PWM_SYNCDSI_EN;
                     
                  #elif (PWM_UseControl)
 123   1              /* Set the default compare mode defined in the parameter */
 124   1              ctrl = PWM_CONTROL & ~PWM_CTRL_CMPMODE2_MASK & ~PWM_CTRL_CMPMODE1_MASK;
 125   1              PWM_CONTROL = ctrl | PWM_DEFAULT_COMPARE2_MODE | PWM_DEFAULT_COMPARE1_MODE;
 126   1          #endif 
 127   1              
 128   1          #if (!PWM_UsingFixedFunction)
 129   1              #if (PWM_Resolution == 8)
 130   1                  /* Set FIFO 0 to 1 byte register for period*/
 131   1                  PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 132   1              #else /* (PWM_Resolution == 16)*/
                          /* Set FIFO 0 to 1 byte register for period */
                          PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
                          PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
                      #endif
 137   1          #endif
 138   1              
 139   1          PWM_WritePeriod(PWM_INIT_PERIOD_VALUE);
 140   1          PWM_WriteCounter(PWM_INIT_PERIOD_VALUE);
 141   1              
 142   1              #if (PWM_UseOneCompareMode)
 143   1                  PWM_WriteCompare(PWM_INIT_COMPARE_VALUE1);
 144   1              #else
                          PWM_WriteCompare1(PWM_INIT_COMPARE_VALUE1);
                          PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
                      #endif
 148   1              
 149   1              #if (PWM_KillModeMinTime)
                          PWM_WriteKillTime(PWM_MinimumKillTime);
                      #endif
 152   1              
 153   1              #if (PWM_DeadBandUsed)
                          PWM_WriteDeadTime(PWM_INIT_DEAD_TIME);
                      #endif
 156   1      
 157   1          #if (PWM_UseStatus || PWM_UsingFixedFunction)
 158   1              PWM_SetInterruptMode(PWM_INIT_INTERRUPTS_MODE);
 159   1          #endif
 160   1              
 161   1          #if (PWM_UsingFixedFunction)
                      /* Globally Enable the Fixed Function Block chosen */
                      PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
                      /* Set the Interrupt source to come from the status register */
                      PWM_CONTROL2 |= PWM_CTRL2_IRQ_SEL;
                  #else
 167   1              #if(PWM_UseStatus)
 168   1                  
 169   1                  /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
 170   1                  /* Enter Critical Region*/
 171   1                  PWM_interruptState = CyEnterCriticalSection();
 172   1                  /* Use the interrupt output of the status register for IRQ output */
 173   1                  PWM_STATUS_AUX_CTRL |= PWM_STATUS_ACTL_INT_EN_MASK;
 174   1                  
 175   1                   /* Exit Critical Region*/
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 4   

 176   1                  CyExitCriticalSection(PWM_interruptState);
 177   1                  
 178   1                  /* Clear the FIFO to enable the PWM_STATUS_FIFOFULL
 179   1                         bit to be set on FIFO full. */
 180   1                  PWM_ClearFIFO();
 181   1              #endif
 182   1          #endif
 183   1      }
 184          
 185          
 186          /*******************************************************************************
 187          * Function Name: PWM_Enable
 188          ********************************************************************************
 189          *
 190          * Summary: 
 191          *  Enables the PWM block operation
 192          *
 193          * Parameters:  
 194          *  void
 195          *
 196          * Return: 
 197          *  void
 198          *
 199          * Side Effects: 
 200          *  This works only if software enable mode is chosen
 201          *
 202          * Reentrant:
 203          *  Yes
 204          *
 205          *******************************************************************************/
 206          void PWM_Enable(void) 
 207          {
 208   1          #if (PWM_UseControl || PWM_UsingFixedFunction)
 209   1              PWM_CONTROL |= PWM_CTRL_ENABLE;
 210   1          #endif
 211   1      }
 212          
 213          
 214          /*******************************************************************************
 215          * Function Name: PWM_Stop
 216          ********************************************************************************
 217          *
 218          * Summary:
 219          *  The stop function halts the PWM, but does not change any modes or disable
 220          *  interrupts.
 221          *
 222          * Parameters:  
 223          *  void  
 224          *
 225          * Return: 
 226          *  void
 227          *
 228          * Side Effects:
 229          *  If the Enable mode is set to Hardware only then this function
 230          *  has no effect on the operation of the PWM
 231          *
 232          * Reentrant:
 233          *  Yes
 234          *
 235          *******************************************************************************/
 236          void PWM_Stop(void) 
 237          {
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 5   

 238   1          #if (PWM_UseControl || PWM_UsingFixedFunction)
 239   1              PWM_CONTROL &= ~PWM_CTRL_ENABLE;
 240   1          #endif
 241   1      }
 242          
 243          
 244          #if (PWM_UseOneCompareMode)
 245          #if (PWM_CompareMode1SW)
              /*******************************************************************************
              * Function Name: PWM_SetCompareMode
              ********************************************************************************
              * 
              * Summary:
              *  This function writes the Compare Mode for the pwm output when in Dither mode,
              *  Center Align Mode or One Output Mode.
              *
              * Parameters:
              *  comparemode:  The new compare mode for the PWM output. Use the compare types
              *                defined in the H file as input arguments.
              *
              * Return:
              *  void
              *
              * Reentrant:
              *  Yes
              *
              *******************************************************************************/
              void PWM_SetCompareMode(uint8 comparemode) 
              {
                  #if(PWM_UsingFixedFunction)
                          #if(PWM_PSOC3_ES2 || PWM_PSOC5_ES1)
                                      uint8 comparemodemasked = (comparemode << PWM_CTRL_CMPMODE1_SHIFT);
                                      PWM_CONTROL2 &= ~PWM_CTRL_CMPMODE1_MASK; /*Clear Existing Data */
                                      PWM_CONTROL2 |= comparemodemasked;  
                              #endif
                              
                          #if(PWM_PSOC3_ES3 || PWM_PSOC5_ES2)
                                  uint8 comparemodemasked = (comparemode << PWM_CTRL_CMPMODE1_SHIFT);
                          PWM_CONTROL3 &= ~PWM_CTRL_CMPMODE1_MASK; /*Clear Existing Data */
                          PWM_CONTROL3 |= comparemodemasked;     
                              #endif
                              
                  #elif (PWM_UseControl)
                      uint8 comparemode1masked = (comparemode << PWM_CTRL_CMPMODE1_SHIFT) & PWM_CTRL_CMPMODE1_MASK;
                      uint8 comparemode2masked = (comparemode << PWM_CTRL_CMPMODE2_SHIFT) & PWM_CTRL_CMPMODE2_MASK;
                      PWM_CONTROL &= ~(PWM_CTRL_CMPMODE1_MASK | PWM_CTRL_CMPMODE2_MASK); /*Clear existing mode */
                      PWM_CONTROL |= (comparemode1masked | comparemode2masked);
                      
                  #else
                      uint8 temp = comparemode;
                  #endif
              }
              #endif /* PWM_CompareMode1SW */
 291          
 292          #else /* UseOneCompareMode */
              
              
              #if (PWM_CompareMode1SW)
              /*******************************************************************************
              * Function Name: PWM_SetCompareMode1
              ********************************************************************************
              * 
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 6   

              * Summary:
              *  This function writes the Compare Mode for the pwm or pwm1 output
              *
              * Parameters:  
              *  comparemode:  The new compare mode for the PWM output. Use the compare types
              *                defined in the H file as input arguments.
              *
              * Return: 
              *  void
              *
              * Reentrant:
              *  Yes
              *
              *******************************************************************************/
              void PWM_SetCompareMode1(uint8 comparemode) 
              {
                  uint8 comparemodemasked = (comparemode << PWM_CTRL_CMPMODE1_SHIFT) & PWM_CTRL_CMPMODE1_MASK;
                  #if(PWM_UsingFixedFunction)
                          #if(PWM_PSOC3_ES2 || PWM_PSOC5_ES1)
                                      PWM_CONTROL2 &= PWM_CTRL_CMPMODE1_MASK; /*Clear existing mode */
                                      PWM_CONTROL2 |= comparemodemasked; 
                          #endif
                              
                              #if(PWM_PSOC3_ES3 || PWM_PSOC5_ES2)
                                  PWM_CONTROL3 &= PWM_CTRL_CMPMODE1_MASK; /*Clear existing mode */
                                      PWM_CONTROL3 |= comparemodemasked; 
                          #endif
                              
                  #elif (PWM_UseControl)
                      PWM_CONTROL &= PWM_CTRL_CMPMODE1_MASK; /*Clear existing mode */
                      PWM_CONTROL |= comparemodemasked;
                  #endif    
              }
              #endif /* PWM_CompareMode1SW */
              
              
              #if (PWM_CompareMode2SW)
              /*******************************************************************************
              * Function Name: PWM_SetCompareMode2
              ********************************************************************************
              * 
              * Summary:
              *  This function writes the Compare Mode for the pwm or pwm2 output
              *
              * Parameters:  
              *  comparemode:  The new compare mode for the PWM output. Use the compare types
              *                defined in the H file as input arguments.
              *
              * Return: 
              *  void
              *
              * Reentrant:
              *  Yes
              *
              *******************************************************************************/
              void PWM_SetCompareMode2(uint8 comparemode) 
              {
                  #if(PWM_UsingFixedFunction)
                      /* Do Nothing because there is no second Compare Mode Register in FF block*/ 
                  #elif (PWM_UseControl)
                  uint8 comparemodemasked = (comparemode << PWM_CTRL_CMPMODE2_SHIFT) & PWM_CTRL_CMPMODE2_MASK;
                  PWM_CONTROL &= PWM_CTRL_CMPMODE2_MASK; /*Clear existing mode */
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 7   

                  PWM_CONTROL |= comparemodemasked;
                  #endif    
              }
              #endif /*PWM_CompareMode2SW */
              #endif /* UseOneCompareMode */
 367          
 368          
 369          /*******************************************************************************
 370          * Function Name: PWM_WriteCounter
 371          ********************************************************************************
 372          * 
 373          * Summary:
 374          *  This function is used to change the counter value.
 375          *
 376          * Parameters:  
 377          *  counter:  This value may be between 1 and (2^Resolution)-1.   
 378          *
 379          * Return: 
 380          *  void
 381          *
 382          * Reentrant:
 383          *  Yes
 384          *
 385          *******************************************************************************/
 386          void PWM_WriteCounter(uint8 counter) 
 387          {
 388   1          #if(PWM_UsingFixedFunction)
                      CY_SET_REG16(PWM_COUNTER_LSB_PTR, (uint16)counter);
                  #else
 391   1              CY_SET_REG8(PWM_COUNTER_LSB_PTR, counter);
 392   1          #endif
 393   1      }
 394          
 395          
 396          #if (!PWM_UsingFixedFunction)
 397          /*******************************************************************************
 398          * Function Name: PWM_ReadCounter
 399          ********************************************************************************
 400          * 
 401          * Summary:
 402          *  This function returns the current value of the counter.  It doesn't matter
 403          *  if the counter is enabled or running.
 404          *
 405          * Parameters:  
 406          *  void  
 407          *
 408          * Return: 
 409          *  The current value of the counter.
 410          *
 411          * Reentrant:
 412          *  Yes
 413          *
 414          *******************************************************************************/
 415          uint8 PWM_ReadCounter(void) 
 416          {
 417   1          /* Force capture by reading Accumulator */
 418   1          /* Must first do a software capture to be able to read the counter */
 419   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 420   1          CY_GET_REG8(PWM_COUNTERCAP_LSB_PTR);
 421   1          
 422   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 423   1          return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 8   

 424   1      }
 425          
 426          
 427          #if (PWM_UseStatus)
 428          /*******************************************************************************
 429          * Function Name: PWM_ClearFIFO
 430          ********************************************************************************
 431          * 
 432          * Summary:
 433          *  This function clears all capture data from the capture FIFO
 434          *
 435          * Parameters:  
 436          *  void
 437          *
 438          * Return: 
 439          *  void
 440          *
 441          * Reentrant:
 442          *  Yes
 443          *
 444          *******************************************************************************/
 445          void PWM_ClearFIFO(void) 
 446          {
 447   1          while(PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY)
 448   1              PWM_ReadCapture();
 449   1      }
 450          #endif /* PWM_UseStatus */
 451          #endif /* !PWM_UsingFixedFunction */
 452          
 453          
 454          /*******************************************************************************
 455          * Function Name: PWM_WritePeriod
 456          ********************************************************************************
 457          * 
 458          * Summary:
 459          *  This function is used to change the period of the counter.  The new period 
 460          *  will be loaded the next time terminal count is detected.
 461          *
 462          * Parameters:  
 463          *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0 
 464          *           will result in the counter remaining at zero.
 465          *
 466          * Return: 
 467          *  void
 468          *
 469          * Reentrant:
 470          *  Yes
 471          *
 472          *******************************************************************************/
 473          void PWM_WritePeriod(uint8 period) 
 474          {
 475   1          #if(PWM_UsingFixedFunction)
                      CY_SET_REG16(PWM_PERIOD_LSB_PTR, (uint16)period);
                  #else
 478   1              CY_SET_REG8(PWM_PERIOD_LSB_PTR, period);
 479   1          #endif
 480   1      }
 481          
 482          
 483          #if (PWM_UseOneCompareMode)
 484          /*******************************************************************************
 485          * Function Name: PWM_WriteCompare
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 9   

 486          ********************************************************************************
 487          * 
 488          * Summary:
 489          *  This funtion is used to change the compare1 value when the PWM is in Dither
 490          *  mode. The compare output will reflect the new value on the next UDB clock. 
 491          *  The compare output will be driven high when the present counter value is 
 492          *  compared to the compare value based on the compare mode defined in 
 493          *  Dither Mode.
 494          *
 495          * Parameters:  
 496          *  compare:  New compare value.  
 497          *
 498          * Return: 
 499          *  void
 500          *
 501          * Side Effects:
 502          *  This function is only available if the PWM mode parameter is set to
 503          *  Dither Mode, Center Aligned Mode or One Output Mode
 504          *
 505          * Reentrant:
 506          *  Yes
 507          *
 508          *******************************************************************************/
 509          void PWM_WriteCompare(uint8 compare) 
 510          {
 511   1         CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 512   1         #if (PWM_PWMMode == PWM__B_PWM__DITHER)
                      CY_SET_REG8(PWM_COMPARE2_LSB_PTR, compare+1);
                 #endif
 515   1      }
 516          
 517          
 518          #else
              
              
              /*******************************************************************************
              * Function Name: PWM_WriteCompare1
              ********************************************************************************
              * 
              * Summary:
              *  This funtion is used to change the compare1 value.  The compare output will 
              *  reflect the new value on the next UDB clock.  The compare output will be 
              *  driven high when the present counter value is less than or less than or 
              *  equal to the compare register, depending on the mode.
              *
              * Parameters:  
              *  compare:  New compare value.  
              *
              * Return: 
              *  void
              *
              * Reentrant:
              *  Yes
              *
              *******************************************************************************/
              void PWM_WriteCompare1(uint8 compare) 
              {
                  #if(PWM_UsingFixedFunction)
                      CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
                  #else
                      CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
                  #endif
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 10  

              }
              
              
              /*******************************************************************************
              * Function Name: PWM_WriteCompare2
              ********************************************************************************
              * 
              * Summary:
              *  This funtion is used to change the compare value, for compare1 output.  
              *  The compare output will reflect the new value on the next UDB clock.  
              *  The compare output will be driven high when the present counter value is 
              *  less than or less than or equal to the compare register, depending on the 
              *  mode.
              *
              * Parameters:  
              *  compare:  New compare value.  
              *
              * Return: 
              *  void
              *
              * Reentrant:
              *  Yes
              *
              *******************************************************************************/
              void PWM_WriteCompare2(uint8 compare) 
              {
                  #if(PWM_UsingFixedFunction)
                      CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
                  #else
                      CY_SET_REG8(PWM_COMPARE2_LSB_PTR, compare);
                  #endif
              }
              #endif /* UseOneCompareMode */
 581          
 582          
 583          #if (PWM_DeadBandUsed)
              /*******************************************************************************
              * Function Name: PWM_WriteDeadTime
              ********************************************************************************
              * 
              * Summary:
              *  This function writes the dead-band counts to the corresponding register
              *
              * Parameters:  
              *  deadtime:  Number of counts for dead time 
              *
              * Return: 
              *  void
              *
              * Reentrant:
              *  Yes
              *
              *******************************************************************************/
              void PWM_WriteDeadTime(uint8 deadtime) 
              {
                  /* If using the Dead Band 1-255 mode then just write the register */
                  #if(!PWM_DeadBand2_4)
                      CY_SET_REG8(PWM_DEADBAND_COUNT_PTR, deadtime);
                  #else
                      /* Otherwise the data has to be masked and offset */        
                      /* Clear existing data */
                      PWM_DEADBAND_COUNT &= ~PWM_DEADBAND_COUNT_MASK; 
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 11  

                          /* Set new dead time */
                      PWM_DEADBAND_COUNT |= (deadtime << PWM_DEADBAND_COUNT_SHIFT) & PWM_DEADBAND_COUNT_MASK; 
                  #endif
              }
              
              
              /*******************************************************************************
              * Function Name: PWM_ReadDeadTime
              ********************************************************************************
              * 
              * Summary:
              *  This function reads the dead-band counts from the corresponding register
              *
              * Parameters:  
              *  void
              *
              * Return: 
              *  Dead Band Counts
              *
              * Reentrant:
              *  Yes
              *
              *******************************************************************************/
              uint8 PWM_ReadDeadTime(void) 
              {
                  /* If using the Dead Band 1-255 mode then just read the register */
                  #if(!PWM_DeadBand2_4)
                      return (CY_GET_REG8(PWM_DEADBAND_COUNT_PTR));
                  #else
                      /* Otherwise the data has to be masked and offset */
                      return ((PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK) >> PWM_DEADBAND_COUNT_SHIFT);
                  #endif
              }
              #endif /* DeadBandUsed */
 644          
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION PWM_Start (BEGIN)
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 55
0000 900000      R     MOV     DPTR,#PWM_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
0008 120000      R     LCALL   PWM_Init
                                           ; SOURCE LINE # 58
000B 900000      R     MOV     DPTR,#PWM_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 59
0011         ?C0001:
                                           ; SOURCE LINE # 60
0011 120000      R     LCALL   PWM_Enable
                                           ; SOURCE LINE # 62
0014 22                RET     
             ; FUNCTION PWM_Start (END)

             ; FUNCTION PWM_Init (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 124
0000 90657B            MOV     DPTR,#0657BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54C0              ANL     A,#0C0H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#ctrl
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
000E 900000      R     MOV     DPTR,#ctrl
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 4409              ORL     A,#09H
0016 FF                MOV     R7,A
0017 90657B            MOV     DPTR,#0657BH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
001C 90659B            MOV     DPTR,#0659BH
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4401              ORL     A,#01H
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
0027 7FFF              MOV     R7,#0FFH
0029 120000      R     LCALL   _PWM_WritePeriod
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 13  

                                           ; SOURCE LINE # 140
002C 7FFF              MOV     R7,#0FFH
002E 120000      R     LCALL   _PWM_WriteCounter
                                           ; SOURCE LINE # 143
0031 7FFE              MOV     R7,#0FEH
0033 120000      R     LCALL   _PWM_WriteCompare
                                           ; SOURCE LINE # 158
0036 90658B            MOV     DPTR,#0658BH
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
003B 120000      E     LCALL   CyEnterCriticalSection
003E 900000      R     MOV     DPTR,#PWM_interruptState
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0043 90659B            MOV     DPTR,#0659BH
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 4410              ORL     A,#010H
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
004E 900000      R     MOV     DPTR,#PWM_interruptState
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 180
0056 120000      R     LCALL   PWM_ClearFIFO
                                           ; SOURCE LINE # 183
0059 22                RET     
             ; FUNCTION PWM_Init (END)

             ; FUNCTION PWM_Enable (BEGIN)
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 209
0000 90657B            MOV     DPTR,#0657BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
000B 22                RET     
             ; FUNCTION PWM_Enable (END)

             ; FUNCTION PWM_Stop (BEGIN)
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 239
0000 90657B            MOV     DPTR,#0657BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 14  

000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
000B 22                RET     
             ; FUNCTION PWM_Stop (END)

             ; FUNCTION _PWM_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 386
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 391
0005 900000      R     MOV     DPTR,#counter
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90650B            MOV     DPTR,#0650BH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
000F 22                RET     
             ; FUNCTION _PWM_WriteCounter (END)

             ; FUNCTION PWM_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 420
0000 90651B            MOV     DPTR,#0651BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 423
0005 90655B            MOV     DPTR,#0655BH
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 424
000A         ?C0007:
000A 22                RET     
             ; FUNCTION PWM_ReadCounter (END)

             ; FUNCTION PWM_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
0000         ?C0008:
                                           ; SOURCE LINE # 447
0000 90656B            MOV     DPTR,#0656BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E407            JNB     ACC.4,?C0010
                                           ; SOURCE LINE # 448
0009 90655B            MOV     DPTR,#0655BH
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 80F0              SJMP    ?C0008
                                           ; SOURCE LINE # 449
0010         ?C0010:
0010 22                RET     
             ; FUNCTION PWM_ClearFIFO (END)

             ; FUNCTION _PWM_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 473
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
C51 COMPILER V8.16   PWM                                                                   07/11/2011 13:22:49 PAGE 15  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 478
0005 900000      R     MOV     DPTR,#period
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90654B            MOV     DPTR,#0654BH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
000F 22                RET     
             ; FUNCTION _PWM_WritePeriod (END)

             ; FUNCTION _PWM_WriteCompare (BEGIN)
                                           ; SOURCE LINE # 509
0000 900000      R     MOV     DPTR,#compare
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0005 900000      R     MOV     DPTR,#compare
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90652B            MOV     DPTR,#0652BH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
000F 22                RET     
             ; FUNCTION _PWM_WriteCompare (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    211    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
