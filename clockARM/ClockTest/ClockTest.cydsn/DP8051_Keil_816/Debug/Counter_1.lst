C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE COUNTER_1
OBJECT MODULE PLACED IN C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/Counter_1.OBJ
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\1.0\PSoC Creator\import\keil\pk51\8.16\C51\BIN\c51.exe C:\Use
                    -rs\Jon Moeller\Documents\PSoC Creator\clockARM\ClockTest\ClockTest.cydsn\Generated_Source\PSoC3\Counter_1.c NOIV LARGE M
                    -ODDP2 OMF2 VB(1) PR(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug
                    -/Counter_1.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source/PSoC3) OJ(C:/Users/Jon Moeller/Documents/PSoC Creator/cloc
                    -kARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/Counter_1.OBJ)

line level    source

   1          /*******************************************************************************
   2          * File Name: Counter_1.c  
   3          * Version 2.0
   4          *
   5          *  Description:
   6          *     The Counter User Module consists of a 8, 16, 24 or 32-bit counter with
   7          *     a selectable period between 2 and 2^Width - 1.  
   8          *
   9          *   Note:
  10          *     None
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include "Counter_1.h"
  20          
  21          uint8 Counter_1_initVar = 0u;
  22          
  23          
  24          /*******************************************************************************
  25          * Function Name: Counter_1_Init
  26          ********************************************************************************
  27          * Summary:
  28          *     Initialize to the schematic state
  29          * 
  30          * Parameters:  
  31          *  void  
  32          *
  33          * Return: 
  34          *  void
  35          *
  36          * Reentrant
  37          *  Yes
  38          *
  39          *******************************************************************************/
  40          void Counter_1_Init(void) 
  41          {
  42   1              #if (!Counter_1_UsingFixedFunction && !Counter_1_ControlRegRemoved)
                          uint8 ctrl;
                      #endif
  45   1              
  46   1              #if(!Counter_1_UsingFixedFunction) 
                          /* Interrupt State Backup for Critical Region*/
                          uint8 Counter_1_interruptState;
                      #endif
  50   1              
  51   1              #if (Counter_1_UsingFixedFunction)
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 2   

  52   1                  /* Clear all bits but the enable bit (if it's already set for Timer operation */
  53   1                  Counter_1_CONTROL &= Counter_1_CTRL_ENABLE;
  54   1                  
  55   1                  /* Clear the mode bits for continuous run mode */
  56   1                  #if (Counter_1_PSOC3_ES2 || Counter_1_PSOC5_ES1)
                              Counter_1_CONTROL2 &= ~Counter_1_CTRL_MODE_MASK;
                          #endif
  59   1                  #if (Counter_1_PSOC3_ES3 || Counter_1_PSOC5_ES2)
  60   1                      Counter_1_CONTROL3 &= ~Counter_1_CTRL_MODE_MASK;                
  61   1                  #endif
  62   1                  /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  63   1                  #if (Counter_1_RunModeUsed != 0x0u)
                              /* Set 3rd bit of Control register to enable one shot mode */
                              Counter_1_CONTROL |= Counter_1_ONESHOT;
                          #endif
  67   1                  
  68   1                  /* Set the IRQ to use the status register interrupts */
  69   1                  Counter_1_CONTROL2 |= Counter_1_CTRL2_IRQ_SEL;
  70   1                  
  71   1                  /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
  72   1                  Counter_1_RT1 &= ~Counter_1_RT1_MASK;
  73   1                  Counter_1_RT1 |= Counter_1_SYNC;     
  74   1                          
  75   1                  /*Enable DSI Sync all all inputs of the Timer*/
  76   1                  Counter_1_RT1 &= ~(Counter_1_SYNCDSI_MASK);
  77   1                  Counter_1_RT1 |= Counter_1_SYNCDSI_EN;
  78   1      
  79   1              #else
                          #if(!Counter_1_ControlRegRemoved)
                          /* Set the default compare mode defined in the parameter */
                          ctrl = Counter_1_CONTROL & ~Counter_1_CTRL_CMPMODE_MASK;
                          Counter_1_CONTROL = ctrl | Counter_1_DEFAULT_COMPARE_MODE;
                          
                          /* Set the default capture mode defined in the parameter */
                          ctrl = Counter_1_CONTROL & ~Counter_1_CTRL_CAPMODE_MASK;
                          Counter_1_CONTROL = ctrl | Counter_1_DEFAULT_CAPTURE_MODE;
                          #endif
                      #endif 
  90   1              
  91   1              /* Clear all data in the FIFO's */
  92   1              #if (!Counter_1_UsingFixedFunction)
                          Counter_1_ClearFIFO();
                      #endif
  95   1              
  96   1              /* Set Initial values from Configuration */
  97   1              Counter_1_WritePeriod(Counter_1_INIT_PERIOD_VALUE);
  98   1              Counter_1_WriteCounter(Counter_1_INIT_COUNTER_VALUE);
  99   1              Counter_1_SetInterruptMode(Counter_1_INIT_INTERRUPTS_MASK);
 100   1              
 101   1              #if (!Counter_1_UsingFixedFunction)
                          /* Read the status register to clear the unwanted interrupts */
                          Counter_1_ReadStatusRegister();
                          /* Set the compare value (only available to non-fixed function implementation */
                          Counter_1_WriteCompare(Counter_1_INIT_COMPARE_VALUE);
                          /* Use the interrupt output of the status register for IRQ output */
                          
                          /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                          /* Enter Critical Region*/
                          Counter_1_interruptState = CyEnterCriticalSection();
                          
                          Counter_1_STATUS_AUX_CTRL |= Counter_1_STATUS_ACTL_INT_EN_MASK;
                          
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 3   

                          /* Exit Critical Region*/
                          CyExitCriticalSection(Counter_1_interruptState);
                          
                      #endif
 118   1      }
 119          
 120          
 121          /*******************************************************************************
 122          * Function Name: Counter_1_Enable
 123          ********************************************************************************
 124          * Summary:
 125          *     Enable the Counter
 126          * 
 127          * Parameters:  
 128          *  void  
 129          *
 130          * Return: 
 131          *  void
 132          *
 133          * Side Effects: 
 134          *   If the Enable mode is set to Hardware only then this function has no effect 
 135          *   on the operation of the counter.
 136          *
 137          * Reentrant
 138          *  Yes
 139          *
 140          *******************************************************************************/
 141          void Counter_1_Enable(void) 
 142          {
 143   1          /* Globally Enable the Fixed Function Block chosen */
 144   1          #if (Counter_1_UsingFixedFunction)
 145   1              Counter_1_GLOBAL_ENABLE |= Counter_1_BLOCK_EN_MASK;
 146   1              Counter_1_GLOBAL_STBY_ENABLE |= Counter_1_BLOCK_STBY_EN_MASK;
 147   1          #endif   
 148   1              
 149   1          /* Enable the counter from the control register  */
 150   1          /* If Fixed Function then make sure Mode is set correctly */
 151   1          /* else make sure reset is clear */
 152   1          #if(!Counter_1_ControlRegRemoved || Counter_1_UsingFixedFunction)
 153   1              Counter_1_CONTROL |= Counter_1_CTRL_ENABLE;                
 154   1          #endif
 155   1          
 156   1      }
 157          
 158          
 159          /*******************************************************************************
 160          * Function Name: Counter_1_Start
 161          ********************************************************************************
 162          * Summary:
 163          *  Enables the counter for operation 
 164          *
 165          * Parameters:  
 166          *  void  
 167          *
 168          * Return: 
 169          *  void
 170          *
 171          * Global variables:
 172          *  Counter_1_initVar: Is modified when this function is called for the first 
 173          *   time. Is used to ensure that initialization happens only once.
 174          *
 175          * Reentrant
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 4   

 176          *  No
 177          *
 178          *******************************************************************************/
 179          void Counter_1_Start(void) 
 180          {
 181   1          if(Counter_1_initVar == 0u)
 182   1          {
 183   2              Counter_1_Init();
 184   2              
 185   2              Counter_1_initVar = 1u; /* Clear this bit for Initialization */        
 186   2          }
 187   1          
 188   1          /* Enable the Counter */
 189   1          Counter_1_Enable();        
 190   1      }
 191          
 192          
 193          /*******************************************************************************
 194          * Function Name: Counter_1_Stop
 195          ********************************************************************************
 196          * Summary:
 197          * Halts the counter, but does not change any modes or disable interrupts.
 198          *
 199          * Parameters:  
 200          *  void  
 201          *
 202          * Return: 
 203          *  void
 204          *
 205          * Side Effects: If the Enable mode is set to Hardware only then this function
 206          *               has no effect on the operation of the counter.
 207          *
 208          * Reentrant
 209          *  Yes
 210          *
 211          *******************************************************************************/
 212          void Counter_1_Stop(void) 
 213          {
 214   1          /* Disable Counter */
 215   1          #if(!Counter_1_ControlRegRemoved || Counter_1_UsingFixedFunction)
 216   1              Counter_1_CONTROL &= ~Counter_1_CTRL_ENABLE;        
 217   1          #endif
 218   1          
 219   1          /* Globally disable the Fixed Function Block chosen */
 220   1          #if (Counter_1_UsingFixedFunction)
 221   1              Counter_1_GLOBAL_ENABLE &= ~Counter_1_BLOCK_EN_MASK;
 222   1              Counter_1_GLOBAL_STBY_ENABLE &= ~Counter_1_BLOCK_STBY_EN_MASK;
 223   1          #endif
 224   1      }
 225          
 226          
 227          /*******************************************************************************
 228          * Function Name: Counter_1_SetInterruptMode
 229          ********************************************************************************
 230          * Summary:
 231          * Configures which interrupt sources are enabled to generate the final interrupt
 232          *
 233          * Parameters:  
 234          *  InterruptsMask: This parameter is an or'd collection of the status bits
 235          *                   which will be allowed to generate the counters interrupt.   
 236          *
 237          * Return: 
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 5   

 238          *  void
 239          *
 240          * Reentrant
 241          *  Yes
 242          *
 243          *******************************************************************************/
 244          void Counter_1_SetInterruptMode(uint8 interruptsMask) 
 245          {
 246   1          Counter_1_STATUS_MASK = interruptsMask;
 247   1      }
 248          
 249          
 250          /*******************************************************************************
 251          * Function Name: Counter_1_ReadStatusRegister
 252          ********************************************************************************
 253          * Summary:
 254          *   Reads the status register and returns it's state. This function should use
 255          *       defined types for the bit-field information as the bits in this
 256          *       register may be permuteable.
 257          *
 258          * Parameters:  
 259          *  void
 260          *
 261          * Return: 
 262          *  (uint8) The contents of the status register
 263          *
 264          * Side Effects:
 265          *   Status register bits may be clear on read. 
 266          *
 267          * Reentrant
 268          *  Yes
 269          *
 270          *******************************************************************************/
 271          uint8   Counter_1_ReadStatusRegister(void) 
 272          {
 273   1          return Counter_1_STATUS;
 274   1      }
 275          
 276          
 277          #if(!Counter_1_ControlRegRemoved)
 278          /*******************************************************************************
 279          * Function Name: Counter_1_ReadControlRegister
 280          ********************************************************************************
 281          * Summary:
 282          *   Reads the control register and returns it's state. This function should use
 283          *       defined types for the bit-field information as the bits in this
 284          *       register may be permuteable.
 285          *
 286          * Parameters:  
 287          *  void
 288          *
 289          * Return: 
 290          *  (uint8) The contents of the control register
 291          *
 292          * Reentrant
 293          *  Yes
 294          *
 295          *******************************************************************************/
 296          uint8   Counter_1_ReadControlRegister(void) 
 297          {
 298   1          return Counter_1_CONTROL;
 299   1      }
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 6   

 300          
 301          
 302          /*******************************************************************************
 303          * Function Name: Counter_1_WriteControlRegister
 304          ********************************************************************************
 305          * Summary:
 306          *   Sets the bit-field of the control register.  This function should use
 307          *       defined types for the bit-field information as the bits in this
 308          *       register may be permuteable.
 309          *
 310          * Parameters:  
 311          *  void
 312          *
 313          * Return: 
 314          *  (uint8) The contents of the control register
 315          *   
 316          * Reentrant
 317          *  Yes
 318          *
 319          *******************************************************************************/
 320          void    Counter_1_WriteControlRegister(uint8 control) 
 321          {
 322   1          Counter_1_CONTROL = control;
 323   1      }
 324          
 325          #endif  /* (!Counter_1_ControlRegRemoved) */
 326          
 327          
 328          /*******************************************************************************
 329          * Function Name: Counter_1_WriteCounter
 330          ********************************************************************************
 331          * Summary:
 332          *   This funtion is used to set the counter to a specific value
 333          *
 334          * Parameters:  
 335          *  counter:  New counter value. 
 336          *
 337          * Return: 
 338          *  void 
 339          *
 340          * Reentrant
 341          *  Yes
 342          *
 343          *******************************************************************************/
 344          void Counter_1_WriteCounter(uint8 counter) 
 345          {
 346   1          #if(Counter_1_UsingFixedFunction)
 347   1              CY_SET_REG16(Counter_1_COUNTER_LSB_PTR, (uint16)counter);
 348   1          #else
                      CY_SET_REG8(Counter_1_COUNTER_LSB_PTR, counter);
                  #endif
 351   1      }
 352          
 353          
 354          /*******************************************************************************
 355          * Function Name: Counter_1_ReadCounter
 356          ********************************************************************************
 357          * Summary:
 358          * Returns the current value of the counter.  It doesn't matter
 359          * if the counter is enabled or running.
 360          *
 361          * Parameters:  
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 7   

 362          *  void:  
 363          *
 364          * Return: 
 365          *  (uint8) The present value of the counter.
 366          *
 367          * Reentrant
 368          *  Yes
 369          *
 370          *******************************************************************************/
 371          uint8 Counter_1_ReadCounter(void) 
 372          {
 373   1          /* Force capture by reading Accumulator */
 374   1          /* Must first do a software capture to be able to read the counter */
 375   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 376   1          CY_GET_REG8(Counter_1_COUNTER_LSB_PTR);
 377   1          
 378   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 379   1          return (CY_GET_REG8(Counter_1_STATICCOUNT_LSB_PTR));
 380   1      }
 381          
 382          
 383          /*******************************************************************************
 384          * Function Name: Counter_1_ReadCapture
 385          ********************************************************************************
 386          * Summary:
 387          *   This function returns the last value captured.
 388          *
 389          * Parameters:  
 390          *  void
 391          *
 392          * Return: 
 393          *  (uint8) Present Capture value.
 394          *
 395          * Reentrant
 396          *  Yes
 397          *
 398          *******************************************************************************/
 399          uint8 Counter_1_ReadCapture(void) 
 400          {
 401   1         return ( CY_GET_REG8(Counter_1_STATICCOUNT_LSB_PTR) );  
 402   1      }
 403          
 404          
 405          /*******************************************************************************
 406          * Function Name: Counter_1_WritePeriod
 407          ********************************************************************************
 408          * Summary:
 409          * Changes the period of the counter.  The new period 
 410          * will be loaded the next time terminal count is detected.
 411          *
 412          * Parameters:  
 413          *  period: (uint8) A value of 0 will result in
 414          *         the counter remaining at zero.  
 415          *
 416          * Return: 
 417          *  void
 418          *
 419          * Reentrant
 420          *  Yes
 421          *
 422          *******************************************************************************/
 423          void Counter_1_WritePeriod(uint8 period) 
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 8   

 424          {
 425   1          #if(Counter_1_UsingFixedFunction)
 426   1              CY_SET_REG16(Counter_1_PERIOD_LSB_PTR,(uint16)period);
 427   1          #else
                      CY_SET_REG8(Counter_1_PERIOD_LSB_PTR,period);
                  #endif
 430   1      }
 431          
 432          
 433          /*******************************************************************************
 434          * Function Name: Counter_1_ReadPeriod
 435          ********************************************************************************
 436          * Summary:
 437          * Reads the current period value without affecting counter operation.
 438          *
 439          * Parameters:  
 440          *  void:  
 441          *
 442          * Return: 
 443          *  (uint8) Present period value.
 444          *
 445          * Reentrant
 446          *  Yes
 447          *
 448          *******************************************************************************/
 449          uint8 Counter_1_ReadPeriod(void) 
 450          {
 451   1         return ( CY_GET_REG8(Counter_1_PERIOD_LSB_PTR));
 452   1      }
 453          
 454          
 455          #if (!Counter_1_UsingFixedFunction)
              /*******************************************************************************
              * Function Name: Counter_1_WriteCompare
              ********************************************************************************
              * Summary:
              * Changes the compare value.  The compare output will 
              * reflect the new value on the next UDB clock.  The compare output will be 
              * driven high when the present counter value compares true based on the 
              * configured compare mode setting. 
              *
              * Parameters:  
              *  Compare:  New compare value. 
              *
              * Return: 
              *  void
              *
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              void Counter_1_WriteCompare(uint8 compare) 
              {
                  #if(Counter_1_UsingFixedFunction)
                      CY_SET_REG16(Counter_1_COMPARE_LSB_PTR,(uint16)compare);
                  #else
                      CY_SET_REG8(Counter_1_COMPARE_LSB_PTR,compare);
                  #endif
              }
              
              
              /*******************************************************************************
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 9   

              * Function Name: Counter_1_ReadCompare
              ********************************************************************************
              * Summary:
              * Returns the compare value.
              *
              * Parameters:  
              *  void:
              *
              * Return: 
              *  (uint8) Present compare value.
              *
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              uint8 Counter_1_ReadCompare(void) 
              {
                 return ( CY_GET_REG8(Counter_1_COMPARE_LSB_PTR));
              }
              
              
              #if (Counter_1_COMPARE_MODE_SOFTWARE)
              /*******************************************************************************
              * Function Name: Counter_1_SetCompareMode
              ********************************************************************************
              * Summary:
              *  Sets the software controlled Compare Mode.
              *
              * Parameters:
              *  compareMode:  Compare Mode Enumerated Type.
              *
              * Return:
              *  void
              *
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              void Counter_1_SetCompareMode(uint8 compareMode) 
              {
                  /* Clear the compare mode bits in the control register */
                  Counter_1_CONTROL &= ~Counter_1_CTRL_CMPMODE_MASK;
                  
                  /* Write the new setting */
                  Counter_1_CONTROL |= (compareMode << Counter_1_CTRL_CMPMODE0_SHIFT);
              }
              #endif  /* (Counter_1_COMPARE_MODE_SOFTWARE) */
              
              
              #if (Counter_1_CAPTURE_MODE_SOFTWARE)
              /*******************************************************************************
              * Function Name: Counter_1_SetCaptureMode
              ********************************************************************************
              * Summary:
              *  Sets the software controlled Capture Mode.
              *
              * Parameters:
              *  captureMode:  Capture Mode Enumerated Type.
              *
              * Return:
              *  void
              *
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 10  

              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              void Counter_1_SetCaptureMode(uint8 captureMode) 
              {
                  /* Clear the capture mode bits in the control register */
                  Counter_1_CONTROL &= ~Counter_1_CTRL_CAPMODE_MASK;
                  
                  /* Write the new setting */
                  Counter_1_CONTROL |= (captureMode << Counter_1_CTRL_CAPMODE0_SHIFT);
              }
              #endif  /* (Counter_1_CAPTURE_MODE_SOFTWARE) */
              
              
              /*******************************************************************************
              * Function Name: Counter_1_ClearFIFO
              ********************************************************************************
              * Summary:
              *   This function clears all capture data from the capture FIFO
              *
              * Parameters:  
              *  void:
              *
              * Return: 
              *  None
              *
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              void Counter_1_ClearFIFO(void) 
              {
              
                  while(Counter_1_ReadStatusRegister() & Counter_1_STATUS_FIFONEMP)
                  {
                      Counter_1_ReadCapture();
                  }
              
              }
              #endif  /* (!Counter_1_UsingFixedFunction) */
 589          
 590          
 591          /* [] END OF FILE */
 592          
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Counter_1_Init (BEGIN)
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 53
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
000B 904F02            MOV     DPTR,#04F02H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FC              ANL     A,#0FCH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0016 904F01            MOV     DPTR,#04F01H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0021 904F0B            MOV     DPTR,#04F0BH
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 54CF              ANL     A,#0CFH
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
002C 904F0B            MOV     DPTR,#04F0BH
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 4430              ORL     A,#030H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0037 904F0B            MOV     DPTR,#04F0BH
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 54F0              ANL     A,#0F0H
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0042 904F0B            MOV     DPTR,#04F0BH
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 12  

0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 440F              ORL     A,#0FH
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
004D 7FFF              MOV     R7,#0FFH
004F 120000      R     LCALL   _Counter_1_WritePeriod
                                           ; SOURCE LINE # 98
0052 7F00              MOV     R7,#00H
0054 120000      R     LCALL   _Counter_1_WriteCounter
                                           ; SOURCE LINE # 99
0057 7F00              MOV     R7,#00H
0059 120000      R     LCALL   _Counter_1_SetInterruptMode
                                           ; SOURCE LINE # 118
005C 22                RET     
             ; FUNCTION Counter_1_Init (END)

             ; FUNCTION Counter_1_Enable (BEGIN)
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 145
0000 9043A3            MOV     DPTR,#043A3H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
000B 9043B3            MOV     DPTR,#043B3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0016 904F00            MOV     DPTR,#04F00H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0021 22                RET     
             ; FUNCTION Counter_1_Enable (END)

             ; FUNCTION Counter_1_Start (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0000 900000      R     MOV     DPTR,#Counter_1_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 13  

0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0008 120000      R     LCALL   Counter_1_Init
                                           ; SOURCE LINE # 185
000B 900000      R     MOV     DPTR,#Counter_1_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0011         ?C0003:
                                           ; SOURCE LINE # 189
0011 120000      R     LCALL   Counter_1_Enable
                                           ; SOURCE LINE # 190
0014 22                RET     
             ; FUNCTION Counter_1_Start (END)

             ; FUNCTION Counter_1_Stop (BEGIN)
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 216
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
000B 9043A3            MOV     DPTR,#043A3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0016 9043B3            MOV     DPTR,#043B3H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FE              ANL     A,#0FEH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
0021 22                RET     
             ; FUNCTION Counter_1_Stop (END)

             ; FUNCTION _Counter_1_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 244
0000 900000      R     MOV     DPTR,#interruptsMask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
0005 900000      R     MOV     DPTR,#interruptsMask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F03            MOV     DPTR,#04F03H
000D EF                MOV     A,R7
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 14  

000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
000F 22                RET     
             ; FUNCTION _Counter_1_SetInterruptMode (END)

             ; FUNCTION Counter_1_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0000 904F03            MOV     DPTR,#04F03H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 274
0005         ?C0007:
0005 22                RET     
             ; FUNCTION Counter_1_ReadStatusRegister (END)

             ; FUNCTION Counter_1_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 299
0005         ?C0008:
0005 22                RET     
             ; FUNCTION Counter_1_ReadControlRegister (END)

             ; FUNCTION _Counter_1_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 320
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F00            MOV     DPTR,#04F00H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
000F 22                RET     
             ; FUNCTION _Counter_1_WriteControlRegister (END)

             ; FUNCTION _Counter_1_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 344
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 347
0005 7B02              MOV     R3,#02H
0007 7A4F              MOV     R2,#04FH
0009 7906              MOV     R1,#06H
000B 900000      R     MOV     DPTR,#counter
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 FD                MOV     R5,A
0012 7C00              MOV     R4,#00H
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 15  

0014 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 351
0017 22                RET     
             ; FUNCTION _Counter_1_WriteCounter (END)

             ; FUNCTION Counter_1_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 376
0000 904F06            MOV     DPTR,#04F06H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 379
0005 904F08            MOV     DPTR,#04F08H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 380
000A         ?C0011:
000A 22                RET     
             ; FUNCTION Counter_1_ReadCounter (END)

             ; FUNCTION Counter_1_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0000 904F08            MOV     DPTR,#04F08H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 402
0005         ?C0012:
0005 22                RET     
             ; FUNCTION Counter_1_ReadCapture (END)

             ; FUNCTION _Counter_1_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 423
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 426
0005 7B02              MOV     R3,#02H
0007 7A4F              MOV     R2,#04FH
0009 7904              MOV     R1,#04H
000B 900000      R     MOV     DPTR,#period
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 FD                MOV     R5,A
0012 7C00              MOV     R4,#00H
0014 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 430
0017 22                RET     
             ; FUNCTION _Counter_1_WritePeriod (END)

             ; FUNCTION Counter_1_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
0000 904F04            MOV     DPTR,#04F04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 452
C51 COMPILER V8.16   COUNTER_1                                                             07/15/2011 13:52:48 PAGE 16  

0005         ?C0014:
0005 22                RET     
             ; FUNCTION Counter_1_ReadPeriod (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    297    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
