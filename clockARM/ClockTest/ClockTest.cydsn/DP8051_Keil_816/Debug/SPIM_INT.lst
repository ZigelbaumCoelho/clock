C51 COMPILER V8.16   SPIM_INT                                                              07/14/2011 10:20:33 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE SPIM_INT
OBJECT MODULE PLACED IN C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/SPIM_INT.OBJ
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\1.0\PSoC Creator\import\keil\pk51\8.16\C51\BIN\c51.exe C:\Use
                    -rs\Jon Moeller\Documents\PSoC Creator\clockARM\ClockTest\ClockTest.cydsn\Generated_Source\PSoC3\SPIM_INT.c NOIV LARGE MO
                    -DDP2 OMF2 VB(1) PR(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/
                    -SPIM_INT.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source/PSoC3) OJ(C:/Users/Jon Moeller/Documents/PSoC Creator/clockA
                    -RM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/SPIM_INT.OBJ)

line level    source

   1          /*******************************************************************************
   2          * File Name: SPIM_INT.c
   3          * Version 2.10
   4          *
   5          * Description:
   6          *  This file provides all Interrupt Service Routine (ISR) for the SPI Master
   7          *  component.
   8          *
   9          * Note:
  10          *  None.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "SPIM.h"
  20          
  21          #if (SPIM_RXBUFFERSIZE > 4u)
              
                  extern volatile uint8 SPIM_RXBUFFER[];
                  extern volatile uint8 SPIM_rxBufferRead;
                  extern volatile uint8 SPIM_rxBufferWrite;
                  extern volatile uint8 SPIM_rxBufferFull;
                  
              #endif /* SPIM_RXBUFFERSIZE > 4u */
  29          
  30          #if (SPIM_TXBUFFERSIZE > 4u)
              
                  extern volatile uint8 SPIM_TXBUFFER[];
                  extern volatile uint8 SPIM_txBufferRead;
                  extern volatile uint8 SPIM_txBufferWrite;
                  extern volatile uint8 SPIM_txBufferFull;
              
              #endif /* SPIM_TXBUFFERSIZE > 4u */
  38          
  39          volatile uint8 SPIM_swStatusTx = 0u;
  40          volatile uint8 SPIM_swStatusRx = 0u;
  41          
  42          /* User code required at start of ISR */
  43          /* `#START SPIM_ISR_START_DEF` */
  44          
  45          /* `#END` */
  46          
  47          
  48          /*******************************************************************************
  49          * Function Name: SPIM_TX_ISR
  50          ********************************************************************************
  51          *
C51 COMPILER V8.16   SPIM_INT                                                              07/14/2011 10:20:33 PAGE 2   

  52          * Summary:
  53          *  Interrupt Service Routine for TX portion of the SPI Master.
  54          *
  55          * Parameters:
  56          *  None.
  57          *
  58          * Return:
  59          *  None.
  60          *
  61          * Global variables:
  62          *  SPIM_txBufferWrite - used for the account of the bytes which
  63          *  have been written down in the TX software buffer.
  64          *  SPIM_txBufferRead - used for the account of the bytes which
  65          *  have been read from the TX software buffer, modified when exist data to 
  66          *  sending and FIFO Not Full.
  67          *  SPIM_TXBUFFER[SPIM_TXBUFFERSIZE] - used to store
  68          *  data to sending.
  69          *  All described above Global variables are used when Software Buffer is used.
  70          *
  71          *******************************************************************************/
  72          CY_ISR(SPIM_TX_ISR)
  73          {     
  74   1          /* User code required at start of ISR */
  75   1          /* `#START SPIM_TX_ISR_START` */
  76   1      
  77   1          /* `#END` */
  78   1          
  79   1          #if((SPIM_InternalTxInterruptEnabled) && (SPIM_TXBUFFERSIZE > 4u))
                                       
                      /* See if TX data buffer is not empty and there is space in TX FIFO */
                      while(SPIM_txBufferRead != SPIM_txBufferWrite)
                      {
                          SPIM_swStatusTx = SPIM_GET_STATUS_TX(SPIM_swStatusTx);
                          
                          if ((SPIM_swStatusTx & SPIM_STS_TX_FIFO_NOT_FULL) != 0u)
                          {            
                              if(SPIM_txBufferFull == 0u)
                              {
                                 SPIM_txBufferRead++;
              
                                  if(SPIM_txBufferRead >= SPIM_TXBUFFERSIZE)
                                  {
                                      SPIM_txBufferRead = 0u;
                                  }
                              }
                              else
                              {
                                  SPIM_txBufferFull = 0u;
                              }
                          
                              /* Move data from the Buffer to the FIFO */
                              CY_SET_REG8(SPIM_TXDATA_PTR,
                                  SPIM_TXBUFFER[SPIM_txBufferRead]);
                          }
                          else
                          {
                              break;
                          }            
                      }
                          
                      /* Disable Interrupt on TX_fifo_not_empty if BUFFER is empty */
                      if(SPIM_txBufferRead == SPIM_txBufferWrite)
C51 COMPILER V8.16   SPIM_INT                                                              07/14/2011 10:20:33 PAGE 3   

                      {
                          SPIM_TX_STATUS_MASK_REG  &= ~SPIM_STS_TX_FIFO_NOT_FULL; 
                      }                       
                      
                      #endif /* SPIM_InternalTxInterruptEnabled && (SPIM_TXBUFFERSIZE > 4u) */
 119   1          
 120   1          /* User code required at end of ISR (Optional) */
 121   1          /* `#START SPIM_TX_ISR_END` */
 122   1      
 123   1          /* `#END` */
 124   1          
 125   1          #ifdef SPIM_TxInternalInterrupt__ES2_PATCH
                      #if(SPIM_PSOC3_ES2 && (SPIM_TxInternalInterrupt__ES2_PATCH))
                          SPIM_TX_ISR_PATCH();
                      #endif /* End PSOC3_ES2 */
                  #endif /* SPIM_TxInternalInterrupt__ES2_PATCH */    
 130   1      }
 131          
 132          
 133          /*******************************************************************************
 134          * Function Name: SPIM_RX_ISR
 135          ********************************************************************************
 136          *
 137          * Summary:
 138          *  Interrupt Service Routine for RX portion of the SPI Master.
 139          *
 140          * Parameters:
 141          *  None.
 142          *
 143          * Return:
 144          *  None.
 145          *
 146          * Global variables:
 147          *  SPIM_rxBufferWrite - used for the account of the bytes which
 148          *  have been written down in the RX software buffer modified when FIFO contains
 149          *  new data.
 150          *  SPIM_rxBufferRead - used for the account of the bytes which
 151          *  have been read from the RX software buffer, modified when overflow occurred.
 152          *  SPIM_RXBUFFER[SPIM_RXBUFFERSIZE] - used to store
 153          *  received data, modified when FIFO contains new data.
 154          *  All described above Global variables are used when Software Buffer is used.
 155          *
 156          *******************************************************************************/
 157          CY_ISR(SPIM_RX_ISR)
 158          {     
 159   1          #if((SPIM_InternalRxInterruptEnabled) && (SPIM_RXBUFFERSIZE > 4u))
                      uint8 rxData = 0u; 
                  #endif /* SPIM_InternalRxInterruptEnabled */  
 162   1          
 163   1          /* User code required at start of ISR */
 164   1          /* `#START SPIM_RX_ISR_START` */
 165   1      
 166   1          /* `#END` */
 167   1          
 168   1          #if((SPIM_InternalRxInterruptEnabled) && (SPIM_RXBUFFERSIZE > 4u))
                       
                      SPIM_swStatusRx = SPIM_GET_STATUS_RX(SPIM_swStatusRx);          
                      
                      /* See if RX data FIFO has some data and if it can be moved to the RX Buffer */
                      while((SPIM_swStatusRx & SPIM_STS_RX_FIFO_NOT_EMPTY) == 
                                                                                              SPIM_STS_RX_FIFO_NOT_EMPTY
             -)
C51 COMPILER V8.16   SPIM_INT                                                              07/14/2011 10:20:33 PAGE 4   

                      {
                          rxData = CY_GET_REG8(SPIM_RXDATA_PTR);
                          
                          /* Set next pointer. */
                          SPIM_rxBufferWrite++;
                          if(SPIM_rxBufferWrite >= SPIM_RXBUFFERSIZE)
                          {
                              SPIM_rxBufferWrite = 0u;
                          }
                          
                          if(SPIM_rxBufferWrite == SPIM_rxBufferRead)
                          {
                              SPIM_rxBufferRead++;
                              if(SPIM_rxBufferRead >= SPIM_RXBUFFERSIZE)
                              {
                                  SPIM_rxBufferRead = 0u;
                              }
                              SPIM_rxBufferFull = 1u;
                          }
                          
                          /* Move data from the FIFO to the Buffer */
                          SPIM_RXBUFFER[SPIM_rxBufferWrite] = rxData;
                              
                          SPIM_swStatusRx = SPIM_GET_STATUS_RX(SPIM_swStatusRx);
                      }                    
                      
                      #endif /* SPIM_InternalRxInterruptEnabled  && (SPIM_RXBUFFERSIZE > 4u) */        
 202   1          
 203   1          /* User code required at end of ISR (Optional) */
 204   1          /* `#START SPIM_RX_ISR_END` */
 205   1      
 206   1          /* `#END` */
 207   1          
 208   1          #ifdef SPIM_RxInternalInterrupt__ES2_PATCH
                      #if(SPIM_PSOC3_ES2 && (SPIM_RxInternalInterrupt__ES2_PATCH))
                          SPIM_RX_ISR_PATCH();
                      #endif /* End PSOC3_ES2 */  
                  #endif /* SPIM_RxInternalInterrupt__ES2_PATCH */       
 213   1      }
 214          
 215          /* [] END OF FILE */
C51 COMPILER V8.16   SPIM_INT                                                              07/14/2011 10:20:33 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION SPIM_TX_ISR (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 130
0000 32                RETI    
             ; FUNCTION SPIM_TX_ISR (END)

             ; FUNCTION SPIM_RX_ISR (BEGIN)
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 213
0000 32                RETI    
             ; FUNCTION SPIM_RX_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =      2    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
