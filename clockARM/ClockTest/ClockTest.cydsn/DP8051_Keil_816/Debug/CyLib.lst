C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE CYLIB
OBJECT MODULE PLACED IN C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/CyLib.OBJ
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\1.0\PSoC Creator\import\keil\pk51\8.16\C51\BIN\c51.exe C:\Use
                    -rs\Jon Moeller\Documents\PSoC Creator\clockARM\ClockTest\ClockTest.cydsn\Generated_Source\PSoC3\CyLib.c NOIV LARGE MODDP
                    -2 OMF2 VB(1) PR(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/ClockTest/ClockTest.cydsn/DP8051_Keil_816/Debug/CyL
                    -ib.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source/PSoC3) OJ(C:/Users/Jon Moeller/Documents/PSoC Creator/clockARM/Clo
                    -ckTest/ClockTest.cydsn/DP8051_Keil_816/Debug/CyLib.OBJ)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyLib.c
   3          * Version 2.20
   4          *
   5          *  Description:
   6          *
   7          *  Note:
   8          *   Documentation of the API's in this file is located in the
   9          *   System Reference Guide provided with PSoC Creator.
  10          *
  11          *******************************************************************************
  12          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <CyLib.h>
  19          
  20          
  21          /* CYLIB CLOCK funcs begin*/
  22          
  23          /*******************************************************************************
  24          * Function Name: CyPLL_OUT_Start
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *   Enables the PLL.  Optionally waits for it to become stable.
  29          *   Waits at least 250us or until it is detected that the PLL is stable.
  30          *
  31          * Parameters:
  32          *   wait:
  33          *    0: Return immediately after configuration
  34          *    1: Wait for PLL lock or timeout.
  35          *
  36          * Return:
  37          *   Status
  38          *     CYRET_SUCCESS - Completed successfully
  39          *    CYRET_TIMEOUT - Timeout occurred without detecting a stable clock.  
  40          *     If the input source of the clock is jittery, then the lock indication 
  41          *     may not occur.  However, after the timeout has expired the generated PLL 
  42          *     clock can still be used..
  43          *
  44          *******************************************************************************/
  45          cystatus CyPLL_OUT_Start(uint8 wait) 
  46          {
  47   1          cystatus status = CYRET_SUCCESS;
  48   1          uint8 pm_tw_cfg2_state;
  49   1          uint8 pm_tw_cfg0_state;
  50   1          uint8 ilo_clock_state;
  51   1          
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 2   

  52   1          FASTCLK_PLL_CFG0 |= PLL_CONTROL_ENABLE;
  53   1          
  54   1          /*Non-zero wait value*/
  55   1          if (wait != 0) 
  56   1          {
  57   2              /*Need to turn on the 100KHz ILO if it happens to not already be running.*/
  58   2              ilo_clock_state = SLOWCLK_ILO_CR0;
  59   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
  60   2              {
  61   3                  CyILO_Start100K();
  62   3              }
  63   2              
  64   2              /*Use ILO 100Khz*/
  65   2              pm_tw_cfg2_state = PM_TW_CFG2;
  66   2              pm_tw_cfg0_state = PM_TW_CFG0;
  67   2              
  68   2              /* FTW_EN (bit 0) must be clear to change the period*/
  69   2              PM_TW_CFG2 &= FTW_CLEAR_FTW_BITS;
  70   2              
  71   2              /* Set the FTW interval of 25 100KHz ILO clocks
  72   2              Should result in status getting set at a (100/25)KHz rate*/
  73   2              PM_TW_CFG0 =  25-1;
  74   2              /* Enable FTW, but not the interrupt*/
  75   2              PM_TW_CFG2 = FTW_ENABLE;        
  76   2              
  77   2              status = CYRET_TIMEOUT;
  78   2              /*check the CyPmReadStatus() return value, 0th bit is ftw*/
  79   2              while (CyPmReadStatus(1) == 0)
  80   2              {
  81   3                  /* Wait for the interrupt status*/
  82   3                  if(FASTCLK_PLL_SR & PLL_STATUS_LOCK)
  83   3                  {
  84   4                      if(FASTCLK_PLL_SR & PLL_STATUS_LOCK)
  85   4                      {
  86   5                          /*A stable clock.                    */
  87   5                          status = CYRET_SUCCESS;
  88   5                          break;
  89   5                      }
  90   4                  }
  91   3              }
  92   2              /*reset the clock */
  93   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
  94   2              {
  95   3                  CyILO_Stop100K();
  96   3              }
  97   2      
  98   2              /*restore the FTW*/
  99   2              PM_TW_CFG0 = pm_tw_cfg0_state;
 100   2              PM_TW_CFG2 = pm_tw_cfg2_state;
 101   2          }
 102   1          return status;
 103   1      }
 104          
 105          
 106          /*******************************************************************************
 107          * Function Name: CyPLL_OUT_Stop
 108          ********************************************************************************
 109          * Summary:
 110          *   Disables the PLL.
 111          *
 112          *
 113          * Parameters:
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 3   

 114          *   void.
 115          *
 116          *
 117          * Return:
 118          *   void.
 119          *
 120          *******************************************************************************/
 121          void CyPLL_OUT_Stop(void) 
 122          {
 123   1          /* Disable the PLL. */
 124   1          FASTCLK_PLL_CFG0 &= ~PLL_CONTROL_ENABLE;
 125   1      }
 126          
 127          
 128          /*******************************************************************************
 129          * Function Name: CyPLL_OUT_SetPQ
 130          ********************************************************************************
 131          * Summary:
 132          *   Sets the P and Q dividers and the charge pump current.  
 133          *   The Frequency Out will be P/Q * Frequency In.  
 134          *   The PLL must be disabled before calling this function.
 135          *
 136          *
 137          * Parameters:
 138          *   P: Valid range [4 - 255]
 139          *   Q: Valid range [1 - 16].  Input Frequency / Q must be in the range of 1MHz to 3MHz.
 140          *   current: Valid range [1 - 7].  Charge pump current in uA.  
 141          *            Recommendation of 2uA for output frequencies of 67MHz or less and 
 142          *            3uA for higher output frequencies.
 143          *
 144          *
 145          * Return:
 146          *   void.
 147          *
 148          *******************************************************************************/
 149          void CyPLL_OUT_SetPQ(uint8 P, uint8 Q, uint8 current) 
 150          {
 151   1          CYASSERT(!(FASTCLK_PLL_CFG0 & PLL_STATUS_ENABLED));
 152   1          
 153   1          /*Set the CYREG_FASTCLK_PLL_P register
 154   1          Settings less than 4 do not give valid outputs. Valid range is 4 - 255*/
 155   1          if (P >= MIN_FASTCLK_PLL_P_VALUE)
 156   1          {
 157   2              FASTCLK_PLL_P = P;
 158   2          }
 159   1          /*Set the CYREG_FASTCLK_PLL_Q register*/
 160   1          if (Q <= MAX_FASTCLK_PLL_Q_VALUE && Q >= MIN_FASTCLK_PLL_Q_VALUE)
 161   1          {
 162   2              FASTCLK_PLL_Q = Q-1;
 163   2          }
 164   1          if(current >= MIN_FASTCLK_PLL_CUR_VALUE && current <= MAX_FASTCLK_PLL_CUR_VALUE)
 165   1          {
 166   2              /*
 167   2              Bits     Name         Description
 168   2              6:4     icpsel[2:0] Charge Pump current select; BROS tables contain 
 169   2                                  important stability information for given frequencies,
 170   2                                  P values, and other parameters
 171   2              1:0     vco_gain[1:0] VCO loop gain
 172   2              */
 173   2              FASTCLK_PLL_CFG1 = ((current - 1) << PLL_CURRENT_POSITION) | PLL_VCO_GAIN_2;
 174   2          }
 175   1      }
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 4   

 176          
 177          
 178          /*******************************************************************************
 179          * Function Name: CyPLL_OUT_SetSource
 180          ********************************************************************************
 181          * Summary:
 182          *   Sets the input clock source to the PLL.  The PLL must be disabled before 
 183          *   calling this function.
 184          *
 185          * Parameters:
 186          *   source: One of the three available PLL clock sources
 187          *            0 :        IMO
 188          *            1 :        MHz Crystal
 189          *            2 :        DSI
 190          *
 191          *
 192          * Return:
 193          *   void.
 194          *
 195          *******************************************************************************/
 196          void CyPLL_OUT_SetSource(uint8 source) 
 197          {
 198   1          CYASSERT(!(FASTCLK_PLL_CFG0 & PLL_STATUS_ENABLED));
 199   1          
 200   1          /*Set the 1:0 bits of CLKDIST_CR */
 201   1          /*  Value    Name    Description
 202   1              2'h0     IMO     IMO is selected
 203   1              2'h1     XTAL    33MHz XTAL is selected
 204   1              2'h2     DSI     Digital System Interconnect is selected*/
 205   1          switch(source)
 206   1          {
 207   2              case CY_PLL_SOURCE_IMO:
 208   2              case CY_PLL_SOURCE_XTAL:
 209   2              case CY_PLL_SOURCE_DSI:
 210   2                  CLKDIST_CR = ((CLKDIST_CR & CLOCK_CONTROL_DIST_MASK) | source);
 211   2              break;
 212   2          }
 213   1      }
 214          
 215          
 216          /*******************************************************************************
 217          * Function Name: CyIMO_Start
 218          ********************************************************************************
 219          * Summary:
 220          *   Enables the IMO.  Optionally waits at least 6us for it to settle.
 221          *
 222          *
 223          * Parameters:
 224          *   wait:
 225          *   0: Return immediately after configuration
 226          *   1: Wait for at least 6us for the IMO to settle.
 227          *
 228          *
 229          * Return:
 230          *   void.
 231          *
 232          * Side Effects and Restrictions:
 233          *   If wait is enabled: Uses the Fast Timewheel to time the wait.
 234          *   Any other use of the Fast Timewheel will be stopped during the period of -
 235          *   this function and then restored.
 236          *   Uses the 100KHz ILO.  If not enabled, this function will enable the 100KHz -
 237          *   ILO for the period of this function.
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 5   

 238          *
 239          *******************************************************************************/
 240          void CyIMO_Start(uint8 wait) 
 241          {
 242   1          uint8 pm_tw_cfg2_state;
 243   1          uint8 pm_tw_cfg0_state;
 244   1          uint8 ilo_clock_state;
 245   1      
 246   1          /* Set the bit to enable the clock. */
 247   1          PM_ACT_CFG0 |= IMO_PM_ENABLE;
 248   1      
 249   1          /*Wait for 6 us*/
 250   1          if(wait)
 251   1          {
 252   2              /*Need to turn on the 100KHz ILO if it happens to not already be running.*/
 253   2              ilo_clock_state = SLOWCLK_ILO_CR0;
 254   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
 255   2              {
 256   3                  CyILO_Start100K();
 257   3              }
 258   2              
 259   2              /*Use ILO 100Khz*/
 260   2              pm_tw_cfg2_state = PM_TW_CFG2;
 261   2              pm_tw_cfg0_state = PM_TW_CFG0;
 262   2              
 263   2              /* FTW_EN (bit 0) must be clear to change the period*/
 264   2              PM_TW_CFG2 &= FTW_CLEAR_FTW_BITS;
 265   2              
 266   2              /* Set the FTW interval of 1 100KHz ILO clocks
 267   2              Should result in status getting set at a (100/1)KHz rate*/
 268   2              PM_TW_CFG0 = 1-1;
 269   2              /* Enable FTW, but not the interrupt*/
 270   2              PM_TW_CFG2 = FTW_ENABLE;        
 271   2              
 272   2              /*Read FTW value*/
 273   2              while (CyPmReadStatus(1) == 0)
 274   2              {
 275   3                  /* Wait for the interrupt status*/
 276   3              }
 277   2      
 278   2              /*reset the clock */
 279   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
 280   2              {
 281   3                  CyILO_Stop100K();
 282   3              }
 283   2              /*restore the FTW*/
 284   2              PM_TW_CFG0 = pm_tw_cfg0_state;
 285   2              PM_TW_CFG2 = pm_tw_cfg2_state;
 286   2          }
 287   1      }
 288          
 289          
 290          /*******************************************************************************
 291          * Function Name: CyIMO_Stop
 292          ********************************************************************************
 293          * Summary:
 294          *   Disables the IMO.
 295          *
 296          * Parameters:
 297          *   void.
 298          *
 299          *
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 6   

 300          * Return:
 301          *   void.
 302          *
 303          *******************************************************************************/
 304          void CyIMO_Stop(void) 
 305          {
 306   1          /* Clear the bit to disable the clock. */
 307   1          PM_ACT_CFG0 &= ~IMO_PM_ENABLE;
 308   1      }
 309          
 310          
 311          /*******************************************************************************
 312          * Function Name: CyIMO_SetTrimValue
 313          ********************************************************************************
 314          * Summary:
 315          *   Sets the IMO factory trim values.
 316          *
 317          * Parameters:
 318          *   freq.
 319          *
 320          *
 321          * Return:
 322          *   void.
 323          *
 324          *******************************************************************************/
 325          void CyIMO_SetTrimValue(uint8 freq) 
 326          {
 327   1          /*Unlock USB write*/
 328   1          CY_USB_CR1 &= ~CLOCK_USB_ENABLE;
 329   1          
 330   1          switch(freq)
 331   1          {
 332   2              case CY_IMO_FREQ_3MHZ:
 333   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_3MHZ_PTR);
 334   2              break;
 335   2      
 336   2              case CY_IMO_FREQ_6MHZ:
 337   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_6MHZ_PTR);
 338   2              break;
 339   2      
 340   2              case CY_IMO_FREQ_12MHZ:
 341   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_12MHZ_PTR);
 342   2              break;
 343   2      
 344   2              case CY_IMO_FREQ_24MHZ:
 345   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_24MHZ_PTR);
 346   2              break;
 347   2      
 348   2              case CY_IMO_FREQ_48MHZ:
 349   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_MFG_CFG_IMO_TR1_PTR);
 350   2              break;
 351   2      
 352   2              case CY_IMO_FREQ_62MHZ:
 353   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_67MHZ_PTR);
 354   2              break;
 355   2      
 356   2              case CY_IMO_FREQ_74MHZ:
 357   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_80MHZ_PTR);
 358   2              break;
 359   2              
 360   2              case CY_IMO_FREQ_USB:
 361   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_USB_PTR);
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 7   

 362   2              /*Lock the USB Oscillator*/
 363   2              CY_USB_CR1 |= CLOCK_USB_ENABLE;
 364   2              break;
 365   2              
 366   2              default:
 367   2              CYASSERT(0);
 368   2              break;
 369   2          }
 370   1          
 371   1      }
 372          
 373          
 374          /*******************************************************************************
 375          * Function Name: CyIMO_SetFreq
 376          ********************************************************************************
 377          * Summary:
 378          *   Alows the caller to set the IMO fequency (3, 6, 12, 24, 48, 62 MHZ).
 379          *   Sets the frequency of the IMO.  
 380          *   Changes may be made while the IMO is running.  
 381          *   When the USB setting is chosen the USB clock locking circuit is enabled.  
 382          *   Otherwise this circuit is disabled.
 383          *   If the IMO is currently driving the Master clock, then the Flash wait states
 384          *   must be set appropriately before making this change -
 385          *   by using CyFlash_SetWaitCycles().
 386          *
 387          *
 388          * Parameters:
 389          *   frequency,    CY_IMO_FREQ_3MHZ  to set 3 MHz,
 390          *                 CY_IMO_FREQ_6MHZ  to set 6 MHz,
 391          *                 CY_IMO_FREQ_12MHZ to set 12MHz,
 392          *                 CY_IMO_FREQ_24MHZ to set 24MHz,
 393          *                 CY_IMO_FREQ_48MHZ to set 48MHz,
 394          *                 CY_IMO_FREQ_62MHZ to set 62.6MHz.
 395          *                 CY_IMO_FREQ_74MHZ    to set 74.7 MHz (PSoC 5)
 396          *                 CY_IMO_FREQ_USB    to set 24 MHz (Trimmed for USB operation)
 397          *
 398          *
 399          * Return:
 400          *   void.
 401          *
 402          *******************************************************************************/
 403          void CyIMO_SetFreq(uint8 freq) 
 404          {
 405   1          uint8 current_freq;
 406   1          uint8 next_freq;
 407   1          
 408   1          /*
 409   1          When changing the IMO frequency the Trim values must also be set accordingly.  
 410   1          This requires reading the current frequency.  
 411   1          If the new frequency is faster, then set the new trim and then change the
 412   1          frequency, otherwise change the frequency and then set the new trim values.
 413   1          */
 414   1      
 415   1          /*
 416   1          Value Name         Description
 417   1          3'h0 F_RANGE_0 12 MHz (normal)
 418   1          3'h1 F_RANGE_1 6 MHz (normal); 12 MHz (fast start)
 419   1          3'h2 F_RANGE_2 24 MHz
 420   1          3'h3 F_RANGE_3 3 MHz (normal); 12 MHz (fast start)
 421   1          3'h4 F_RANGE_4 48 MHz
 422   1          3'h5 F_RANGE_5 67 MHz
 423   1          3'h6 F_RANGE_6 80 MHz (normal); 48 MHz (fast start)
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 8   

 424   1          3'h7 F_RANGE_7 96 MHz (normal); 48 MHz (fast start)
 425   1          */
 426   1          current_freq = FASTCLK_IMO_CR & ~CLOCK_IMO_RANGE_CLEAR;
 427   1          /*Check if the requested frequency is USB.*/
 428   1          next_freq = (freq == CY_IMO_FREQ_USB) ? CY_IMO_FREQ_24MHZ : freq;
 429   1          switch (current_freq)
 430   1          {
 431   2              case 0:
 432   2              current_freq = CY_IMO_FREQ_12MHZ;
 433   2              break;
 434   2              
 435   2              case 1:
 436   2              current_freq = CY_IMO_FREQ_6MHZ;
 437   2              break;
 438   2      
 439   2              case 2:
 440   2              current_freq = CY_IMO_FREQ_24MHZ;
 441   2              break;
 442   2      
 443   2              case 3:
 444   2              current_freq = CY_IMO_FREQ_3MHZ;
 445   2              break;
 446   2      
 447   2              case 4:
 448   2              current_freq = CY_IMO_FREQ_48MHZ;
 449   2              break;
 450   2      
 451   2              case 5:
 452   2              current_freq = CY_IMO_FREQ_62MHZ;
 453   2              break;
 454   2      
 455   2              case 6:
 456   2              current_freq = CY_IMO_FREQ_74MHZ;
 457   2              break;
 458   2          }
 459   1          
 460   1          if (next_freq >= current_freq)
 461   1          {
 462   2              /*Set the new trim first*/
 463   2              CyIMO_SetTrimValue(freq);
 464   2          }
 465   1          
 466   1          
 467   1          switch(freq)
 468   1          {
 469   2              case CY_IMO_FREQ_3MHZ:
 470   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_3MHZ_VALUE;
 471   2              break;
 472   2      
 473   2              case CY_IMO_FREQ_6MHZ:
 474   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_6MHZ_VALUE;
 475   2              break;
 476   2      
 477   2              case CY_IMO_FREQ_12MHZ:
 478   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_12MHZ_VALUE;
 479   2              break;
 480   2      
 481   2              case CY_IMO_FREQ_24MHZ:
 482   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_24MHZ_VALUE;
 483   2              break;
 484   2      
 485   2              case CY_IMO_FREQ_48MHZ:
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 9   

 486   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_48MHZ_VALUE;
 487   2              break;
 488   2      
 489   2              case CY_IMO_FREQ_62MHZ:
 490   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_62MHZ_VALUE;
 491   2              break;
 492   2      
 493   2              case CY_IMO_FREQ_74MHZ:
 494   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_74MHZ_VALUE;
 495   2              break;
 496   2              
 497   2              case CY_IMO_FREQ_USB:
 498   2              FASTCLK_IMO_CR = (FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_24MHZ_VALUE;
 499   2              break;
 500   2              
 501   2              default:
 502   2              /*Not a correct fequency value.*/
 503   2              CYASSERT(0);
 504   2              break;
 505   2          }
 506   1          
 507   1          if (next_freq < current_freq)
 508   1          {
 509   2              /*Set the new trim after setting the frequency*/
 510   2              CyIMO_SetTrimValue(freq);
 511   2          }
 512   1      }
 513          
 514          
 515          /*******************************************************************************
 516          * Function Name: CyIMO_SetSource
 517          ********************************************************************************
 518          * Summary:
 519          *   Sets the source of the clock output from the IMO block.  
 520          *   The output from the IMO is by default the IMO itself.  
 521          *   Optionally the MHz Crystal or a DSI input can be the source of the 
 522          *   IMO output instead.  
 523          *   If the IMO is currently driving the Master clock, 
 524          *   then the Flash wait states must be set appropriately before making this 
 525          *   change by using CyFlash_SetWaitCycles().
 526          *
 527          *
 528          * Parameters:
 529          *   source, CY_IMO_SOURCE_DSI to set the DSI as source.
 530          *           CY_IMO_SOURCE_XTAL to set the MHz as source.
 531          *           CY_IMO_SOURCE_IMO to set the IMO itself.
 532          *
 533          *
 534          * Return:
 535          *   void.
 536          *
 537          *******************************************************************************/
 538          void CyIMO_SetSource(uint8 source) 
 539          {
 540   1          /*Set the xclken bit of FASTCLK_IMO_CR regigster*/
 541   1          /*
 542   1              IMO2X_SRC     bit in CLKDIST_CR
 543   1              
 544   1              Bit field encoding: IMO2X_INPUT_SEL_ENUM
 545   1              Value Name Description
 546   1              1'b0  DSI  Digital System Interconnect is used as a source to IMO doubler
 547   1              1'b1  XTAL External clock source is used as a source to IMO doubler
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 10  

 548   1              
 549   1              xclken         bit in FASTCLK_IMO_CR
 550   1              
 551   1              Value      Name      Description
 552   1              1'b0     XCLKEN_0     IMO doubler runs from the IMOCLK
 553   1              1'b1     XCLKEN_1     IMO doubler runs from the selected 'external' clock. 
 554   1                                  This is a signal on a global - source is TBD.
 555   1          */
 556   1          
 557   1          switch(source)
 558   1          {
 559   2              case CY_IMO_SOURCE_DSI:
 560   2                  CLKDIST_CR &= ~CLOCK_IMO2X_XTAL;
 561   2                  FASTCLK_IMO_CR |= CLOCK_IMO_IMO;
 562   2                  break;
 563   2              
 564   2              case CY_IMO_SOURCE_XTAL:        
 565   2                  CLKDIST_CR |= CLOCK_IMO2X_XTAL;
 566   2                  FASTCLK_IMO_CR |= CLOCK_IMO_IMO;
 567   2                  break;
 568   2              
 569   2              case CY_IMO_SOURCE_IMO:
 570   2                  FASTCLK_IMO_CR &= ~CLOCK_IMO_IMO;
 571   2                  break;
 572   2              
 573   2              default:
 574   2                  /*Not a correct source value.*/
 575   2                  CYASSERT(0);
 576   2                  break;        
 577   2          }
 578   1      }
 579          
 580          
 581          /*******************************************************************************
 582          * Function Name: CyIMO_EnableDoubler
 583          ********************************************************************************
 584          * Summary:
 585          *   Enables the IMO doubler.  The 2x frequency clock is used to convert 
 586          *   a 24MHz input to a 48MHz output for use by the USB block.
 587          *
 588          *
 589          * Parameters:
 590          *   void.
 591          *
 592          *
 593          * Return:
 594          *   void.
 595          *
 596          *******************************************************************************/
 597          void CyIMO_EnableDoubler(void) 
 598          {
 599   1          /*Set the FASTCLK_IMO_CR_PTR regigster's 4th bit*/
 600   1          FASTCLK_IMO_CR |= IMO_DOUBLER_ENABLE;
 601   1      }
 602          
 603          
 604          /*******************************************************************************
 605          * Function Name: CyIMO_DisableDoubler
 606          ********************************************************************************
 607          * Summary:
 608          *   Disables the IMO doubler.
 609          *
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 11  

 610          *
 611          * Parameters:
 612          *   void.
 613          *
 614          *
 615          * Return:
 616          *   void.
 617          *
 618          *******************************************************************************/
 619          void CyIMO_DisableDoubler(void) 
 620          {
 621   1          /*Set the FASTCLK_IMO_CR_PTR regigster's 4th bit*/
 622   1          FASTCLK_IMO_CR &= ~IMO_DOUBLER_ENABLE;
 623   1      }
 624          
 625          
 626          /*******************************************************************************
 627          * Function Name: CyMasterClk_SetSource
 628          ********************************************************************************
 629          * Summary:
 630          *   Sets the source of the master clock.  
 631          *   The current source and the new source must both be running and stable 
 632          *   before calling this function.  
 633          *   The Flash wait states must be set appropriately before making this change 
 634          *   by using CyFlash_SetWaitCycles().
 635          *
 636          *
 637          * Parameters:
 638          *   source: One of the four available Master clock sources.
 639          *     CY_MASTER_SOURCE_IMO
 640          *     CY_MASTER_SOURCE_PLL
 641          *     CY_MASTER_SOURCE_XTAL
 642          *     CY_MASTER_SOURCE_DSI
 643          *
 644          *
 645          * Return:
 646          *   void.
 647          *
 648          *******************************************************************************/
 649          void CyMasterClk_SetSource(uint8 source) 
 650          {
 651   1          /*
 652   1          Silicon before ES3 where a glitch could be created when switching the 
 653   1          master clock source.  
 654   1          Here is what should be implemented:
 655   1          if (master_clk divider == 0)
 656   1              set master_clk divider = 3
 657   1              change master_clk source
 658   1              set master_clk divider back to 0
 659   1          else
 660   1              change master_clk source
 661   1      
 662   1          1) Write a non-zero period to the master mux clock divider (MSTR0). 
 663   1          Recommended value is 3. This results in    a divide of the master clock by 4.
 664   1          2) Write the new select to the mux select register (MSTR1).
 665   1          3) Restore the zero period (if desired) to the master mux clock divider (MSTR0).        
 666   1          */
 667   1          uint8 master_reg_1;
 668   1      
 669   1      #if CYLIB_PSOC3_ES2
                  uint8 master_reg_0;
              
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 12  

                  /* Read the current setting */
                  master_reg_0 = CLKDIST_MSTR0;
                  if (master_reg_0 == 0x00u)
                  {
                      CLKDIST_MSTR0 = 3;
                  }
              #endif
 679   1      
 680   1          /* Read the current setting */
 681   1          master_reg_1 = CLKDIST_MSTR1;
 682   1      
 683   1          CLKDIST_MSTR1 = (master_reg_1 & MASTER_CLK_SRC_CLEAR) | (source & ~MASTER_CLK_SRC_CLEAR);
 684   1          
 685   1      #if CYLIB_PSOC3_ES2
                  /*Restore the registry value.*/
                  if (master_reg_0 == 0x00u)
                  {
                      CLKDIST_MSTR0 = 0;
                  }
              #endif
 692   1      }
 693          
 694          
 695          /*******************************************************************************
 696          * Function Name: CyMasterClk_SetDivider
 697          ********************************************************************************
 698          * Summary:
 699          *   Sets the divider value used to generate Master Clock.  
 700          *   The Flash wait states must be set appropriately before making this change 
 701          *   by using CyFlash_SetWaitCycles().
 702          *
 703          *
 704          * Parameters:
 705          *   divider: Valid range [0-255].  
 706          *   The clock will be divided by this value + 1.  
 707          *   For example to divide by 2 this parameter should be set to 1.
 708          *
 709          *
 710          * Return:
 711          *   void.
 712          *
 713          *******************************************************************************/
 714          void CyMasterClk_SetDivider(uint8 divider) 
 715          {
 716   1          CLKDIST_MSTR0 = divider;
 717   1      }
 718          
 719          
 720          /*******************************************************************************
 721          * Function Name: CyBusClk_Internal_SetDivider
 722          ********************************************************************************
 723          * Summary:
 724          *   Sets the divider value used to generate Bus Clock.  
 725          *   The Flash wait states must be set appropriately before making this change 
 726          *   by using CyFlash_SetWaitCycles().
 727          *
 728          *
 729          * Parameters:
 730          *   divider: Valid range [0-65535].
 731          *   The clock will be divided by this value + 1.
 732          *   For example to divide by 2 this parameter should be set to 1.
 733          *
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 13  

 734          *
 735          * Return:
 736          *   void.
 737          *
 738          *******************************************************************************/
 739          void CyBusClk_Internal_SetDivider(uint16 divider)
 740          {
 741   1          /*Clear all the masks (CLKDIST_AMASK, CLKDIST_DMASK)*/
 742   1          CLKDIST_AMASK &= BUS_AMASK_CLEAR;
 743   1          CLKDIST_DMASK = BUS_DMASK_CLEAR;
 744   1          
 745   1          /*set the MASK for bus clock, CLKDIST_BCFG2
 746   1          Bits      Name      Description
 747   1          7         MASK     Mask bit to enable shadow loads
 748   1          1'b1      ENABLE      Enable shadow loads*/
 749   1          CLKDIST_BCFG2 |= CLKDIST_WRK0_MASK_SET;
 750   1          
 751   1          /*We change both bytes before we enable/start the clock.*/
 752   1          CY_SET_REG16(CLKDIST_WRK0_PTR, divider);
 753   1          
 754   1          /*load the value , set the CLKDIST_LD LOAD bit*/
 755   1          CLKDIST_LD |= CLKDIST_LD_LOAD_SET;    
 756   1      }
 757          
 758          
 759          /*******************************************************************************
 760          * Function Name: CyBusClk_SetDivider
 761          ********************************************************************************
 762          * Summary:
 763          *   Sets the divider value used to generate Bus Clock.  
 764          *   The Flash wait states must be set appropriately before making this change 
 765          *   by using CyFlash_SetWaitCycles().
 766          *
 767          *
 768          * Parameters:
 769          *   divider: Valid range [0-65535].  
 770          *   The clock will be divided by this value + 1.  
 771          *   For example to divide by 2 this parameter should be set to 1..
 772          *
 773          *
 774          * Return:
 775          *   void.
 776          *
 777          *******************************************************************************/
 778          void CyBusClk_SetDivider(uint16 divider) 
 779          {
 780   1          uint16 current_busclk_divider;
 781   1          uint8 current_masterclk_divider;
 782   1      
 783   1          /*Bus clock divider value.*/
 784   1          current_busclk_divider = CY_GET_REG16(CLKDIST_BCFG0_PTR);
 785   1          
 786   1          /*Work around to set the bus clock divider value.*/
 787   1          if (divider == 0 || current_busclk_divider == 0)
 788   1          {
 789   2              /*save away the master clock divider value*/
 790   2              current_masterclk_divider = CY_GET_REG8(CLKDIST_MSTR0_PTR);
 791   2              if (current_masterclk_divider < MASTERCLK_DIVIDER_VALUE)
 792   2              {    
 793   3                  /*set master clock divider to 7 */
 794   3                  CyMasterClk_SetDivider(MASTERCLK_DIVIDER_VALUE);
 795   3              }
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 14  

 796   2              if (divider == 0)
 797   2              {
 798   3                  /*
 799   3                  set the SSS bit 
 800   3                  set the divider register desired value*/
 801   3                  CLKDIST_BCFG2 |= CLKDIST_BCFG2_SSS_SET;
 802   3                  CyBusClk_Internal_SetDivider(divider);
 803   3              }
 804   2              else 
 805   2              {
 806   3                  /*
 807   3                  set the divider register to divider argument value
 808   3                  clear the SSS bit            */
 809   3                  CyBusClk_Internal_SetDivider(divider);
 810   3                  CLKDIST_BCFG2 &= ~CLKDIST_BCFG2_SSS_SET;
 811   3              }
 812   2              /*Restore the master clock */
 813   2              CyMasterClk_SetDivider(current_masterclk_divider);
 814   2          }
 815   1          else
 816   1          {
 817   2              CyBusClk_Internal_SetDivider(divider);
 818   2          }
 819   1      }
 820          
 821          
 822          /*******************************************************************************
 823          * Function Name: CyCpuClk_SetDivider
 824          ********************************************************************************
 825          * Summary:
 826          *   Sets the divider value used to generate the CPU Clock.  Only applicable for PSoC 3.
 827          *
 828          *
 829          * Parameters:
 830          *   divider: Valid range [0-15].  
 831          *   The clock will be divided by this value + 1.  
 832          *   For example to divide by 2 this parameter should be set to 1.
 833          *
 834          *
 835          * Return:
 836          *   void.
 837          *
 838          *******************************************************************************/
 839          void CyCpuClk_SetDivider(uint8 divider) 
 840          {
 841   1      #if CYLIB_PSOC3_ES3
 842   1          CLKDIST_MSTR1 = (CLKDIST_MSTR1 & CLKDIST_MSTR1_DIV_CLEAR) | (divider << CLKDIST_DIV_POSITION);
 843   1      #elif CYLIB_PSOC3_ES2
                  CPUCLK_DIV = (CPUCLK_DIV & ~CPUCLK_DIV) | (divider & SFR_USER_CPUCLK_DIV_MASK);
              #endif /*end (CYLIB_PSOC3_ES3)*/
 846   1      }
 847          
 848          
 849          /*******************************************************************************
 850          * Function Name: CyUsbClk_SetSource
 851          ********************************************************************************
 852          * Summary:
 853          *   Sets the source of the USB clock.
 854          *
 855          *
 856          * Parameters:
 857          *   source: One of the four available USB clock sources
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 15  

 858          *             USB_CLK_IMO2X     - imo2x  is selected
 859          *             USB_CLK_IMO       - imo is selected
 860          *             USB_CLK_PLL       - pll is selected
 861          *             USB_CLK_DSI       - dsi is selected
 862          *
 863          *
 864          * Return:
 865          *   void.
 866          *
 867          *******************************************************************************/
 868          void CyUsbClk_SetSource(uint8 source) 
 869          {
 870   1          /* SRC_SEL[1:0] of CLKDIST.UCFG*/
 871   1          CLKDIST_UCFG = (CLKDIST_UCFG & ~USB_CLKDIST_CONFIG_MASK) | (USB_CLKDIST_CONFIG_MASK & source);
 872   1      }
 873          
 874          
 875          /*******************************************************************************
 876          * Function Name: CyILO_1KHZ_Start
 877          ********************************************************************************
 878          * Summary:
 879          *   Enables the ILO 1 KHz oscillator.
 880          *
 881          *
 882          * Parameters:
 883          *   void.
 884          *
 885          *
 886          * Return:
 887          *   void.
 888          *
 889          *******************************************************************************/
 890          void CyILO_Start1K(void) 
 891          {
 892   1          /*Set the bit 1 of ILO RS */
 893   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_1KHZ_ON;
 894   1      }
 895          
 896          
 897          /*******************************************************************************
 898          * Function Name: CyILO_Stop1K
 899          ********************************************************************************
 900          * Summary:
 901          *   Disables the ILO 1 KHz oscillator.
 902          *
 903          *
 904          * Parameters:
 905          *   void.
 906          *
 907          *
 908          * Return:
 909          *   void.
 910          *
 911          *******************************************************************************/
 912          void CyILO_Stop1K(void) 
 913          {
 914   1          /*Clear the bit 1 of ILO RS */
 915   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_1KHZ_ON;
 916   1      }
 917          
 918          
 919          /*******************************************************************************
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 16  

 920          * Function Name: CyILO_Start100K
 921          ********************************************************************************
 922          * Summary:
 923          *   Enables the ILO 100 KHz oscillator.
 924          *
 925          *
 926          * Parameters:
 927          *   void.
 928          *
 929          *
 930          * Return:
 931          *   void.
 932          *
 933          *******************************************************************************/
 934          void CyILO_Start100K(void) 
 935          {
 936   1          /*Set the bit 2 of ILO RS */
 937   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_100KHZ_ON;
 938   1      }
 939          
 940          
 941          /*******************************************************************************
 942          * Function Name: CyILO_Stop100K
 943          ********************************************************************************
 944          * Summary:
 945          *   Disables the ILO 100 KHz oscillator.
 946          *
 947          *
 948          * Parameters:
 949          *   void.
 950          *
 951          *
 952          * Return:
 953          *   void.
 954          *
 955          *******************************************************************************/
 956          void CyILO_Stop100K(void) 
 957          {
 958   1          /*Clear the bit 2 of ILO RS */
 959   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_100KHZ_ON;
 960   1      }
 961          
 962          
 963          /*******************************************************************************
 964          * Function Name: CyILO_Enable33K
 965          ********************************************************************************
 966          * Summary:
 967          *   Enables the ILO 33 KHz divider.  
 968          *   Note that the 33 KHz clock is generated from the 100 KHz oscillator, 
 969          *   so it must also be running in order to generate the 33 KHz output.
 970          *
 971          *
 972          * Parameters:
 973          *   void.
 974          *
 975          *
 976          * Return:
 977          *   void.
 978          *
 979          *******************************************************************************/
 980          void CyILO_Enable33K(void) 
 981          {
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 17  

 982   1          /*Set the bit 5 of ILO RS */
 983   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_33KHZ_ON;
 984   1      }
 985          
 986          
 987          /*******************************************************************************
 988          * Function Name: CyILO_Disable33K
 989          ********************************************************************************
 990          * Summary:
 991          *   Disables the ILO 33 KHz divider.  
 992          *   Note that the 33 KHz clock is generated from the 100 KHz oscillator, 
 993          *   but this API does not disable the 100 KHz clock.
 994          *
 995          *
 996          * Parameters:
 997          *   void.
 998          *
 999          *
1000          * Return:
1001          *   void.
1002          *
1003          *******************************************************************************/
1004          void CyILO_Disable33K(void) 
1005          {
1006   1          /*Clear the bit 5 of ILO RS */
1007   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_33KHZ_ON;
1008   1      }
1009          
1010          
1011          /*******************************************************************************
1012          * Function Name: CyILO_SetSource
1013          ********************************************************************************
1014          * Summary:
1015          *   Sets the source of the clock output from the ILO block.
1016          *
1017          *
1018          * Parameters:
1019          *   source: One of the three available ILO output sources
1020          *       Value        Define                Source
1021          *       0            CY_ILO_SOURCE_100K    ILO 100 KHz
1022          *       1            CY_ILO_SOURCE_33K    ILO 33 KHz
1023          *       2            CY_ILO_SOURCE_1K    ILO 1 KHz
1024          *
1025          *
1026          * Return:
1027          *   void.
1028          *
1029          *******************************************************************************/
1030          void CyILO_SetSource(uint8 source) 
1031          {
1032   1          /*Bits 3:2       ILO_OUT[1:0] of CLKDIST_CR */
1033   1          CLKDIST_CR = (CLKDIST_CR & CY_ILO_SOURCE_BITS_CLEAR) | ((source << 2) & ~CY_ILO_SOURCE_BITS_CLEAR);
1034   1      }
1035          
1036          
1037          /*******************************************************************************
1038          * Function Name: CyILO_SetPowerMode
1039          ********************************************************************************
1040          * Summary:
1041          *   Sets the power mode used by the ILO during power down.  
1042          *   Allows for lower power down power usage resulting in a slower startup time.
1043          *
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 18  

1044          *
1045          * Parameters:
1046          *   mode, 0 : Faster start-up, internal bias left on when powered down
1047          *         1 : Slower start-up, internal bias off when powered down
1048          *
1049          *
1050          * Return:
1051          *   Prevous power mode state.
1052          *
1053          *******************************************************************************/
1054          uint8 CyILO_SetPowerMode(uint8 mode) 
1055          {
1056   1          uint8 state;
1057   1      
1058   1          /* Get current state. */
1059   1          state = SLOWCLK_ILO_CR0;
1060   1      
1061   1          /* Set the the oscillator power mode. */
1062   1          if(mode!=0)
1063   1          {
1064   2              SLOWCLK_ILO_CR0 = (state | ILO_CONTROL_PD_MODE);
1065   2          }
1066   1          else
1067   1          {
1068   2              SLOWCLK_ILO_CR0 = (state & ~ILO_CONTROL_PD_MODE);
1069   2          }
1070   1      
1071   1          /* Return the old mode. */
1072   1          return ((state & ILO_CONTROL_PD_MODE) >> ILO_CONTROL_PD_POSITION);
1073   1      }
1074          
1075          
1076          /*******************************************************************************
1077          * Function Name: CyXTAL_32KHZ_Start
1078          ********************************************************************************
1079          * Summary:
1080          *   Enables the 32KHz Crystal Oscillator.
1081          *
1082          *
1083          * Parameters:
1084          *   void.
1085          *
1086          *
1087          * Return:
1088          *   void.
1089          *
1090          *******************************************************************************/
1091          void CyXTAL_32KHZ_Start(void) 
1092          {
1093   1          volatile uint32  timeout;
1094   1          volatile uint32* timeout_p = &timeout;
1095   1          
1096   1      #if (CYLIB_PSOC3_ES3 || CYLIB_PSOC5_ES2)
1097   1          uint8 x32TrHold;
1098   1          x32TrHold = MFGCFG_X32_TR;
1099   1          MFGCFG_X32_TR = X32_TR_CLEAR;
1100   1      #endif
1101   1      
1102   1          SLOWCLK_X32_TST = X32_TST_SETALL;
1103   1          SLOWCLK_X32_CFG = X32_CFG_LOWPOWERMODE;
1104   1      
1105   1              /* Enable the the oscillator. */
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 19  

1106   1      #if (CYLIB_PSOC3_ES3 || CYLIB_PSOC5_ES2)
1107   1          SLOWCLK_X32_CR |= X32_CONTROL_PDBEN;
1108   1      #endif
1109   1          SLOWCLK_X32_CR |= X32_CONTROL_X32EN;
1110   1          for (timeout = 224000; *timeout_p && !(SLOWCLK_X32_CR & 0x20u); timeout--) { }
1111   1      #if (CYLIB_PSOC3_ES3 || CYLIB_PSOC5_ES2)
1112   1          MFGCFG_X32_TR = x32TrHold;
1113   1      #endif
1114   1      }
1115          
1116          
1117          /*******************************************************************************
1118          * Function Name: CyXTAL_32KHZ_Stop
1119          ********************************************************************************
1120          * Summary:
1121          *   Disables the 32KHz Crystal Oscillator.
1122          *
1123          *
1124          * Parameters:
1125          *   void.
1126          *
1127          *
1128          * Return:
1129          *   void.
1130          *
1131          *******************************************************************************/
1132          void CyXTAL_32KHZ_Stop(void) 
1133          {
1134   1          /* Disable the oscillator. */
1135   1          SLOWCLK_X32_CR &= ~X32_CONTROL_X32EN;
1136   1      }
1137          
1138          
1139          /*******************************************************************************
1140          * Function Name: CyXTAL_32KHZ_ReadStatus
1141          ********************************************************************************
1142          * Summary:
1143          *   Reads the two status bits for the 32 KHz oscillator.
1144          *
1145          *
1146          * Parameters:
1147          *   None
1148          *
1149          *
1150          * Return:
1151          *   Value     Define                    Source
1152          *   20        CY_XTAL32K_ANA_STAT        Analog measurement   
1153          *                                   20: Stable
1154          *                                   00: Not stable
1155          *   10        CY_XTAL32K_DIG_STAT        Digital measurement (Requires the 33 KHz 
1156          *                                           ILO to make this measurement)
1157          *                                   10: Stable
1158          *                                   00: Not stable
1159          *
1160          *******************************************************************************/
1161          uint8 CyXTAL_32KHZ_ReadStatus() 
1162          {
1163   1          uint8 status;
1164   1          status = SLOWCLK_X32_CR;
1165   1          /*
1166   1          Bits 5:4
1167   1          */
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 20  

1168   1          return (status & CY_XTAL32K_STAT_FIELDS);
1169   1      }
1170          
1171          
1172          /*******************************************************************************
1173          * Function Name: CyXTAL_32KHZ_SetPowerMode
1174          ********************************************************************************
1175          * Summary:
1176          *   Sets the power mode for the 32 KHz oscillator used during sleep mode.  
1177          *   Allows for lower power during sleep when there are fewer sources of noise.  
1178          *   During active mode the oscillator is always run in high power mode.
1179          *
1180          * Parameters:
1181          *   mode
1182          *       0: High power mode
1183          *       1: Low power mode during sleep
1184          *
1185          *
1186          * Return:
1187          *   Prevous power mode.
1188          *
1189          *******************************************************************************/
1190          uint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) 
1191          {
1192   1          uint8 state;
1193   1      
1194   1          /* Get current state. */
1195   1          state = SLOWCLK_X32_CR;
1196   1      
1197   1          /* Set the the oscillator power mode. */
1198   1          if(mode!=0)
1199   1          {
1200   2              SLOWCLK_X32_CR = (state | X32_CONTROL_LPM);
1201   2          }
1202   1          else
1203   1          {
1204   2              SLOWCLK_X32_CR = (state & ~X32_CONTROL_LPM);
1205   2          }
1206   1      
1207   1          /* Return the old mode. 
1208   1              Bit 1 position.*/
1209   1          return ((state & X32_CONTROL_LPM) >> X32_CONTROL_LPM_POSITION);
1210   1      }
1211          
1212          
1213          /*******************************************************************************
1214          * Function Name: CyXTAL_Start
1215          ********************************************************************************
1216          * Summary:
1217          *   Enables the megahertz crystal.  
1218          *   Waits until the XERR bit is low (no error) for a millisecond or 
1219          *   until the number of milliseconds specified by the wait parameter has expired.
1220          *
1221          *
1222          * Parameters:
1223          *   wait: Valid range [0-255].
1224          *   This is the timeout value in milliseconds.  
1225          *   The appropriate value is crystal specific.
1226          *
1227          *
1228          * Return:
1229          *   CYRET_SUCCESS - Completed successfully
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 21  

1230          *   CYRET_TIMEOUT - Timeout occurred without detecting a low value on XERR..
1231          *
1232          * Side Effects and Restrictions:
1233          *   If wait is enabled (non-zero wait):
1234          *    Uses the Fast Timewheel to time the wait.  Any other use of the 
1235          *    Fast Timewheel will be stopped during the period of this function and 
1236          *    then restored.
1237          *    Uses the 100KHz ILO.  If not enabled, this function will enable 
1238          *    the 100KHz ILO for the period of this function.
1239          *    No changes to the setup of the ILO, Fast Timewheel, Central Timewheel or 
1240          *    Once Per Second interrupt may be made by interrupt routines during 
1241          *    the period of this function.  
1242          *    The current operation of the ILO, Central Timewheel and Once Per Second 
1243          *    interrupt are maintained during the operation of this function provided 
1244          *    the reading of the Power Manager Interrupt Status Register is 
1245          *    only done using the CyPmReadStatus() function.
1246          *******************************************************************************/
1247          cystatus CyXTAL_Start(uint8 wait) 
1248          {
1249   1          cystatus status = CYRET_SUCCESS;
1250   1          uint8 pm_tw_cfg2_state = 0;
1251   1          uint8 pm_tw_cfg0_state = 0;
1252   1          uint8 ilo_clock_state = 0;
1253   1          volatile uint8 count = 0;
1254   1          volatile uint8 wait_msec = wait;
1255   1      
1256   1          FASTCLK_XMHZ_CSR |= XMHZ_CONTROL_ENABLE;
1257   1          
1258   1          if(wait > 0) 
1259   1          {
1260   2              /*    Need to turn on the 100KHz ILO if it happens to not already be running.*/
1261   2              ilo_clock_state = SLOWCLK_ILO_CR0;
1262   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
1263   2              {
1264   3                  CyILO_Start100K();
1265   3              }
1266   2              status = CYRET_TIMEOUT;
1267   2              
1268   2              /*Store the value*/
1269   2              pm_tw_cfg2_state = PM_TW_CFG2;
1270   2              pm_tw_cfg0_state = PM_TW_CFG0;
1271   2      
1272   2              /* FTW_EN (bit 0) must be clear to change the period*/
1273   2              PM_TW_CFG2 &= FTW_CLEAR_FTW_BITS;
1274   2              
1275   2              /* Set the FTW interval of 25 100KHz ILO clocks
1276   2              Should result in status getting set at a (100/25)KHz rate*/
1277   2              PM_TW_CFG0 = 25-1;
1278   2              /* Enable FTW, but not the interrupt*/
1279   2              PM_TW_CFG2 = FTW_ENABLE;
1280   2          }
1281   1          
1282   1          for(; wait_msec > 0; wait_msec--)
1283   1          {
1284   2              /*read XERR bit to clear it */
1285   2              FASTCLK_XMHZ_CSR;
1286   2              
1287   2              /*wait for milliseconds.. 4 times 250uS delay*/
1288   2              for(count = 4; count > 0; count --)
1289   2              {
1290   3                  /*CyPmReadStatus()*/
1291   3                  while (CyPmReadStatus(1) == 0)
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 22  

1292   3                  {
1293   4                      /* Wait for the interrupt status*/
1294   4                  }            
1295   3              } /* end of for(count = 4; count > 0; count --)*/
1296   2              /*High output indicates oscillator failure. 
1297   2              Only use this after start-up interval is completed (1ms).*/
1298   2              if ((FASTCLK_XMHZ_CSR & X32_CONTROL_XERR_MASK) == 0) 
1299   2              {
1300   3                  status = CYRET_SUCCESS;
1301   3                  break;
1302   3              }
1303   2          } /* end for(; wait_msec > 0; wait_msec--) */
1304   1      
1305   1          if(wait > 0)
1306   1          {
1307   2              if (!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
1308   2              {
1309   3                  /*reset the clock */
1310   3                  CyILO_Stop100K();
1311   3              }
1312   2      
1313   2              /*restore the FTW*/
1314   2              PM_TW_CFG0 = pm_tw_cfg0_state;
1315   2              PM_TW_CFG2 = pm_tw_cfg2_state;
1316   2          }
1317   1          
1318   1          return status;
1319   1      }
1320          
1321          
1322          /*******************************************************************************
1323          * Function Name: CyXTAL_Stop
1324          ********************************************************************************
1325          * Summary:
1326          *   Disables the megahertz crystal oscillator.
1327          *
1328          *
1329          * Parameters:
1330          *   void.
1331          *
1332          *
1333          * Return:
1334          *   void.
1335          *
1336          *******************************************************************************/
1337          void CyXTAL_Stop(void) 
1338          {
1339   1          /* Disable the the oscillator. */
1340   1          FASTCLK_XMHZ_CSR &= ~XMHZ_CONTROL_ENABLE;
1341   1      }
1342          
1343          
1344          /*******************************************************************************
1345          * Function Name: CyXTAL_EnableErrStatus
1346          ********************************************************************************
1347          * Summary:
1348          *    Enables the generation of the XERR status bit for the megahertz crystal.
1349          *
1350          *
1351          * Parameters:
1352          *   void.
1353          *
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 23  

1354          *
1355          * Return:
1356          *   void.
1357          *
1358          *******************************************************************************/
1359          void CyXTAL_EnableErrStatus(void) 
1360          {
1361   1          /*1'b0      XFB_DIS_0      enabled. If oscillator has insufficient amplitude, XERR bit will be high. *
             -/
1362   1          FASTCLK_XMHZ_CSR &= ~X32_CONTROL_XERR_DIS;
1363   1      }
1364          
1365          
1366          /*******************************************************************************
1367          * Function Name: CyXTAL_DisableErrStatus
1368          ********************************************************************************
1369          * Summary:
1370          *    Disables the generation of the XERR status bit for the megahertz crystal..
1371          *
1372          *
1373          * Parameters:
1374          *   void.
1375          *
1376          *
1377          * Return:
1378          *   void.
1379          *
1380          *******************************************************************************/
1381          void CyXTAL_DisableErrStatus(void) 
1382          {
1383   1          /*1'b0      XFB_DIS_0      enabled. If oscillator has insufficient amplitude, XERR bit will be high. *
             -/
1384   1          FASTCLK_XMHZ_CSR |= X32_CONTROL_XERR_DIS;
1385   1      }
1386          
1387          
1388          /*******************************************************************************
1389          * Function Name: CyXTAL_ReadStatus
1390          ********************************************************************************
1391          * Summary:
1392          *    Reads the XERR status bit for the megahertz crystal.  
1393          *    This status bit is a sticky clear on read value.
1394          *
1395          *
1396          * Parameters:
1397          *   void.
1398          *
1399          *
1400          * Return:
1401          *   Status
1402          *    0: No error
1403          *    1: Error.
1404          *
1405          *******************************************************************************/
1406          uint8 CyXTAL_ReadStatus(void) 
1407          {
1408   1          /*Bits      Name      Description
1409   1              7         xerr     High output indicates oscillator failure. 
1410   1          Only use this after start-up interval is completed. This can be used for 
1411   1          status and failure recovery.
1412   1          */
1413   1          return ((FASTCLK_XMHZ_CSR & X32_CONTROL_XERR_MASK) >> X32_CONTROL_XERR_POSITION);
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 24  

1414   1      }
1415          
1416          
1417          /*******************************************************************************
1418          * Function Name: CyXTAL_EnableFaultRecovery
1419          ********************************************************************************
1420          * Summary:
1421          *    Enables the fault recovery circuit which will switch to the IMO 
1422          *    in the case of a fault in the megahertz crystal circuit.  
1423          *    The crystal must be up and running with the XERR bit at 0, 
1424          *    before calling this function to prevent immediate fault switchover.
1425          *
1426          *
1427          * Parameters:
1428          *   void.
1429          *
1430          *
1431          * Return:
1432          *   void.
1433          *
1434          *******************************************************************************/
1435          void CyXTAL_EnableFaultRecovery(void) 
1436          {
1437   1          /*6th bit       xprot of FASTCLK_XMHZ_CSR 
1438   1          */
1439   1          FASTCLK_XMHZ_CSR |= X32_CONTROL_FAULT_RECOVER;
1440   1      }
1441          
1442          
1443          /*******************************************************************************
1444          * Function Name: CyXTAL_DisableFaultRecovery
1445          ********************************************************************************
1446          * Summary:
1447          *    Disables the fault recovery circuit which will switch to the IMO 
1448          *     in the case of a fault in the megahertz crystal circuit.
1449          *
1450          *
1451          * Parameters:
1452          *   void.
1453          *
1454          *
1455          * Return:
1456          *   void.
1457          *
1458          *******************************************************************************/
1459          void CyXTAL_DisableFaultRecovery(void) 
1460          {
1461   1          /*6th bit       xprot of FASTCLK_XMHZ_CSR 
1462   1          */
1463   1          FASTCLK_XMHZ_CSR &= ~X32_CONTROL_FAULT_RECOVER;
1464   1      }
1465          
1466          
1467          /*******************************************************************************
1468          * Function Name: CyXTAL_SetStartup
1469          ********************************************************************************
1470          * Summary:
1471          *   Sets the startup settings for the crystal.
1472          *
1473          *
1474          * Parameters:
1475          *   setting: Valid range [0-31].  
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 25  

1476          *    Value is dependent on the frequency and quality of the crystal being used.  
1477          *    Refer to the TRM for appropriate values for a specific crystal..
1478          *
1479          *
1480          * Return:
1481          *   void.
1482          *
1483          *******************************************************************************/
1484          void CyXTAL_SetStartup(uint8 setting) 
1485          {
1486   1          /*Valid range 0-31*/
1487   1          FASTCLK_XMHZ_CFG0 = (FASTCLK_XMHZ_CFG0 & ~FASTCLK_XMHZ_GAINMASK) | 
1488   1                               (setting & FASTCLK_XMHZ_GAINMASK);
1489   1      }
1490          
1491          
1492          #if CYLIB_PSOC3_ES3
1493          /*******************************************************************************
1494          * Function Name: CyXTAL_SetFbVoltage
1495          ********************************************************************************
1496          * Summary:
1497          *   Sets the feedback reference voltage to use for the crystal circuit.
1498          *
1499          *
1500          * Parameters:
1501          *   setting: Valid range [0-15].  
1502          *   Refer to the TRM for details on the mapping of the setting value to 
1503          *   specific voltages.
1504          *
1505          *
1506          * Return:
1507          *   void.
1508          *
1509          *
1510          * Side Effects and Restrictions:
1511          *   The feedback reference voltage must be greater than the watchdog reference 
1512          *   voltage.
1513          *
1514          *******************************************************************************/
1515          void CyXTAL_SetFbVoltage(uint8 setting) 
1516          {
1517   1          /*The register with this value has changed between ES2 and ES3 silicon.  
1518   1          This function should only be made available for ES3 silicon.  
1519   1          For ES2 there will not be an equivalent function and this register will 
1520   1          just be left at its default value.*/
1521   1          FASTCLK_XMHZ_CFG1 = ((FASTCLK_XMHZ_CFG1 & ~FASTCLK_XMHZ_VREFMASK) | 
1522   1                               (setting & FASTCLK_XMHZ_VREFMASK));
1523   1      }
1524          
1525          
1526          /*******************************************************************************
1527          * Function Name: CyXTAL_SetWdVoltage
1528          ********************************************************************************
1529          * Summary:
1530          *   Sets the reference voltage used by the watchdog to detect a failure 
1531          *   in the crystal circuit. 
1532          *
1533          *
1534          * Parameters:
1535          *   setting: Valid range [0-7].  
1536          *   Refer to the TRM for details on the mapping of the setting value to 
1537          *   specific voltages.
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 26  

1538          *
1539          *
1540          * Return:
1541          *   void.
1542          *
1543          * Side Effects and Restrictions:
1544          *   The feedback reference voltage must be greater than the watchdog 
1545          *   reference voltage.
1546          *
1547          *******************************************************************************/
1548          void CyXTAL_SetWdVoltage(uint8 setting) 
1549          {
1550   1          /*
1551   1          The register with this value has changed between ES2 and ES3 silicon.
1552   1          This function should only be made available for ES3 silicon.
1553   1          For ES2 there will not be an equivalent function and this register will 
1554   1          -just be left at its default value.
1555   1          */
1556   1          FASTCLK_XMHZ_CFG1 = ((FASTCLK_XMHZ_CFG1 & ~FASTCLK_XMHZ_VREF_WD_MASK) | 
1557   1                               ((setting << 4) & FASTCLK_XMHZ_VREF_WD_MASK));
1558   1      }
1559          
1560          #endif /*CYLIB_PSOC3_ES3*/
1561          
1562          /* CYLIB CLOCK funcs end */
1563          
1564          
1565          /* CYLIB SYSTEM funcs begin */
1566          
1567          
1568          /*******************************************************************************
1569          * Function Name: CyHalt
1570          ********************************************************************************
1571          * Summary:
1572          *  Halts the CPU
1573          *
1574          *
1575          * Parameters:
1576          *   reason: Value to be used during debugging.
1577          *
1578          *
1579          * Return: 
1580          *   void.
1581          *
1582          *
1583          *******************************************************************************/
1584          void CyHalt(uint8 reason)
1585          {
1586   1          reason = reason;
1587   1      #if defined (__ARMCC_VERSION)
                  __breakpoint(0x0);
              #elif defined(__GNUC__)
                  __asm("    bkpt    1");
              #elif defined(__C51__)
1592   1          CYDEV_HALT_CPU;
1593   1      #endif
1594   1      }
1595          
1596          
1597          /*******************************************************************************
1598          * Function Name: CySoftwareReset
1599          ********************************************************************************
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 27  

1600          * Summary:
1601          *  Forces a software reset of the device.
1602          *
1603          *
1604          * Parameters:
1605          *   None.
1606          *
1607          *
1608          * Return: 
1609          *   void.
1610          *
1611          *
1612          *******************************************************************************/
1613          void CySoftwareReset()
1614          {
1615   1          /* Perform a reset by writing the software reset bit in reset control register 2 */
1616   1          *RESET_CR2 = 0x1;
1617   1      }
1618          
1619          /* CYLIB SYSTEM funcs end */
1620          
1621          
1622          uint32 cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1623          uint32 cydelay_freq_khz = (BCLK__BUS_CLK__HZ + 999u) / 1000u;
1624          uint8 cydelay_freq_mhz = (uint8)((BCLK__BUS_CLK__HZ + 999999u) / 1000000u);
1625          uint32 cydelay_32k_ms = 32768 * ((BCLK__BUS_CLK__HZ + 999u) / 1000u);
1626          
1627          
1628          /*******************************************************************************
1629          * Function Name: CyDelay
1630          ********************************************************************************
1631          * Summary:
1632          *   Blocks for milliseconds.
1633          *    Note: CyDelay has been implemented with the instruction cache assumed enabled. 
1634          *      When instruction cache is disabled on PSoC5, CyDelay will be two times 
1635          *      larger. Ex: With instruction cache disabled CyDelay(100) would result 
1636          *      in about 200ms delay instead of 100ms.
1637          *
1638          * Parameters:
1639          *   milliseconds: number of milliseconds to delay.
1640          *
1641          * Return:
1642          *   void.
1643          *
1644          *******************************************************************************/
1645          void CyDelay(uint32 milliseconds) CYREENTRANT
1646          {
1647   1          while (milliseconds > 32768)
1648   1          {
1649   2              /* This loop prevents overflow.
1650   2               * At 100MHz, milliseconds * delay_freq_khz overflows at about 42 seconds
1651   2               */
1652   2              CyDelayCycles(cydelay_32k_ms);
1653   2              milliseconds -= 32768;
1654   2          }
1655   1      
1656   1          CyDelayCycles(milliseconds * cydelay_freq_khz);
1657   1      }
1658          
1659          
1660          /*******************************************************************************
1661          * Function Name: CyDelayUs
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 28  

1662          ********************************************************************************
1663          * Summary:
1664          *   Blocks for microseconds.
1665          *    Note: CyDelay has been implemented with the instruction cache assumed enabled. 
1666          *      When instruction cache is disabled on PSoC5, CyDelayUs will be two times 
1667          *      larger. Ex: With instruction cache disabled CyDelayUs(100) would result 
1668          *      in about 200us delay instead of 100us.
1669          *
1670          * Parameters:
1671          *   microseconds: number of microseconds to delay.
1672          *
1673          * Return:
1674          *   void.
1675          *
1676          *******************************************************************************/
1677          #if defined(__ARMCC_VERSION)
              void CyDelayUs(uint16 microseconds) CYREENTRANT
              {
                  CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
              }
              #elif defined(__GNUC__)
              void CyDelayUs(uint16 microseconds) CYREENTRANT
              {
                  CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
              }
              #endif
1688          
1689          
1690          /*******************************************************************************
1691          * Function Name: CyDelayFreq
1692          ********************************************************************************
1693          * Summary:
1694          *   Sets clock frequency for CyDelay.
1695          *
1696          * Parameters:
1697          *   freq: Frequency of bus clock in Hertz.
1698          *
1699          * Return:
1700          *   void.
1701          *
1702          *******************************************************************************/
1703          void CyDelayFreq(uint32 freq) CYREENTRANT
1704          {
1705   1          if (freq != 0u)
1706   1              cydelay_freq_hz = freq;
1707   1          else
1708   1              cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1709   1          cydelay_freq_mhz = (uint8)((cydelay_freq_hz + 999999u) / 1000000u);
1710   1          cydelay_freq_khz = (cydelay_freq_hz + 999u) / 1000u;
1711   1          cydelay_32k_ms = 32768 * cydelay_freq_khz;
1712   1      }
1713          
1714          /*******************************************************************************
1715          * Function Name: CyWdtStart
1716          ********************************************************************************
1717          * Summary:
1718          *  Enables the watchdog timer.  
1719          *  The timer is configured for the specified count interval, the central timewheel 
1720          *  is cleared, the setting for low power mode is configured and the watchdog 
1721          *  timer is enabled.  
1722          *  Once enabled the watchdog cannot be disabled.  
1723          *  The watchdog must be cleared using the CyWdtClear() function before 
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 29  

1724          *  three ticks of the watchdog timer occur.
1725          *
1726          *
1727          * Parameters: 
1728          *   ticks: One of the four available timer periods.
1729          *         CYWDT_2_TICKS     -    2 CTW Ticks
1730          *         CYWDT_16_TICKS    -   16 CTW Ticks
1731          *         CYWDT_128_TICKS   -  128 CTW Ticks
1732          *         CYWDT_1024_TICKS  - 1024 CTW Ticks
1733          *   lpMode: Low power mode configuration
1734          *         CYWDT_LPMODE_NOCHANGE - No Change
1735          *         CYWDT_LPMODE_MAXINTER - Switch to longest timer mode during sleep/hibernate
1736          *         CYWDT_LPMODE_DISABLED - Disable WDT during sleep/hibernate
1737          * 
1738          * Return: 
1739          *  None.
1740          *
1741          *******************************************************************************/
1742          void CyWdtStart(uint8 ticks, uint8 lpMode)
1743          {
1744   1          /* Set the number of ticks. */
1745   1          *CYWDT_CFG = (ticks & CYWDT_TICKS_MASK) | (*CYWDT_CFG & ~CYWDT_TICKS_MASK);
1746   1          
1747   1          /*Clear the central time wheel.*/
1748   1          *CYWDT_CFG = CYWDT_RESET | *CYWDT_CFG;
1749   1          *CYWDT_CFG = ~CYWDT_RESET & *CYWDT_CFG;
1750   1          
1751   1          /*Setting the low power mode*/
1752   1          *CYWDT_CFG = ((lpMode << CYWDT_LPMODE_SHIFT) & CYWDT_LPMODE_MASK) | (*CYWDT_CFG & ~CYWDT_LPMODE_MASK);
1753   1          
1754   1          /* Enables the watchdog timer.*/
1755   1          *CYWDT_CFG = CYWDT_ENABLE_BIT | *CYWDT_CFG;
1756   1      }
1757          
1758          /*******************************************************************************
1759          * Function Name: CyWdtClear
1760          ********************************************************************************
1761          * Summary:
1762          *  Clears (feeds) the watchdog timer.
1763          *
1764          *
1765          * Parameters: 
1766          *  None.
1767          *
1768          *
1769          * Return: 
1770          *  None.
1771          *
1772          *******************************************************************************/
1773          void CyWdtClear(void)
1774          {
1775   1          /* Clears the Watchdog timer. */
1776   1      #if (((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) && (CYDEV_CHIP_REVISION_USED == CYDEV_CHIP_REVISION
             -_3A_ES2)) || \
1777   1           ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5A) && (CYDEV_CHIP_REVISION_USED == CYDEV_CHIP_REVISION
             -_5A_ES1)))
                  /* PSoC3 ES2 and PSoC5 ES1 watchdog time clear requires workaround */
                  uint8 wdt_cfg_value = *CYWDT_CFG; 
                  *CYWDT_CR = 1; 
                  *CYWDT_CFG = 0; 
                  *CYWDT_CFG = wdt_cfg_value;
              #else
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 30  

1784   1          *CYWDT_CR = 1;
1785   1      #endif 
1786   1      }
1787          
1788          /*******************************************************************************
1789          * Function Name: CyDisableInts
1790          ********************************************************************************
1791          * Summary:
1792          *  Disables the interrupt enable for each interrupt.
1793          *
1794          *
1795          * Parameters: 
1796          *  None.
1797          *
1798          *
1799          * Return: 
1800          *  32 bit mask of previously enabled interrupts.
1801          *
1802          *******************************************************************************/
1803          uint32 CyDisableInts(void) 
1804          {
1805   1          uint32 intState;
1806   1      
1807   1      
1808   1          /* Get the curreent interrutp state. */
1809   1          intState = CY_GET_REG32(CYINT_CLEAR);
1810   1      
1811   1          /* Disable all of the interrupts. */
1812   1          CY_SET_REG32(CYINT_CLEAR, 0xFFFFFFFF);
1813   1      
1814   1          return intState;
1815   1      }
1816          
1817          /*******************************************************************************
1818          * Function Name: CyEnableInts
1819          ********************************************************************************
1820          * Summary:
1821          *  Enables interrupts to a given state.
1822          *
1823          *
1824          * Parameters:
1825          *   mask, 32 bit mask of interrupts to enable.
1826          *
1827          *
1828          * Return: 
1829          *  void.
1830          *
1831          *******************************************************************************/
1832          void CyEnableInts(uint32 mask) 
1833          {
1834   1          /* Set interrupts as enabled. */
1835   1          CY_SET_REG32(CYINT_ENABLE, mask);
1836   1      }
1837          
1838          
1839          /*******************************************************************************
1840          * Function Name: CyIntSetVector
1841          ********************************************************************************
1842          * Summary:
1843          *   Sets the interrupt vector of the specified interrupt number.
1844          *
1845          *
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 31  

1846          * Parameters:
1847          *   number: Valid range [0-31].  Interrupt number
1848          *
1849          *   address: Pointer to an interrupt service routine
1850          *
1851          * Return:
1852          *   Previous interrupt vector value.
1853          *
1854          *******************************************************************************/
1855          cyisraddress CyIntSetVector(uint8 number, cyisraddress address) 
1856          {
1857   1          cyisraddress oldIsr;
1858   1      
1859   1      
1860   1          /* Save old Interrupt service routine. */
1861   1          oldIsr = (cyisraddress) CY_GET_REG16(&CYINT_VECT_TABLE[number]);
1862   1      
1863   1          /* Set new Interrupt service routine. */
1864   1          CY_SET_REG16(&CYINT_VECT_TABLE[number], (uint16) address);
1865   1      
1866   1          return oldIsr;
1867   1      }
1868          
1869          /*******************************************************************************
1870          * Function Name: CyIntGetVector
1871          ********************************************************************************
1872          * Summary:
1873          *   Gets the interrupt vector of the specified interrupt number.
1874          *
1875          *
1876          * Parameters:
1877          *   number: Valid range [0-31].  Interrupt number
1878          *
1879          *
1880          * Return:
1881          *   Address of the ISR in the interrupt vector table.
1882          *
1883          *******************************************************************************/
1884          cyisraddress CyIntGetVector(uint8 number) 
1885          {
1886   1          return (cyisraddress) CY_GET_REG16(&CYINT_VECT_TABLE[number]);
1887   1      }
1888          
1889          /*******************************************************************************
1890          * Function Name: CyIntSetPriority
1891          ********************************************************************************
1892          * Summary:
1893          *   Sets the Priority of the Interrupt.
1894          *
1895          *
1896          * Parameters:
1897          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
1898          *
1899          *   number: The number of the interrupt, 0 - 31.
1900          *
1901          * Return:
1902          *   void.
1903          *
1904          *
1905          *******************************************************************************/
1906          void CyIntSetPriority(uint8 number, uint8 priority) 
1907          {
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 32  

1908   1          CYASSERT(priority <= 7);
1909   1          CYASSERT(number <= 31);
1910   1          CYINT_PRIORITY[number] = priority << 5;
1911   1      }
1912          
1913          /*******************************************************************************
1914          * Function Name: CyIntGetPriority
1915          ********************************************************************************
1916          * Summary:
1917          *   Gets the Priority of the Interrupt.
1918          *
1919          *
1920          * Parameters:
1921          *   number: The number of the interrupt, 0 - 31.
1922          *
1923          *
1924          * Return:
1925          *   Priority of the interrupt. 0 - 7, 0 being the highest.
1926          *
1927          *
1928          *******************************************************************************/
1929          uint8 CyIntGetPriority(uint8 number) 
1930          {
1931   1          uint8 priority;
1932   1      
1933   1      
1934   1          priority = CYINT_PRIORITY[number] >> 5;
1935   1      
1936   1          return priority;
1937   1      }
1938          
1939          /*******************************************************************************
1940          * Function Name: CyIntEnable
1941          ********************************************************************************
1942          * Summary:
1943          *   Enables the specified interrupt number.
1944          *
1945          *
1946          * Parameters:
1947          *   number: Valid range [0-31].  Interrupt number
1948          *
1949          *
1950          * Return:
1951          *   void.
1952          *
1953          *******************************************************************************/
1954          void CyIntEnable(uint8 number) 
1955          {
1956   1          reg8 * enableReg;
1957   1      
1958   1          /* Get a pointer to the Interrupt enable register. */
1959   1          enableReg = CYINT_ENABLE + (number >> 3);
1960   1      
1961   1          /* Enable the interrupt. */
1962   1          *enableReg = 1 << (0x07 & number);
1963   1      }
1964          
1965          /*******************************************************************************
1966          * Function Name: CyIntGetState
1967          ********************************************************************************
1968          * Summary:
1969          *   Gets the enable state of the specified interrupt number.
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 33  

1970          *
1971          *
1972          * Parameters:
1973          *   number: Valid range [0-31].  Interrupt number.
1974          *
1975          *
1976          * Return:
1977          *   Enable status: 1 if enabled, 0 if disabled
1978          *
1979          *******************************************************************************/
1980          uint8 CyIntGetState(uint8 number) 
1981          {
1982   1          reg8 * stateReg;
1983   1      
1984   1      
1985   1          /* Get a pointer to the Interrupt enable register. */
1986   1          stateReg = CYINT_ENABLE + (number >> 3);
1987   1      
1988   1          /* Get the state of the interrupt. */
1989   1          return (*stateReg & (1 << (0x07 & number))) ? 1:0;
1990   1      }
1991          
1992          /*******************************************************************************
1993          * Function Name: CyIntDisable
1994          ********************************************************************************
1995          * Summary:
1996          *   Disables the specified interrupt number.
1997          *
1998          *
1999          * Parameters:
2000          *   number: Valid range [0-31].  Interrupt number.
2001          *
2002          *
2003          * Return:
2004          *   void.
2005          *
2006          *******************************************************************************/
2007          void CyIntDisable(uint8 number) 
2008          {
2009   1          reg8 * clearReg;
2010   1      
2011   1      
2012   1          /* Get a pointer to the Interrupt enable register. */
2013   1          clearReg = CYINT_CLEAR + (number >> 3);
2014   1      
2015   1          /* Enable the interrupt. */
2016   1          *clearReg = 1 << (0x07 & number);
2017   1      }
2018          
2019          /*******************************************************************************
2020          * Function Name: CyIntSetPending
2021          ********************************************************************************
2022          * Summary:
2023          *   Forces the specified interrupt number to be pending.
2024          *
2025          *
2026          * Parameters:
2027          *   number: Valid range [0-31].  Interrupt number.
2028          *
2029          *
2030          * Return:
2031          *   void.
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 34  

2032          *
2033          *******************************************************************************/
2034          void CyIntSetPending(uint8 number) 
2035          {
2036   1          reg8 * pendReg;
2037   1      
2038   1      
2039   1          /* Get a pointer to the Interrupt set pending register. */
2040   1          pendReg = CYINT_SET_PEND + (number >> 3);
2041   1      
2042   1          /* Enable the interrupt. */
2043   1          *pendReg = 1 << (0x07 & number);
2044   1      }
2045          
2046          /*******************************************************************************
2047          * Function Name: CyIntClearPending
2048          ********************************************************************************
2049          * Summary:
2050          *   Clears any pending interrupt for the specified interrupt number.
2051          *
2052          * Parameters:
2053          *   number: Valid range [0-31].  Interrupt number.
2054          *
2055          *
2056          * Return:
2057          *   void.
2058          *
2059          *******************************************************************************/
2060          void CyIntClearPending(uint8 number) 
2061          {
2062   1          reg8 * pendReg;
2063   1      
2064   1      
2065   1          /* Get a pointer to the Interrupt clear pending register. */
2066   1          pendReg = CYINT_CLR_PEND + (number >> 3);
2067   1      
2068   1          /* Enable the interrupt. */
2069   1          *pendReg = 1 << (0x07 & number);
2070   1      }
2071          
2072          /* cystrcpy, cystrlen, CyGetSwapReg16 and CySetSwapReg16 are obsolete functions.
2073          and are not recommended for use in new code. */
2074          /*******************************************************************************
2075          * Function Name: cystrcpy
2076          ********************************************************************************
2077          * Summary:
2078          *   Recommended not use these function, these are defined for compatibility.
2079          *
2080          *******************************************************************************/
2081          char * cystrcpy(char * s1, char * s2)
2082          {
2083   1          return strcpy(s1, s2);
2084   1      }
2085          
2086          /*******************************************************************************
2087          * Function Name: cystrlen
2088          ********************************************************************************
2089          * Summary:
2090          *   Recommended not use these function, these are defined for compatibility.
2091          *
2092          *******************************************************************************/
2093          uint32 cystrlen(const char * s)
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 35  

2094          {
2095   1          return strlen(s);
2096   1      }
2097          
2098          /*******************************************************************************
2099          * Function Name: CyGetSwapReg16
2100          ********************************************************************************
2101          * Summary:
2102          *   Recommended not use these function, these are defined for compatibility.
2103          *
2104          *******************************************************************************/
2105          uint16  CyGetSwapReg16(uint16 CYXDATA* addr)
2106          {
2107   1          return cyread16_nodpx((void CYFAR *) addr);
2108   1      }
2109          
2110          /*******************************************************************************
2111          * Function Name: CySetSwapReg16
2112          ********************************************************************************
2113          * Summary:
2114          *   Recommended not use these function, these are defined for compatibility.
2115          *
2116          *******************************************************************************/
2117          void CySetSwapReg16(uint16 CYXDATA* addr, uint16 value)    
2118          {
2119   1          cywrite16_nodpx((void CYFAR *) addr, value);
2120   1      }
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 36  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyPLL_OUT_Start (BEGIN)
                                           ; SOURCE LINE # 45
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
000A 904220            MOV     DPTR,#04220H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
0015 900000      R     MOV     DPTR,#wait
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 7003              JNZ     $ + 5H
001D 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 58
0020 904300            MOV     DPTR,#04300H
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#ilo_clock_state
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 59
002A 900000      R     MOV     DPTR,#ilo_clock_state
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 20E203            JB      ACC.2,?C0002
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
0033 120000      R     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 62
0036         ?C0002:
                                           ; SOURCE LINE # 65
0036 904382            MOV     DPTR,#04382H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#pm_tw_cfg2_state
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
0040 904380            MOV     DPTR,#04380H
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 37  

                                           ; SOURCE LINE # 69
004A 904382            MOV     DPTR,#04382H
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 54FC              ANL     A,#0FCH
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0055 904380            MOV     DPTR,#04380H
0058 7418              MOV     A,#018H
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
005B 904382            MOV     DPTR,#04382H
005E 7401              MOV     A,#01H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0061 900000      R     MOV     DPTR,#status
0064 7410              MOV     A,#010H
0066 F0                MOVX    @DPTR,A
0067         ?C0003:
                                           ; SOURCE LINE # 79
0067 7F01              MOV     R7,#01H
0069 120000      E     LCALL   _CyPmReadStatus
006C EF                MOV     A,R7
006D 7017              JNZ     ?C0004
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 82
006F 904225            MOV     DPTR,#04225H
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 30E0EF            JNB     ACC.0,?C0003
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0078 904225            MOV     DPTR,#04225H
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 30E0E6            JNB     ACC.0,?C0003
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 87
0081 900000      R     MOV     DPTR,#status
0084 E4                CLR     A
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0086         ?C0004:
                                           ; SOURCE LINE # 93
0086 900000      R     MOV     DPTR,#ilo_clock_state
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B EF                MOV     A,R7
008C 20E203            JB      ACC.2,?C0007
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
008F 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 96
0092         ?C0007:
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 38  

                                           ; SOURCE LINE # 99
0092 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 904380            MOV     DPTR,#04380H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
009C 900000      R     MOV     DPTR,#pm_tw_cfg2_state
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 904382            MOV     DPTR,#04382H
00A4 EF                MOV     A,R7
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
00A6         ?C0001:
                                           ; SOURCE LINE # 102
00A6 900000      R     MOV     DPTR,#status
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
                                           ; SOURCE LINE # 103
00AB         ?C0008:
00AB 22                RET     
             ; FUNCTION _CyPLL_OUT_Start (END)

             ; FUNCTION CyPLL_OUT_Stop (BEGIN)
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 124
0000 904220            MOV     DPTR,#04220H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
000B 22                RET     
             ; FUNCTION CyPLL_OUT_Stop (END)

             ; FUNCTION _CyPLL_OUT_SetPQ (BEGIN)
                                           ; SOURCE LINE # 149
0000 900000      R     MOV     DPTR,#P
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#Q
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#current
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
000F 904220            MOV     DPTR,#04220H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 30E016            JNB     ACC.0,?C0010
0018 904220            MOV     DPTR,#04220H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 39  

001D EF                MOV     A,R7
001E 20E004            JB      ACC.0,?C0011
0021 7F01              MOV     R7,#01H
0023 8002              SJMP    ?C0012
0025         ?C0011:
0025 7F00              MOV     R7,#00H
0027         ?C0012:
0027 E4                CLR     A
0028 FC                MOV     R4,A
0029 FD                MOV     R5,A
002A FE                MOV     R6,A
002B 120000      R     LCALL   _CyHalt
002E         ?C0010:
                                           ; SOURCE LINE # 155
002E 900000      R     MOV     DPTR,#P
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 C3                CLR     C
0035 9404              SUBB    A,#04H
0037 400A              JC      ?C0013
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0039 900000      R     MOV     DPTR,#P
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E 904222            MOV     DPTR,#04222H
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0043         ?C0013:
                                           ; SOURCE LINE # 160
0043 900000      R     MOV     DPTR,#Q
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 D3                SETB    C
004A 9410              SUBB    A,#010H
004C 5018              JNC     ?C0014
004E 900000      R     MOV     DPTR,#Q
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 C3                CLR     C
0055 9401              SUBB    A,#01H
0057 400D              JC      ?C0014
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0059 900000      R     MOV     DPTR,#Q
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 14                DEC     A
0060 FF                MOV     R7,A
0061 904223            MOV     DPTR,#04223H
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0066         ?C0014:
                                           ; SOURCE LINE # 164
0066 900000      R     MOV     DPTR,#current
0069 E0                MOVX    A,@DPTR
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 40  

006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C C3                CLR     C
006D 9401              SUBB    A,#01H
006F 4021              JC      ?C0016
0071 900000      R     MOV     DPTR,#current
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 D3                SETB    C
0078 9407              SUBB    A,#07H
007A 5016              JNC     ?C0016
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 173
007C 900000      R     MOV     DPTR,#current
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 14                DEC     A
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 C4                SWAP    A
0086 54F0              ANL     A,#0F0H
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A 4402              ORL     A,#02H
008C FF                MOV     R7,A
008D 904221            MOV     DPTR,#04221H
0090 EF                MOV     A,R7
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
0092         ?C0016:
0092 22                RET     
             ; FUNCTION _CyPLL_OUT_SetPQ (END)

             ; FUNCTION _CyPLL_OUT_SetSource (BEGIN)
                                           ; SOURCE LINE # 196
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0005 904220            MOV     DPTR,#04220H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 30E016            JNB     ACC.0,?C0017
000E 904220            MOV     DPTR,#04220H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 20E004            JB      ACC.0,?C0018
0017 7F01              MOV     R7,#01H
0019 8002              SJMP    ?C0019
001B         ?C0018:
001B 7F00              MOV     R7,#00H
001D         ?C0019:
001D E4                CLR     A
001E FC                MOV     R4,A
001F FD                MOV     R5,A
0020 FE                MOV     R6,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 41  

0021 120000      R     LCALL   _CyHalt
0024         ?C0017:
                                           ; SOURCE LINE # 205
0024 900000      R     MOV     DPTR,#source
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 120000      E     LCALL   ?C?CCASE
002D 0000        R     DW      ?C0023
002F 00                DB      00H
0030 0000        R     DW      ?C0023
0032 01                DB      01H
0033 0000        R     DW      ?C0023
0035 02                DB      02H
0036 0000              DW      00H
0038 0000        R     DW      ?C0024
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
003A         ?C0023:
                                           ; SOURCE LINE # 210
003A 904000            MOV     DPTR,#04000H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 54FC              ANL     A,#0FCH
0042 FF                MOV     R7,A
0043 900000      R     MOV     DPTR,#source
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A FF                MOV     R7,A
004B 904000            MOV     DPTR,#04000H
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
0050         ?C0024:
0050 22                RET     
             ; FUNCTION _CyPLL_OUT_SetSource (END)

             ; FUNCTION _CyIMO_Start (BEGIN)
                                           ; SOURCE LINE # 240
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 247
0005 9043A0            MOV     DPTR,#043A0H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4410              ORL     A,#010H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
0010 900000      R     MOV     DPTR,#wait
0013 E0                MOVX    A,@DPTR
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 42  

0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 6068              JZ      ?C0030
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 253
0018 904300            MOV     DPTR,#04300H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#ilo_clock_state
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
0022 900000      R     MOV     DPTR,#ilo_clock_state
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 20E203            JB      ACC.2,?C0026
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
002B 120000      R     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 257
002E         ?C0026:
                                           ; SOURCE LINE # 260
002E 904382            MOV     DPTR,#04382H
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
0038 904380            MOV     DPTR,#04380H
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0042 904382            MOV     DPTR,#04382H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 54FC              ANL     A,#0FCH
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
004D 904380            MOV     DPTR,#04380H
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0052 904382            MOV     DPTR,#04382H
0055 7401              MOV     A,#01H
0057 F0                MOVX    @DPTR,A
0058         ?C0027:
                                           ; SOURCE LINE # 273
0058 7F01              MOV     R7,#01H
005A 120000      E     LCALL   _CyPmReadStatus
005D EF                MOV     A,R7
005E 60F8              JZ      ?C0027
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 276
0060         ?C0028:
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 43  

                                           ; SOURCE LINE # 279
0060 900000      R     MOV     DPTR,#ilo_clock_state
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 20E203            JB      ACC.2,?C0029
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0069 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 282
006C         ?C0029:
                                           ; SOURCE LINE # 284
006C 900000      R     MOV     DPTR,#pm_tw_cfg0_state
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 904380            MOV     DPTR,#04380H
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0076 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 904382            MOV     DPTR,#04382H
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0080         ?C0030:
0080 22                RET     
             ; FUNCTION _CyIMO_Start (END)

             ; FUNCTION CyIMO_Stop (BEGIN)
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 307
0000 9043A0            MOV     DPTR,#043A0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
000B 22                RET     
             ; FUNCTION CyIMO_Stop (END)

             ; FUNCTION _CyIMO_SetTrimValue (BEGIN)
                                           ; SOURCE LINE # 325
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 328
0005 906009            MOV     DPTR,#06009H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FD              ANL     A,#0FDH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 44  

                                           ; SOURCE LINE # 330
0010 900000      R     MOV     DPTR,#freq
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 120000      E     LCALL   ?C?CCASE
0019 0000        R     DW      ?C0033
001B 00                DB      00H
001C 0000        R     DW      ?C0034
001E 01                DB      01H
001F 0000        R     DW      ?C0035
0021 02                DB      02H
0022 0000        R     DW      ?C0036
0024 03                DB      03H
0025 0000        R     DW      ?C0037
0027 04                DB      04H
0028 0000        R     DW      ?C0038
002A 05                DB      05H
002B 0000        R     DW      ?C0039
002D 06                DB      06H
002E 0000        R     DW      ?C0040
0030 08                DB      08H
0031 0000              DW      00H
0033 0000        R     DW      ?C0041
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
0035         ?C0033:
                                           ; SOURCE LINE # 333
0035 7B0C              MOV     R3,#0CH
0037 7A01              MOV     R2,#01H
0039 7908              MOV     R1,#08H
003B 120000      E     LCALL   _cyread8
003E 9046A1            MOV     DPTR,#046A1H
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
0043 22                RET     
                                           ; SOURCE LINE # 336
0044         ?C0034:
                                           ; SOURCE LINE # 337
0044 7B0C              MOV     R3,#0CH
0046 7A01              MOV     R2,#01H
0048 7909              MOV     R1,#09H
004A 120000      E     LCALL   _cyread8
004D 9046A1            MOV     DPTR,#046A1H
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0052 22                RET     
                                           ; SOURCE LINE # 340
0053         ?C0035:
                                           ; SOURCE LINE # 341
0053 7B0C              MOV     R3,#0CH
0055 7A01              MOV     R2,#01H
0057 790A              MOV     R1,#0AH
0059 120000      E     LCALL   _cyread8
005C 9046A1            MOV     DPTR,#046A1H
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
0061 22                RET     
                                           ; SOURCE LINE # 344
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 45  

0062         ?C0036:
                                           ; SOURCE LINE # 345
0062 7B0C              MOV     R3,#0CH
0064 7A01              MOV     R2,#01H
0066 790B              MOV     R1,#0BH
0068 120000      E     LCALL   _cyread8
006B 9046A1            MOV     DPTR,#046A1H
006E EF                MOV     A,R7
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
0070 22                RET     
                                           ; SOURCE LINE # 348
0071         ?C0037:
                                           ; SOURCE LINE # 349
0071 7B0C              MOV     R3,#0CH
0073 7A01              MOV     R2,#01H
0075 7988              MOV     R1,#088H
0077 120000      E     LCALL   _cyread8
007A 9046A1            MOV     DPTR,#046A1H
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
007F 22                RET     
                                           ; SOURCE LINE # 352
0080         ?C0038:
                                           ; SOURCE LINE # 353
0080 7B0C              MOV     R3,#0CH
0082 7A01              MOV     R2,#01H
0084 790C              MOV     R1,#0CH
0086 120000      E     LCALL   _cyread8
0089 9046A1            MOV     DPTR,#046A1H
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
008E 22                RET     
                                           ; SOURCE LINE # 356
008F         ?C0039:
                                           ; SOURCE LINE # 357
008F 7B0C              MOV     R3,#0CH
0091 7A01              MOV     R2,#01H
0093 790D              MOV     R1,#0DH
0095 120000      E     LCALL   _cyread8
0098 9046A1            MOV     DPTR,#046A1H
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
009D 22                RET     
                                           ; SOURCE LINE # 360
009E         ?C0040:
                                           ; SOURCE LINE # 361
009E 7B0C              MOV     R3,#0CH
00A0 7A01              MOV     R2,#01H
00A2 790F              MOV     R1,#0FH
00A4 120000      E     LCALL   _cyread8
00A7 9046A1            MOV     DPTR,#046A1H
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
00AC 906009            MOV     DPTR,#06009H
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 46  

00B2 4402              ORL     A,#02H
00B4 FF                MOV     R7,A
00B5 EF                MOV     A,R7
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
00B7 22                RET     
                                           ; SOURCE LINE # 366
00B8         ?C0041:
                                           ; SOURCE LINE # 367
00B8 7F00              MOV     R7,#00H
00BA 120000      R     LCALL   _CyHalt
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 371
00BD         ?C0043:
00BD 22                RET     
             ; FUNCTION _CyIMO_SetTrimValue (END)

             ; FUNCTION _CyIMO_SetFreq (BEGIN)
                                           ; SOURCE LINE # 403
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 426
0005 904200            MOV     DPTR,#04200H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#current_freq
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
0013 900000      R     MOV     DPTR,#freq
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 B40804            CJNE    A,#08H,?C0044
001C 7F03              MOV     R7,#03H
001E 8005              SJMP    ?C0045
0020         ?C0044:
0020 900000      R     MOV     DPTR,#freq
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025         ?C0045:
0025 900000      R     MOV     DPTR,#next_freq
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
002A 900000      R     MOV     DPTR,#current_freq
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 120000      E     LCALL   ?C?CCASE
0033 0000        R     DW      ?C0047
0035 00                DB      00H
0036 0000        R     DW      ?C0048
0038 01                DB      01H
0039 0000        R     DW      ?C0049
003B 02                DB      02H
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 47  

003C 0000        R     DW      ?C0050
003E 03                DB      03H
003F 0000        R     DW      ?C0051
0041 04                DB      04H
0042 0000        R     DW      ?C0052
0044 05                DB      05H
0045 0000        R     DW      ?C0053
0047 06                DB      06H
0048 0000              DW      00H
004A 0000        R     DW      ?C0046
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
004C         ?C0047:
                                           ; SOURCE LINE # 432
004C 900000      R     MOV     DPTR,#current_freq
004F 7402              MOV     A,#02H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0052 802D              SJMP    ?C0046
                                           ; SOURCE LINE # 435
0054         ?C0048:
                                           ; SOURCE LINE # 436
0054 900000      R     MOV     DPTR,#current_freq
0057 7401              MOV     A,#01H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
005A 8025              SJMP    ?C0046
                                           ; SOURCE LINE # 439
005C         ?C0049:
                                           ; SOURCE LINE # 440
005C 900000      R     MOV     DPTR,#current_freq
005F 7403              MOV     A,#03H
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0062 801D              SJMP    ?C0046
                                           ; SOURCE LINE # 443
0064         ?C0050:
                                           ; SOURCE LINE # 444
0064 900000      R     MOV     DPTR,#current_freq
0067 E4                CLR     A
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0069 8016              SJMP    ?C0046
                                           ; SOURCE LINE # 447
006B         ?C0051:
                                           ; SOURCE LINE # 448
006B 900000      R     MOV     DPTR,#current_freq
006E 7404              MOV     A,#04H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0071 800E              SJMP    ?C0046
                                           ; SOURCE LINE # 451
0073         ?C0052:
                                           ; SOURCE LINE # 452
0073 900000      R     MOV     DPTR,#current_freq
0076 7405              MOV     A,#05H
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
0079 8006              SJMP    ?C0046
                                           ; SOURCE LINE # 455
007B         ?C0053:
                                           ; SOURCE LINE # 456
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 48  

007B 900000      R     MOV     DPTR,#current_freq
007E 7406              MOV     A,#06H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
0081         ?C0046:
                                           ; SOURCE LINE # 460
0081 900000      R     MOV     DPTR,#current_freq
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#next_freq
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B EE                MOV     A,R6
008C C3                CLR     C
008D 9F                SUBB    A,R7
008E 4008              JC      ?C0054
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 463
0090 900000      R     MOV     DPTR,#freq
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 464
0098         ?C0054:
                                           ; SOURCE LINE # 467
0098 900000      R     MOV     DPTR,#freq
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E 120000      E     LCALL   ?C?CCASE
00A1 0000        R     DW      ?C0056
00A3 00                DB      00H
00A4 0000        R     DW      ?C0057
00A6 01                DB      01H
00A7 0000        R     DW      ?C0058
00A9 02                DB      02H
00AA 0000        R     DW      ?C0059
00AC 03                DB      03H
00AD 0000        R     DW      ?C0060
00AF 04                DB      04H
00B0 0000        R     DW      ?C0061
00B2 05                DB      05H
00B3 0000        R     DW      ?C0062
00B5 06                DB      06H
00B6 0000        R     DW      ?C0063
00B8 08                DB      08H
00B9 0000              DW      00H
00BB 0000        R     DW      ?C0064
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
00BD         ?C0056:
                                           ; SOURCE LINE # 470
00BD 904200            MOV     DPTR,#04200H
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 EF                MOV     A,R7
00C3 54F8              ANL     A,#0F8H
00C5 FF                MOV     R7,A
00C6 EF                MOV     A,R7
00C7 4403              ORL     A,#03H
00C9 FF                MOV     R7,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 49  

00CA 904200            MOV     DPTR,#04200H
00CD EF                MOV     A,R7
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
00CF 020000      R     LJMP    ?C0055
                                           ; SOURCE LINE # 473
00D2         ?C0057:
                                           ; SOURCE LINE # 474
00D2 904200            MOV     DPTR,#04200H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 54F8              ANL     A,#0F8H
00DA FF                MOV     R7,A
00DB EF                MOV     A,R7
00DC 4401              ORL     A,#01H
00DE FF                MOV     R7,A
00DF 904200            MOV     DPTR,#04200H
00E2 EF                MOV     A,R7
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
00E4 8076              SJMP    ?C0055
                                           ; SOURCE LINE # 477
00E6         ?C0058:
                                           ; SOURCE LINE # 478
00E6 904200            MOV     DPTR,#04200H
00E9 E0                MOVX    A,@DPTR
00EA FF                MOV     R7,A
00EB EF                MOV     A,R7
00EC 54F8              ANL     A,#0F8H
00EE FF                MOV     R7,A
00EF EF                MOV     A,R7
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
00F1 8069              SJMP    ?C0055
                                           ; SOURCE LINE # 481
00F3         ?C0059:
                                           ; SOURCE LINE # 482
00F3 904200            MOV     DPTR,#04200H
00F6 E0                MOVX    A,@DPTR
00F7 FF                MOV     R7,A
00F8 EF                MOV     A,R7
00F9 54F8              ANL     A,#0F8H
00FB FF                MOV     R7,A
00FC EF                MOV     A,R7
00FD 4402              ORL     A,#02H
00FF FF                MOV     R7,A
0100 904200            MOV     DPTR,#04200H
0103 EF                MOV     A,R7
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
0105 8055              SJMP    ?C0055
                                           ; SOURCE LINE # 485
0107         ?C0060:
                                           ; SOURCE LINE # 486
0107 904200            MOV     DPTR,#04200H
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 54F8              ANL     A,#0F8H
010F FF                MOV     R7,A
0110 EF                MOV     A,R7
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 50  

0111 4404              ORL     A,#04H
0113 FF                MOV     R7,A
0114 904200            MOV     DPTR,#04200H
0117 EF                MOV     A,R7
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
0119 8041              SJMP    ?C0055
                                           ; SOURCE LINE # 489
011B         ?C0061:
                                           ; SOURCE LINE # 490
011B 904200            MOV     DPTR,#04200H
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 EF                MOV     A,R7
0121 54F8              ANL     A,#0F8H
0123 FF                MOV     R7,A
0124 EF                MOV     A,R7
0125 4405              ORL     A,#05H
0127 FF                MOV     R7,A
0128 904200            MOV     DPTR,#04200H
012B EF                MOV     A,R7
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
012D 802D              SJMP    ?C0055
                                           ; SOURCE LINE # 493
012F         ?C0062:
                                           ; SOURCE LINE # 494
012F 904200            MOV     DPTR,#04200H
0132 E0                MOVX    A,@DPTR
0133 FF                MOV     R7,A
0134 EF                MOV     A,R7
0135 54F8              ANL     A,#0F8H
0137 FF                MOV     R7,A
0138 EF                MOV     A,R7
0139 4406              ORL     A,#06H
013B FF                MOV     R7,A
013C 904200            MOV     DPTR,#04200H
013F EF                MOV     A,R7
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0141 8019              SJMP    ?C0055
                                           ; SOURCE LINE # 497
0143         ?C0063:
                                           ; SOURCE LINE # 498
0143 904200            MOV     DPTR,#04200H
0146 E0                MOVX    A,@DPTR
0147 FF                MOV     R7,A
0148 EF                MOV     A,R7
0149 54F8              ANL     A,#0F8H
014B FF                MOV     R7,A
014C EF                MOV     A,R7
014D 4402              ORL     A,#02H
014F FF                MOV     R7,A
0150 904200            MOV     DPTR,#04200H
0153 EF                MOV     A,R7
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
0155 8005              SJMP    ?C0055
                                           ; SOURCE LINE # 501
0157         ?C0064:
                                           ; SOURCE LINE # 503
0157 7F00              MOV     R7,#00H
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 51  

0159 120000      R     LCALL   _CyHalt
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
015C         ?C0055:
                                           ; SOURCE LINE # 507
015C 900000      R     MOV     DPTR,#current_freq
015F E0                MOVX    A,@DPTR
0160 FF                MOV     R7,A
0161 900000      R     MOV     DPTR,#next_freq
0164 E0                MOVX    A,@DPTR
0165 FE                MOV     R6,A
0166 EE                MOV     A,R6
0167 C3                CLR     C
0168 9F                SUBB    A,R7
0169 5008              JNC     ?C0067
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 510
016B 900000      R     MOV     DPTR,#freq
016E E0                MOVX    A,@DPTR
016F FF                MOV     R7,A
0170 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 512
0173         ?C0067:
0173 22                RET     
             ; FUNCTION _CyIMO_SetFreq (END)

             ; FUNCTION _CyIMO_SetSource (BEGIN)
                                           ; SOURCE LINE # 538
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 557
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0071
0010 00                DB      00H
0011 0000        R     DW      ?C0070
0013 01                DB      01H
0014 0000        R     DW      ?C0069
0016 02                DB      02H
0017 0000              DW      00H
0019 0000        R     DW      ?C0072
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
001B         ?C0069:
                                           ; SOURCE LINE # 560
001B 904000            MOV     DPTR,#04000H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54BF              ANL     A,#0BFH
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
0026 904200            MOV     DPTR,#04200H
0029 E0                MOVX    A,@DPTR
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 52  

002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 4420              ORL     A,#020H
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
0031 22                RET     
                                           ; SOURCE LINE # 564
0032         ?C0070:
                                           ; SOURCE LINE # 565
0032 904000            MOV     DPTR,#04000H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4440              ORL     A,#040H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 566
003D 904200            MOV     DPTR,#04200H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 4420              ORL     A,#020H
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
0048 22                RET     
                                           ; SOURCE LINE # 569
0049         ?C0071:
                                           ; SOURCE LINE # 570
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54DF              ANL     A,#0DFH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
0054 22                RET     
                                           ; SOURCE LINE # 573
0055         ?C0072:
                                           ; SOURCE LINE # 575
0055 7F00              MOV     R7,#00H
0057 120000      R     LCALL   _CyHalt
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
005A         ?C0074:
005A 22                RET     
             ; FUNCTION _CyIMO_SetSource (END)

             ; FUNCTION CyIMO_EnableDoubler (BEGIN)
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
                                           ; SOURCE LINE # 600
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 53  

0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
000B 22                RET     
             ; FUNCTION CyIMO_EnableDoubler (END)

             ; FUNCTION CyIMO_DisableDoubler (BEGIN)
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 622
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
000B 22                RET     
             ; FUNCTION CyIMO_DisableDoubler (END)

             ; FUNCTION _CyMasterClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 649
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 681
0005 904005            MOV     DPTR,#04005H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#master_reg_1
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
000F 900000      R     MOV     DPTR,#source
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5403              ANL     A,#03H
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#master_reg_1
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 54FC              ANL     A,#0FCH
0020 FE                MOV     R6,A
0021 EE                MOV     A,R6
0022 4F                ORL     A,R7
0023 FF                MOV     R7,A
0024 904005            MOV     DPTR,#04005H
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 692
0029 22                RET     
             ; FUNCTION _CyMasterClk_SetSource (END)

             ; FUNCTION _CyMasterClk_SetDivider (BEGIN)
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 54  

                                           ; SOURCE LINE # 714
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904004            MOV     DPTR,#04004H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
000F 22                RET     
             ; FUNCTION _CyMasterClk_SetDivider (END)

             ; FUNCTION _CyBusClk_Internal_SetDivider (BEGIN)
                                           ; SOURCE LINE # 739
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 742
0008 904014            MOV     DPTR,#04014H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54F0              ANL     A,#0F0H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 743
0013 904010            MOV     DPTR,#04010H
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 749
0018 904008            MOV     DPTR,#04008H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 4480              ORL     A,#080H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 752
0023 7B02              MOV     R3,#02H
0025 7A40              MOV     R2,#040H
0027 7902              MOV     R1,#02H
0029 900000      R     MOV     DPTR,#divider
002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 755
0034 904001            MOV     DPTR,#04001H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 55  

0039 EF                MOV     A,R7
003A 4401              ORL     A,#01H
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 756
003F 22                RET     
             ; FUNCTION _CyBusClk_Internal_SetDivider (END)

             ; FUNCTION _CyBusClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 778
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 784
0008 7B02              MOV     R3,#02H
000A 7A40              MOV     R2,#040H
000C 7906              MOV     R1,#06H
000E 120000      E     LCALL   _cyread16_nodpx
0011 900000      R     MOV     DPTR,#current_busclk_divider
0014 EE                MOV     A,R6
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 787
0019 900000      R     MOV     DPTR,#divider
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 600C              JZ      ?C0081
0025 900000      R     MOV     DPTR,#current_busclk_divider
0028 E0                MOVX    A,@DPTR
0029 FE                MOV     R6,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 4E                ORL     A,R6
002F 705D              JNZ     ?C0080
0031         ?C0081:
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 790
0031 904004            MOV     DPTR,#04004H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#current_masterclk_divider
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
003B 900000      R     MOV     DPTR,#current_masterclk_divider
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 56  

0041 C3                CLR     C
0042 9407              SUBB    A,#07H
0044 5005              JNC     ?C0082
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 794
0046 7F07              MOV     R7,#07H
0048 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 795
004B         ?C0082:
                                           ; SOURCE LINE # 796
004B 900000      R     MOV     DPTR,#divider
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 4E                ORL     A,R6
0055 7018              JNZ     ?C0083
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 801
0057 904008            MOV     DPTR,#04008H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D 4440              ORL     A,#040H
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
0062 900000      R     MOV     DPTR,#divider
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 803
006D 8016              SJMP    ?C0084
006F         ?C0083:
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 809
006F 900000      R     MOV     DPTR,#divider
0072 E0                MOVX    A,@DPTR
0073 FE                MOV     R6,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 810
007A 904008            MOV     DPTR,#04008H
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 54BF              ANL     A,#0BFH
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
0085         ?C0084:
                                           ; SOURCE LINE # 813
0085 900000      R     MOV     DPTR,#current_masterclk_divider
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 57  

0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 814
008D 22                RET     
008E         ?C0080:
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
008E 900000      R     MOV     DPTR,#divider
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
0099         ?C0086:
0099 22                RET     
             ; FUNCTION _CyBusClk_SetDivider (END)

             ; FUNCTION _CyCpuClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 839
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 840
                                           ; SOURCE LINE # 842
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F 904005            MOV     DPTR,#04005H
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 EE                MOV     A,R6
0015 540F              ANL     A,#0FH
0017 FE                MOV     R6,A
0018 EF                MOV     A,R7
0019 4E                ORL     A,R6
001A FF                MOV     R7,A
001B 904005            MOV     DPTR,#04005H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 846
0020 22                RET     
             ; FUNCTION _CyCpuClk_SetDivider (END)

             ; FUNCTION _CyUsbClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 868
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 871
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 58  

000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
000E 904009            MOV     DPTR,#04009H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54FC              ANL     A,#0FCH
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904009            MOV     DPTR,#04009H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
001F 22                RET     
             ; FUNCTION _CyUsbClk_SetSource (END)

             ; FUNCTION CyILO_Start1K (BEGIN)
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 893
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4402              ORL     A,#02H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 894
000B 22                RET     
             ; FUNCTION CyILO_Start1K (END)

             ; FUNCTION CyILO_Stop1K (BEGIN)
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 915
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
000B 22                RET     
             ; FUNCTION CyILO_Stop1K (END)

             ; FUNCTION CyILO_Start100K (BEGIN)
                                           ; SOURCE LINE # 934
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 937
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 59  

                                           ; SOURCE LINE # 938
000B 22                RET     
             ; FUNCTION CyILO_Start100K (END)

             ; FUNCTION CyILO_Stop100K (BEGIN)
                                           ; SOURCE LINE # 956
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 959
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 960
000B 22                RET     
             ; FUNCTION CyILO_Stop100K (END)

             ; FUNCTION CyILO_Enable33K (BEGIN)
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 983
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4420              ORL     A,#020H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 984
000B 22                RET     
             ; FUNCTION CyILO_Enable33K (END)

             ; FUNCTION CyILO_Disable33K (BEGIN)
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1007
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54DF              ANL     A,#0DFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1008
000B 22                RET     
             ; FUNCTION CyILO_Disable33K (END)

             ; FUNCTION _CyILO_SetSource (BEGIN)
                                           ; SOURCE LINE # 1030
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1033
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 60  

000A EF                MOV     A,R7
000B 25E0              ADD     A,ACC
000D 25E0              ADD     A,ACC
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 540C              ANL     A,#0CH
0013 FF                MOV     R7,A
0014 904000            MOV     DPTR,#04000H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A 54F3              ANL     A,#0F3H
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 4F                ORL     A,R7
001F FF                MOV     R7,A
0020 904000            MOV     DPTR,#04000H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1034
0025 22                RET     
             ; FUNCTION _CyILO_SetSource (END)

             ; FUNCTION _CyILO_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1054
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1059
0005 904300            MOV     DPTR,#04300H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#state
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1062
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0096
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
0017 900000      R     MOV     DPTR,#state
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4410              ORL     A,#010H
001F FF                MOV     R7,A
0020 904300            MOV     DPTR,#04300H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1065
0025 800E              SJMP    ?C0097
0027         ?C0096:
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1068
0027 900000      R     MOV     DPTR,#state
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 61  

002D 54EF              ANL     A,#0EFH
002F FF                MOV     R7,A
0030 904300            MOV     DPTR,#04300H
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1069
0035         ?C0097:
                                           ; SOURCE LINE # 1072
0035 900000      R     MOV     DPTR,#state
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5410              ANL     A,#010H
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F C4                SWAP    A
0040 540F              ANL     A,#0FH
0042 FF                MOV     R7,A
                                           ; SOURCE LINE # 1073
0043         ?C0098:
0043 22                RET     
             ; FUNCTION _CyILO_SetPowerMode (END)

             ; FUNCTION CyXTAL_32KHZ_Start (BEGIN)
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1094
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH timeout
0004 7900        R     MOV     R1,#LOW timeout
0006 900000      R     MOV     DPTR,#timeout_p
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1098
000C 904698            MOV     DPTR,#04698H
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#x32TrHold
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1099
0016 904698            MOV     DPTR,#04698H
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1102
001B 90430A            MOV     DPTR,#0430AH
001E 74F1              MOV     A,#0F1H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1103
0021 904309            MOV     DPTR,#04309H
0024 7480              MOV     A,#080H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1107
0027 904308            MOV     DPTR,#04308H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 4404              ORL     A,#04H
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
0032 904308            MOV     DPTR,#04308H
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 62  

0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4401              ORL     A,#01H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
003D 7F00              MOV     R7,#00H
003F 7E6B              MOV     R6,#06BH
0041 7D03              MOV     R5,#03H
0043 7C00              MOV     R4,#00H
0045 900000      R     MOV     DPTR,#timeout
0048 120000      E     LCALL   ?C?LSTXDATA
004B         ?C0099:
004B 900000      R     MOV     DPTR,#timeout_p
004E 120000      E     LCALL   ?C?PLDXDATA
0051 120000      E     LCALL   ?C?LLDPTR
0054 EC                MOV     A,R4
0055 4D                ORL     A,R5
0056 4E                ORL     A,R6
0057 4F                ORL     A,R7
0058 6028              JZ      ?C0100
005A 904308            MOV     DPTR,#04308H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 5420              ANL     A,#020H
0062 FF                MOV     R7,A
0063 7E00              MOV     R6,#00H
0065 EF                MOV     A,R7
0066 4E                ORL     A,R6
0067 7019              JNZ     ?C0100
0069 900000      R     MOV     DPTR,#timeout
006C 120000      E     LCALL   ?C?LLDXDATA
006F 7BFF              MOV     R3,#0FFH
0071 7AFF              MOV     R2,#0FFH
0073 79FF              MOV     R1,#0FFH
0075 78FF              MOV     R0,#0FFH
0077 120000      E     LCALL   ?C?LADD
007A 900000      R     MOV     DPTR,#timeout
007D 120000      E     LCALL   ?C?LSTXDATA
0080 80C9              SJMP    ?C0099
0082         ?C0100:
                                           ; SOURCE LINE # 1112
0082 900000      R     MOV     DPTR,#x32TrHold
0085 E0                MOVX    A,@DPTR
0086 FF                MOV     R7,A
0087 904698            MOV     DPTR,#04698H
008A EF                MOV     A,R7
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1114
008C 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Start (END)

             ; FUNCTION CyXTAL_32KHZ_Stop (BEGIN)
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1135
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 63  

0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1136
000B 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Stop (END)

             ; FUNCTION CyXTAL_32KHZ_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1161
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1164
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#status
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1168
000A 900000      R     MOV     DPTR,#status
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5430              ANL     A,#030H
0012 FF                MOV     R7,A
                                           ; SOURCE LINE # 1169
0013         ?C0104:
0013 22                RET     
             ; FUNCTION CyXTAL_32KHZ_ReadStatus (END)

             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1190
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1195
0005 904308            MOV     DPTR,#04308H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#state
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0105
                                           ; SOURCE LINE # 1199
                                           ; SOURCE LINE # 1200
0017 900000      R     MOV     DPTR,#state
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4402              ORL     A,#02H
001F FF                MOV     R7,A
0020 904308            MOV     DPTR,#04308H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1201
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 64  

0025 800E              SJMP    ?C0106
0027         ?C0105:
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1204
0027 900000      R     MOV     DPTR,#state
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FD              ANL     A,#0FDH
002F FF                MOV     R7,A
0030 904308            MOV     DPTR,#04308H
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1205
0035         ?C0106:
                                           ; SOURCE LINE # 1209
0035 900000      R     MOV     DPTR,#state
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5402              ANL     A,#02H
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F C3                CLR     C
0040 13                RRC     A
0041 FF                MOV     R7,A
                                           ; SOURCE LINE # 1210
0042         ?C0107:
0042 22                RET     
             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (END)

             ; FUNCTION _CyXTAL_Start (BEGIN)
                                           ; SOURCE LINE # 1247
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1249
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1250
000A 900000      R     MOV     DPTR,#pm_tw_cfg2_state
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1251
000F 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1252
0014 900000      R     MOV     DPTR,#ilo_clock_state
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1253
0019 900000      R     MOV     DPTR,#count
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1254
001E 900000      R     MOV     DPTR,#wait
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#wait_msec
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 65  

0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
0028 904210            MOV     DPTR,#04210H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 4401              ORL     A,#01H
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1258
0033 900000      R     MOV     DPTR,#wait
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 D3                SETB    C
003A 9400              SUBB    A,#00H
003C 4047              JC      ?C0110
                                           ; SOURCE LINE # 1259
                                           ; SOURCE LINE # 1261
003E 904300            MOV     DPTR,#04300H
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 900000      R     MOV     DPTR,#ilo_clock_state
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1262
0048 900000      R     MOV     DPTR,#ilo_clock_state
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 20E203            JB      ACC.2,?C0109
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1264
0051 120000      R     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1265
0054         ?C0109:
                                           ; SOURCE LINE # 1266
0054 900000      R     MOV     DPTR,#status
0057 7410              MOV     A,#010H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1269
005A 904382            MOV     DPTR,#04382H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1270
0064 904380            MOV     DPTR,#04380H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#pm_tw_cfg0_state
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1273
006E 904382            MOV     DPTR,#04382H
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 54FC              ANL     A,#0FCH
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 66  

0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1277
0079 904380            MOV     DPTR,#04380H
007C 7418              MOV     A,#018H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1279
007F 904382            MOV     DPTR,#04382H
0082 7401              MOV     A,#01H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1282
0085         ?C0110:
0085 900000      R     MOV     DPTR,#wait_msec
0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B D3                SETB    C
008C 9400              SUBB    A,#00H
008E 403E              JC      ?C0111
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1285
0090 904210            MOV     DPTR,#04210H
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
                                           ; SOURCE LINE # 1288
0095 900000      R     MOV     DPTR,#count
0098 7404              MOV     A,#04H
009A F0                MOVX    @DPTR,A
009B         ?C0113:
009B 900000      R     MOV     DPTR,#count
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 EF                MOV     A,R7
00A1 D3                SETB    C
00A2 9400              SUBB    A,#00H
00A4 4010              JC      ?C0114
                                           ; SOURCE LINE # 1289
00A6         ?C0116:
                                           ; SOURCE LINE # 1291
00A6 7F01              MOV     R7,#01H
00A8 120000      E     LCALL   _CyPmReadStatus
00AB EF                MOV     A,R7
00AC 60F8              JZ      ?C0116
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1295
00AE         ?C0115:
00AE 900000      R     MOV     DPTR,#count
00B1 E0                MOVX    A,@DPTR
00B2 14                DEC     A
00B3 F0                MOVX    @DPTR,A
00B4 80E5              SJMP    ?C0113
00B6         ?C0114:
                                           ; SOURCE LINE # 1298
00B6 904210            MOV     DPTR,#04210H
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB EF                MOV     A,R7
00BC 20E707            JB      ACC.7,?C0112
                                           ; SOURCE LINE # 1299
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 67  

                                           ; SOURCE LINE # 1300
00BF 900000      R     MOV     DPTR,#status
00C2 E4                CLR     A
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1301
00C4 8008              SJMP    ?C0111
                                           ; SOURCE LINE # 1302
                                           ; SOURCE LINE # 1303
00C6         ?C0112:
00C6 900000      R     MOV     DPTR,#wait_msec
00C9 E0                MOVX    A,@DPTR
00CA 14                DEC     A
00CB F0                MOVX    @DPTR,A
00CC 80B7              SJMP    ?C0110
00CE         ?C0111:
                                           ; SOURCE LINE # 1305
00CE 900000      R     MOV     DPTR,#wait
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 EF                MOV     A,R7
00D4 D3                SETB    C
00D5 9400              SUBB    A,#00H
00D7 4020              JC      ?C0119
                                           ; SOURCE LINE # 1306
                                           ; SOURCE LINE # 1307
00D9 900000      R     MOV     DPTR,#ilo_clock_state
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE EF                MOV     A,R7
00DF 20E203            JB      ACC.2,?C0120
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1310
00E2 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 1311
00E5         ?C0120:
                                           ; SOURCE LINE # 1314
00E5 900000      R     MOV     DPTR,#pm_tw_cfg0_state
00E8 E0                MOVX    A,@DPTR
00E9 FF                MOV     R7,A
00EA 904380            MOV     DPTR,#04380H
00ED EF                MOV     A,R7
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1315
00EF 900000      R     MOV     DPTR,#pm_tw_cfg2_state
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 904382            MOV     DPTR,#04382H
00F7 EF                MOV     A,R7
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1316
00F9         ?C0119:
                                           ; SOURCE LINE # 1318
00F9 900000      R     MOV     DPTR,#status
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
                                           ; SOURCE LINE # 1319
00FE         ?C0121:
00FE 22                RET     
             ; FUNCTION _CyXTAL_Start (END)

             ; FUNCTION CyXTAL_Stop (BEGIN)
                                           ; SOURCE LINE # 1337
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 68  

                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1340
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1341
000B 22                RET     
             ; FUNCTION CyXTAL_Stop (END)

             ; FUNCTION CyXTAL_EnableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1362
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1363
000B 22                RET     
             ; FUNCTION CyXTAL_EnableErrStatus (END)

             ; FUNCTION CyXTAL_DisableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1382
                                           ; SOURCE LINE # 1384
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1385
000B 22                RET     
             ; FUNCTION CyXTAL_DisableErrStatus (END)

             ; FUNCTION CyXTAL_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1407
                                           ; SOURCE LINE # 1413
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5480              ANL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A C4                SWAP    A
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 5401              ANL     A,#01H
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 69  

0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 1414
0011         ?C0125:
0011 22                RET     
             ; FUNCTION CyXTAL_ReadStatus (END)

             ; FUNCTION CyXTAL_EnableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1436
                                           ; SOURCE LINE # 1439
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4440              ORL     A,#040H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1440
000B 22                RET     
             ; FUNCTION CyXTAL_EnableFaultRecovery (END)

             ; FUNCTION CyXTAL_DisableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1459
                                           ; SOURCE LINE # 1460
                                           ; SOURCE LINE # 1463
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54BF              ANL     A,#0BFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1464
000B 22                RET     
             ; FUNCTION CyXTAL_DisableFaultRecovery (END)

             ; FUNCTION _CyXTAL_SetStartup (BEGIN)
                                           ; SOURCE LINE # 1484
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1485
                                           ; SOURCE LINE # 1487
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 541F              ANL     A,#01FH
000D FF                MOV     R7,A
000E 904212            MOV     DPTR,#04212H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54E0              ANL     A,#0E0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904212            MOV     DPTR,#04212H
001D EF                MOV     A,R7
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 70  

001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1489
001F 22                RET     
             ; FUNCTION _CyXTAL_SetStartup (END)

             ; FUNCTION _CyXTAL_SetFbVoltage (BEGIN)
                                           ; SOURCE LINE # 1515
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1516
                                           ; SOURCE LINE # 1521
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 540F              ANL     A,#0FH
000D FF                MOV     R7,A
000E 904213            MOV     DPTR,#04213H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F0              ANL     A,#0F0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904213            MOV     DPTR,#04213H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1523
001F 22                RET     
             ; FUNCTION _CyXTAL_SetFbVoltage (END)

             ; FUNCTION _CyXTAL_SetWdVoltage (BEGIN)
                                           ; SOURCE LINE # 1548
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1556
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5470              ANL     A,#070H
0012 FF                MOV     R7,A
0013 904213            MOV     DPTR,#04213H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 548F              ANL     A,#08FH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904213            MOV     DPTR,#04213H
0022 EF                MOV     A,R7
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 71  

0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1558
0024 22                RET     
             ; FUNCTION _CyXTAL_SetWdVoltage (END)

             ; FUNCTION _CyHalt (BEGIN)
                                           ; SOURCE LINE # 1584
0000 900000      R     MOV     DPTR,#reason
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1585
                                           ; SOURCE LINE # 1586
0005 900000      R     MOV     DPTR,#reason
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#reason
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1592
000F 9046EA            MOV     DPTR,#046EAH
0012 7401              MOV     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1594
0015 22                RET     
             ; FUNCTION _CyHalt (END)

             ; FUNCTION CySoftwareReset (BEGIN)
                                           ; SOURCE LINE # 1613
                                           ; SOURCE LINE # 1614
                                           ; SOURCE LINE # 1616
0000 9046F6            MOV     DPTR,#046F6H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1617
0006 22                RET     
             ; FUNCTION CySoftwareReset (END)

             ; FUNCTION _?CyDelay (BEGIN)
                                           ; SOURCE LINE # 1645
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
0009         ?C0133:
                                           ; SOURCE LINE # 1647
0009 7F00              MOV     R7,#00H
000B 7E80              MOV     R6,#080H
000D 7D00              MOV     R5,#00H
000F 7C00              MOV     R4,#00H
0011 850083      E     MOV     DPH,?C_XBP
0014 850082      E     MOV     DPL,?C_XBP+01H
0017 120000      E     LCALL   ?C?LLDXDATA0
001A D3                SETB    C
001B 120000      E     LCALL   ?C?ULCMP
001E 4030              JC      ?C0134
                                           ; SOURCE LINE # 1648
                                           ; SOURCE LINE # 1652
0020 900000      R     MOV     DPTR,#cydelay_32k_ms
0023 120000      E     LCALL   ?C?LLDXDATA
0026 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1653
0029 850083      E     MOV     DPH,?C_XBP
002C 850082      E     MOV     DPL,?C_XBP+01H
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 72  

002F C083              PUSH    DPH
0031 C082              PUSH    DPL
0033 120000      E     LCALL   ?C?LLDXDATA
0036 C3                CLR     C
0037 EF                MOV     A,R7
0038 9400              SUBB    A,#00H
003A FF                MOV     R7,A
003B EE                MOV     A,R6
003C 9480              SUBB    A,#080H
003E FE                MOV     R6,A
003F ED                MOV     A,R5
0040 9400              SUBB    A,#00H
0042 FD                MOV     R5,A
0043 EC                MOV     A,R4
0044 9400              SUBB    A,#00H
0046 FC                MOV     R4,A
0047 D082              POP     DPL
0049 D083              POP     DPH
004B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1654
004E 80B9              SJMP    ?C0133
0050         ?C0134:
                                           ; SOURCE LINE # 1656
0050 900000      R     MOV     DPTR,#cydelay_freq_khz
0053 120000      E     LCALL   ?C?LLDXDATA
0056 850083      E     MOV     DPH,?C_XBP
0059 850082      E     MOV     DPL,?C_XBP+01H
005C 120000      E     LCALL   ?C?LLDXDATA0
005F 120000      E     LCALL   ?C?LMUL
0062 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1657
0065 900004            MOV     DPTR,#04H
0068 120000      E     LCALL   ?C?ADDXBP
006B 22                RET     
             ; FUNCTION _?CyDelay (END)

             ; FUNCTION _?CyDelayFreq (BEGIN)
                                           ; SOURCE LINE # 1703
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1705
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F 120000      E     LCALL   ?C?LLDXDATA
0012 EF                MOV     A,R7
0013 4E                ORL     A,R6
0014 6011              JZ      ?C0136
                                           ; SOURCE LINE # 1706
0016 850083      E     MOV     DPH,?C_XBP
0019 850082      E     MOV     DPL,?C_XBP+01H
001C 120000      E     LCALL   ?C?LLDXDATA
001F 900000      R     MOV     DPTR,#cydelay_freq_hz
0022 120000      E     LCALL   ?C?LSTXDATA
0025 800E              SJMP    ?C0137
0027         ?C0136:
                                           ; SOURCE LINE # 1708
0027 7F00              MOV     R7,#00H
0029 7E36              MOV     R6,#036H
002B 7D6E              MOV     R5,#06EH
002D 7C01              MOV     R4,#01H
002F 900000      R     MOV     DPTR,#cydelay_freq_hz
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 73  

0032 120000      E     LCALL   ?C?LSTXDATA
0035         ?C0137:
                                           ; SOURCE LINE # 1709
0035 900000      R     MOV     DPTR,#cydelay_freq_hz
0038 120000      E     LCALL   ?C?LLDXDATA
003B EF                MOV     A,R7
003C 243F              ADD     A,#03FH
003E FF                MOV     R7,A
003F EE                MOV     A,R6
0040 3442              ADDC    A,#042H
0042 FE                MOV     R6,A
0043 ED                MOV     A,R5
0044 340F              ADDC    A,#0FH
0046 FD                MOV     R5,A
0047 EC                MOV     A,R4
0048 3400              ADDC    A,#00H
004A FC                MOV     R4,A
004B 7B40              MOV     R3,#040H
004D 7A42              MOV     R2,#042H
004F 790F              MOV     R1,#0FH
0051 7800              MOV     R0,#00H
0053 120000      E     LCALL   ?C?ULDIV
0056 900000      R     MOV     DPTR,#cydelay_freq_mhz
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1710
005B 900000      R     MOV     DPTR,#cydelay_freq_hz
005E 120000      E     LCALL   ?C?LLDXDATA
0061 EF                MOV     A,R7
0062 24E7              ADD     A,#0E7H
0064 FF                MOV     R7,A
0065 EE                MOV     A,R6
0066 3403              ADDC    A,#03H
0068 FE                MOV     R6,A
0069 ED                MOV     A,R5
006A 3400              ADDC    A,#00H
006C FD                MOV     R5,A
006D EC                MOV     A,R4
006E 3400              ADDC    A,#00H
0070 FC                MOV     R4,A
0071 7BE8              MOV     R3,#0E8H
0073 7A03              MOV     R2,#03H
0075 7900              MOV     R1,#00H
0077 7800              MOV     R0,#00H
0079 120000      E     LCALL   ?C?ULDIV
007C 900000      R     MOV     DPTR,#cydelay_freq_khz
007F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1711
0082 7F00              MOV     R7,#00H
0084 7E80              MOV     R6,#080H
0086 7D00              MOV     R5,#00H
0088 7C00              MOV     R4,#00H
008A 900000      R     MOV     DPTR,#cydelay_freq_khz
008D 120000      E     LCALL   ?C?LLDXDATA0
0090 120000      E     LCALL   ?C?LMUL
0093 900000      R     MOV     DPTR,#cydelay_32k_ms
0096 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1712
0099 900004            MOV     DPTR,#04H
009C 120000      E     LCALL   ?C?ADDXBP
009F 22                RET     
             ; FUNCTION _?CyDelayFreq (END)
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 74  


             ; FUNCTION _CyWdtStart (BEGIN)
                                           ; SOURCE LINE # 1742
0000 900000      R     MOV     DPTR,#ticks
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#lpMode
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1743
                                           ; SOURCE LINE # 1745
000A 904383            MOV     DPTR,#04383H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 54FC              ANL     A,#0FCH
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#ticks
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 5403              ANL     A,#03H
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904383            MOV     DPTR,#04383H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1748
0024 904383            MOV     DPTR,#04383H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4480              ORL     A,#080H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1749
002F 904383            MOV     DPTR,#04383H
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 547F              ANL     A,#07FH
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1752
003A 900000      R     MOV     DPTR,#lpMode
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 C4                SWAP    A
0041 33                RLC     A
0042 54E0              ANL     A,#0E0H
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 5460              ANL     A,#060H
0048 FF                MOV     R7,A
0049 904383            MOV     DPTR,#04383H
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 75  

004E EE                MOV     A,R6
004F 549F              ANL     A,#09FH
0051 FE                MOV     R6,A
0052 EF                MOV     A,R7
0053 4E                ORL     A,R6
0054 FF                MOV     R7,A
0055 904383            MOV     DPTR,#04383H
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1755
005A 904383            MOV     DPTR,#04383H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 4410              ORL     A,#010H
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1756
0065 22                RET     
             ; FUNCTION _CyWdtStart (END)

             ; FUNCTION CyWdtClear (BEGIN)
                                           ; SOURCE LINE # 1773
                                           ; SOURCE LINE # 1774
                                           ; SOURCE LINE # 1784
0000 904384            MOV     DPTR,#04384H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1786
0006 22                RET     
             ; FUNCTION CyWdtClear (END)

             ; FUNCTION CyDisableInts (BEGIN)
                                           ; SOURCE LINE # 1803
                                           ; SOURCE LINE # 1804
                                           ; SOURCE LINE # 1809
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 79C8              MOV     R1,#0C8H
0006 120000      E     LCALL   _cyread32_nodpx
0009 900000      R     MOV     DPTR,#intState
000C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1812
000F 7B02              MOV     R3,#02H
0011 7A44              MOV     R2,#044H
0013 79C8              MOV     R1,#0C8H
0015 7FFF              MOV     R7,#0FFH
0017 7EFF              MOV     R6,#0FFH
0019 7DFF              MOV     R5,#0FFH
001B 7CFF              MOV     R4,#0FFH
001D 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 1814
0020 900000      R     MOV     DPTR,#intState
0023 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1815
0026         ?C0141:
0026 22                RET     
             ; FUNCTION CyDisableInts (END)

             ; FUNCTION _CyEnableInts (BEGIN)
                                           ; SOURCE LINE # 1832
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 76  

0000 900000      R     MOV     DPTR,#mask
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1833
                                           ; SOURCE LINE # 1835
0006 7B02              MOV     R3,#02H
0008 7A44              MOV     R2,#044H
000A 79C0              MOV     R1,#0C0H
000C 900000      R     MOV     DPTR,#mask
000F 120000      E     LCALL   ?C?LLDXDATA
0012 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 1836
0015 22                RET     
             ; FUNCTION _CyEnableInts (END)

             ; FUNCTION _CyIntSetVector (BEGIN)
                                           ; SOURCE LINE # 1855
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1856
                                           ; SOURCE LINE # 1861
000D 900000      R     MOV     DPTR,#number
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 7E02              MOV     R6,#02H
0014 EF                MOV     A,R7
0015 8EF0              MOV     B,R6
0017 A4                MUL     AB
0018 FF                MOV     R7,A
0019 AEF0              MOV     R6,B
001B EF                MOV     A,R7
001C 2400              ADD     A,#00H
001E FF                MOV     R7,A
001F EE                MOV     A,R6
0020 3444              ADDC    A,#044H
0022 FE                MOV     R6,A
0023 AA06              MOV     R2,AR6
0025 A907              MOV     R1,AR7
0027 7B01              MOV     R3,#01H
0029 120000      E     LCALL   _cyread16_nodpx
002C 900000      R     MOV     DPTR,#oldIsr
002F EE                MOV     A,R6
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1864
0034 900000      R     MOV     DPTR,#number
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 7E02              MOV     R6,#02H
003B EF                MOV     A,R7
003C 8EF0              MOV     B,R6
003E A4                MUL     AB
003F FF                MOV     R7,A
0040 AEF0              MOV     R6,B
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 77  

0042 EF                MOV     A,R7
0043 2400              ADD     A,#00H
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 3444              ADDC    A,#044H
0049 FE                MOV     R6,A
004A AA06              MOV     R2,AR6
004C A907              MOV     R1,AR7
004E 7B01              MOV     R3,#01H
0050 900000      R     MOV     DPTR,#address
0053 E0                MOVX    A,@DPTR
0054 FE                MOV     R6,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 AD07              MOV     R5,AR7
005A AC06              MOV     R4,AR6
005C 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1866
005F 900000      R     MOV     DPTR,#oldIsr
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
                                           ; SOURCE LINE # 1867
0067         ?C0143:
0067 22                RET     
             ; FUNCTION _CyIntSetVector (END)

             ; FUNCTION _CyIntGetVector (BEGIN)
                                           ; SOURCE LINE # 1884
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1885
                                           ; SOURCE LINE # 1886
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 7E02              MOV     R6,#02H
000C EF                MOV     A,R7
000D 8EF0              MOV     B,R6
000F A4                MUL     AB
0010 FF                MOV     R7,A
0011 AEF0              MOV     R6,B
0013 EF                MOV     A,R7
0014 2400              ADD     A,#00H
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 3444              ADDC    A,#044H
001A FE                MOV     R6,A
001B AA06              MOV     R2,AR6
001D A907              MOV     R1,AR7
001F 7B01              MOV     R3,#01H
0021 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 1887
0024         ?C0144:
0024 22                RET     
             ; FUNCTION _CyIntGetVector (END)

             ; FUNCTION _CyIntSetPriority (BEGIN)
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 78  

                                           ; SOURCE LINE # 1906
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#priority
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1907
                                           ; SOURCE LINE # 1908
000A 900000      R     MOV     DPTR,#priority
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9407              SUBB    A,#07H
0013 5003              JNC     ?C0146
0015 D3                SETB    C
0016 8001              SJMP    ?C0147
0018         ?C0146:
0018 C3                CLR     C
0019         ?C0147:
0019 4020              JC      ?C0145
001B 900000      R     MOV     DPTR,#priority
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 D3                SETB    C
0022 9407              SUBB    A,#07H
0024 500A              JNC     ?C0148
0026 7F01              MOV     R7,#01H
0028 7E00              MOV     R6,#00H
002A 7D00              MOV     R5,#00H
002C 7C00              MOV     R4,#00H
002E 8008              SJMP    ?C0149
0030         ?C0148:
0030 7F00              MOV     R7,#00H
0032 7E00              MOV     R6,#00H
0034 7D00              MOV     R5,#00H
0036 7C00              MOV     R4,#00H
0038         ?C0149:
0038 120000      R     LCALL   _CyHalt
003B         ?C0145:
                                           ; SOURCE LINE # 1909
003B 900000      R     MOV     DPTR,#number
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 D3                SETB    C
0042 941F              SUBB    A,#01FH
0044 5003              JNC     ?C0151
0046 D3                SETB    C
0047 8001              SJMP    ?C0152
0049         ?C0151:
0049 C3                CLR     C
004A         ?C0152:
004A 4020              JC      ?C0150
004C 900000      R     MOV     DPTR,#number
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 D3                SETB    C
0053 941F              SUBB    A,#01FH
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 79  

0055 500A              JNC     ?C0153
0057 7F01              MOV     R7,#01H
0059 7E00              MOV     R6,#00H
005B 7D00              MOV     R5,#00H
005D 7C00              MOV     R4,#00H
005F 8008              SJMP    ?C0154
0061         ?C0153:
0061 7F00              MOV     R7,#00H
0063 7E00              MOV     R6,#00H
0065 7D00              MOV     R5,#00H
0067 7C00              MOV     R4,#00H
0069         ?C0154:
0069 120000      R     LCALL   _CyHalt
006C         ?C0150:
                                           ; SOURCE LINE # 1910
006C 900000      R     MOV     DPTR,#priority
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 C4                SWAP    A
0073 33                RLC     A
0074 54E0              ANL     A,#0E0H
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#number
007A E0                MOVX    A,@DPTR
007B FE                MOV     R6,A
007C 7480              MOV     A,#080H
007E 2E                ADD     A,R6
007F F582              MOV     DPL,A
0081 E4                CLR     A
0082 3444              ADDC    A,#044H
0084 F583              MOV     DPH,A
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1911
0088 22                RET     
             ; FUNCTION _CyIntSetPriority (END)

             ; FUNCTION _CyIntGetPriority (BEGIN)
                                           ; SOURCE LINE # 1929
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1930
                                           ; SOURCE LINE # 1934
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 7480              MOV     A,#080H
000C 2F                ADD     A,R7
000D F582              MOV     DPL,A
000F E4                CLR     A
0010 3444              ADDC    A,#044H
0012 F583              MOV     DPH,A
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 C4                SWAP    A
0018 13                RRC     A
0019 5407              ANL     A,#07H
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#priority
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 80  

001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1936
0021 900000      R     MOV     DPTR,#priority
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
                                           ; SOURCE LINE # 1937
0026         ?C0156:
0026 22                RET     
             ; FUNCTION _CyIntGetPriority (END)

             ; FUNCTION _CyIntEnable (BEGIN)
                                           ; SOURCE LINE # 1954
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1955
                                           ; SOURCE LINE # 1959
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 7E00              MOV     R6,#00H
0013 EF                MOV     A,R7
0014 24C0              ADD     A,#0C0H
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 3444              ADDC    A,#044H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#enableReg
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1962
0023 900000      R     MOV     DPTR,#number
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
002B FF                MOV     R7,A
002C 7401              MOV     A,#01H
002E A807              MOV     R0,AR7
0030 08                INC     R0
0031 8002              SJMP    ?C0169
0033         ?C0168:
0033 C3                CLR     C
0034 33                RLC     A
0035         ?C0169:
0035 D8FC              DJNZ    R0,?C0168
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#enableReg
003B E0                MOVX    A,@DPTR
003C FC                MOV     R4,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 81  

003F FD                MOV     R5,A
0040 8D82              MOV     DPL,R5
0042 8C83              MOV     DPH,R4
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1963
0046 22                RET     
             ; FUNCTION _CyIntEnable (END)

             ; FUNCTION _CyIntGetState (BEGIN)
                                           ; SOURCE LINE # 1980
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1986
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 7E00              MOV     R6,#00H
0013 EF                MOV     A,R7
0014 24C0              ADD     A,#0C0H
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 3444              ADDC    A,#044H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#stateReg
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1989
0023 900000      R     MOV     DPTR,#stateReg
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 8F82              MOV     DPL,R7
002D 8E83              MOV     DPH,R6
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 FD                MOV     R5,A
0033 7C00              MOV     R4,#00H
0035 900000      R     MOV     DPTR,#number
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5407              ANL     A,#07H
003D FF                MOV     R7,A
003E 7401              MOV     A,#01H
0040 7E00              MOV     R6,#00H
0042 A807              MOV     R0,AR7
0044 08                INC     R0
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 82  

0045 8005              SJMP    ?C0171
0047         ?C0170:
0047 C3                CLR     C
0048 33                RLC     A
0049 CE                XCH     A,R6
004A 33                RLC     A
004B CE                XCH     A,R6
004C         ?C0171:
004C D8F9              DJNZ    R0,?C0170
004E FF                MOV     R7,A
004F EE                MOV     A,R6
0050 5C                ANL     A,R4
0051 FE                MOV     R6,A
0052 EF                MOV     A,R7
0053 5D                ANL     A,R5
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 4E                ORL     A,R6
0057 6004              JZ      ?C0158
0059 7F01              MOV     R7,#01H
005B 8002              SJMP    ?C0159
005D         ?C0158:
005D 7F00              MOV     R7,#00H
005F         ?C0159:
                                           ; SOURCE LINE # 1990
005F         ?C0160:
005F 22                RET     
             ; FUNCTION _CyIntGetState (END)

             ; FUNCTION _CyIntDisable (BEGIN)
                                           ; SOURCE LINE # 2007
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2008
                                           ; SOURCE LINE # 2013
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 7E00              MOV     R6,#00H
0013 EF                MOV     A,R7
0014 24C8              ADD     A,#0C8H
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 3444              ADDC    A,#044H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#clearReg
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2016
0023 900000      R     MOV     DPTR,#number
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 83  

0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
002B FF                MOV     R7,A
002C 7401              MOV     A,#01H
002E A807              MOV     R0,AR7
0030 08                INC     R0
0031 8002              SJMP    ?C0173
0033         ?C0172:
0033 C3                CLR     C
0034 33                RLC     A
0035         ?C0173:
0035 D8FC              DJNZ    R0,?C0172
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#clearReg
003B E0                MOVX    A,@DPTR
003C FC                MOV     R4,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FD                MOV     R5,A
0040 8D82              MOV     DPL,R5
0042 8C83              MOV     DPH,R4
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2017
0046 22                RET     
             ; FUNCTION _CyIntDisable (END)

             ; FUNCTION _CyIntSetPending (BEGIN)
                                           ; SOURCE LINE # 2034
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2035
                                           ; SOURCE LINE # 2040
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 7E00              MOV     R6,#00H
0013 EF                MOV     A,R7
0014 24D0              ADD     A,#0D0H
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 3444              ADDC    A,#044H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#pendReg
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2043
0023 900000      R     MOV     DPTR,#number
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 84  

002B FF                MOV     R7,A
002C 7401              MOV     A,#01H
002E A807              MOV     R0,AR7
0030 08                INC     R0
0031 8002              SJMP    ?C0175
0033         ?C0174:
0033 C3                CLR     C
0034 33                RLC     A
0035         ?C0175:
0035 D8FC              DJNZ    R0,?C0174
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#pendReg
003B E0                MOVX    A,@DPTR
003C FC                MOV     R4,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FD                MOV     R5,A
0040 8D82              MOV     DPL,R5
0042 8C83              MOV     DPH,R4
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2044
0046 22                RET     
             ; FUNCTION _CyIntSetPending (END)

             ; FUNCTION _CyIntClearPending (BEGIN)
                                           ; SOURCE LINE # 2060
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2061
                                           ; SOURCE LINE # 2066
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 7E00              MOV     R6,#00H
0013 EF                MOV     A,R7
0014 24D8              ADD     A,#0D8H
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 3444              ADDC    A,#044H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#pendReg
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2069
0023 900000      R     MOV     DPTR,#number
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
002B FF                MOV     R7,A
002C 7401              MOV     A,#01H
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 85  

002E A807              MOV     R0,AR7
0030 08                INC     R0
0031 8002              SJMP    ?C0177
0033         ?C0176:
0033 C3                CLR     C
0034 33                RLC     A
0035         ?C0177:
0035 D8FC              DJNZ    R0,?C0176
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#pendReg
003B E0                MOVX    A,@DPTR
003C FC                MOV     R4,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FD                MOV     R5,A
0040 8D82              MOV     DPL,R5
0042 8C83              MOV     DPH,R4
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2070
0046 22                RET     
             ; FUNCTION _CyIntClearPending (END)

             ; FUNCTION _cystrcpy (BEGIN)
                                           ; SOURCE LINE # 2081
0000 900000      R     MOV     DPTR,#s1
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 2082
                                           ; SOURCE LINE # 2083
0006 900000      R     MOV     DPTR,#s2
0009 120000      E     LCALL   ?C?PLDXDATA
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 900000      R     MOV     DPTR,#s1
0015 120000      E     LCALL   ?C?PLDXDATA
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
001E D001              POP     AR1
0020 D002              POP     AR2
0022 D003              POP     AR3
0024 120000      E     LCALL   ?C?STRCPYAMD
                                           ; SOURCE LINE # 2084
0027         ?C0164:
0027 22                RET     
             ; FUNCTION _cystrcpy (END)

             ; FUNCTION _cystrlen (BEGIN)
                                           ; SOURCE LINE # 2093
0000 900000      R     MOV     DPTR,#s
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 2094
                                           ; SOURCE LINE # 2095
0006 900000      R     MOV     DPTR,#s
0009 120000      E     LCALL   ?C?PLDXDATA
000C 120000      E     LCALL   _strlen
000F EE                MOV     A,R6
0010 33                RLC     A
0011 95E0              SUBB    A,ACC
0013 FD                MOV     R5,A
0014 FC                MOV     R4,A
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 86  

                                           ; SOURCE LINE # 2096
0015         ?C0165:
0015 22                RET     
             ; FUNCTION _cystrlen (END)

             ; FUNCTION _CyGetSwapReg16 (BEGIN)
                                           ; SOURCE LINE # 2105
0000 900000      R     MOV     DPTR,#addr
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2106
                                           ; SOURCE LINE # 2107
0008 900000      R     MOV     DPTR,#addr
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 AA06              MOV     R2,AR6
0012 A907              MOV     R1,AR7
0014 7B01              MOV     R3,#01H
0016 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 2108
0019         ?C0166:
0019 22                RET     
             ; FUNCTION _CyGetSwapReg16 (END)

             ; FUNCTION _CySetSwapReg16 (BEGIN)
                                           ; SOURCE LINE # 2117
0000 900000      R     MOV     DPTR,#addr
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#value
000B EC                MOV     A,R4
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2118
                                           ; SOURCE LINE # 2119
0010 900000      R     MOV     DPTR,#addr
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 AA06              MOV     R2,AR6
001A A907              MOV     R1,AR7
001C 7B01              MOV     R3,#01H
001E 900000      R     MOV     DPTR,#value
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 120000      E     LCALL   _cywrite16_nodpx
C51 COMPILER V8.16   CYLIB                                                                 07/15/2011 13:52:49 PAGE 87  

                                           ; SOURCE LINE # 2120
0029 22                RET     
             ; FUNCTION _CySetSwapReg16 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3717    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13     105
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
